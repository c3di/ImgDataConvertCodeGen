<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="3" tests="51" time="12.350" timestamp="2024-03-30T17:54:29.239857" hostname="fv-az960-715"><testcase classname="tests.test_code_generation" name="test_convert_code_generator_init" time="0.002" /><testcase classname="tests.test_code_generation" name="test_knowledge_graph_property" time="0.001" /><testcase classname="tests.test_code_generation" name="test_conversion_path" time="0.001" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_no_path" time="0.001" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_same_type" time="0.001" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_multiple_steps" time="0.002" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_using_cache" time="0.001" /><testcase classname="tests.test_conversion_code_execution" name="test_code_generation_using_metadata" time="0.002" /><testcase classname="tests.test_conversion_code_in_kg" name="test_all_conversion_code_exec_on_cpu" time="2.806"><failure message="AssertionError: expected [[[[127]&#10;     [181]&#10;     [117]&#10;     [ 68]&#10;     [131]&#10;     [ 70]&#10;     [106]&#10;     [ 89]&#10;     [163]&#10;     [137]&#10;     [ 86]&#10;     [171]&#10;     [ 92]&#10;     [235]&#10;     [132]&#10;     [141]&#10;     [127]&#10;     [184]&#10;     [133]&#10;     [125]]&#10;  &#10;    [[121]&#10;     [123]&#10;     [161]&#10;     [238]&#10;     [103]&#10;     [131]&#10;     [204]&#10;     [ 56]&#10;     [195]&#10;     [ 77]&#10;     [120]&#10;     [ 62]&#10;     [122]&#10;     [210]&#10;     [142]&#10;     [ 92]&#10;     [ 74]&#10;     [ 20]&#10;     [ 61]&#10;     [ 72]]&#10;  &#10;    [[205]&#10;     [108]&#10;     [ 72]&#10;     [ 80]&#10;     [ 68]&#10;     [159]&#10;     [130]&#10;     [178]&#10;     [ 75]&#10;     [174]&#10;     [152]&#10;     [132]&#10;     [177]&#10;     [162]&#10;     [137]&#10;     [173]&#10;     [ 86]&#10;     [101]&#10;     [ 74]&#10;     [ 57]]&#10;  &#10;    [[127]&#10;     [115]&#10;     [131]&#10;     [184]&#10;     [112]&#10;     [143]&#10;     [164]&#10;     [187]&#10;     [163]&#10;     [116]&#10;     [113]&#10;     [164]&#10;     [216]&#10;     [194]&#10;     [224]&#10;     [125]&#10;     [171]&#10;     [ 77]&#10;     [165]&#10;     [121]]&#10;  &#10;    [[ 65]&#10;     [ 43]&#10;     [ 81]&#10;     [ 88]&#10;     [155]&#10;     [124]&#10;     [163]&#10;     [ 88]&#10;     [ 80]&#10;     [101]&#10;     [155]&#10;     [ 56]&#10;     [158]&#10;     [ 76]&#10;     [138]&#10;     [108]&#10;     [101]&#10;     [119]&#10;     [108]&#10;     [118]]&#10;  &#10;    [[124]&#10;     [ 83]&#10;     [ 55]&#10;     [112]&#10;     [203]&#10;     [112]&#10;     [103]&#10;     [ 50]&#10;     [136]&#10;     [174]&#10;     [238]&#10;     [100]&#10;     [108]&#10;     [ 34]&#10;     [152]&#10;     [127]&#10;     [102]&#10;     [ 93]&#10;     [ 39]&#10;     [189]]&#10;  &#10;    [[198]&#10;     [104]&#10;     [215]&#10;     [123]&#10;     [103]&#10;     [ 62]&#10;     [146]&#10;     [126]&#10;     [150]&#10;     [199]&#10;     [ 85]&#10;     [ 46]&#10;     [ 86]&#10;     [166]&#10;     [201]&#10;     [205]&#10;     [ 81]&#10;     [ 60]&#10;     [ 40]&#10;     [ 40]]&#10;  &#10;    [[152]&#10;     [138]&#10;     [133]&#10;     [145]&#10;     [178]&#10;     [235]&#10;     [169]&#10;     [183]&#10;     [200]&#10;     [ 34]&#10;     [167]&#10;     [171]&#10;     [138]&#10;     [ 41]&#10;     [ 74]&#10;     [ 98]&#10;     [116]&#10;     [140]&#10;     [189]&#10;     [136]]&#10;  &#10;    [[144]&#10;     [111]&#10;     [143]&#10;     [219]&#10;     [ 78]&#10;     [106]&#10;     [137]&#10;     [ 44]&#10;     [ 31]&#10;     [144]&#10;     [109]&#10;     [ 60]&#10;     [ 84]&#10;     [137]&#10;     [ 28]&#10;     [229]&#10;     [ 35]&#10;     [182]&#10;     [209]&#10;     [ 92]]&#10;  &#10;    [[ 88]&#10;     [123]&#10;     [147]&#10;     [105]&#10;     [185]&#10;     [180]&#10;     [ 90]&#10;     [164]&#10;     [127]&#10;     [168]&#10;     [ 76]&#10;     [ 46]&#10;     [ 76]&#10;     [171]&#10;     [150]&#10;     [ 64]&#10;     [132]&#10;     [191]&#10;     [ 94]&#10;     [185]]&#10;  &#10;    [[219]&#10;     [150]&#10;     [115]&#10;     [ 77]&#10;     [172]&#10;     [ 63]&#10;     [ 42]&#10;     [ 99]&#10;     [ 93]&#10;     [ 55]&#10;     [138]&#10;     [152]&#10;     [137]&#10;     [181]&#10;     [ 71]&#10;     [126]&#10;     [ 83]&#10;     [ 88]&#10;     [135]&#10;     [210]]&#10;  &#10;    [[124]&#10;     [ 87]&#10;     [ 35]&#10;     [160]&#10;     [177]&#10;     [201]&#10;     [160]&#10;     [ 59]&#10;     [169]&#10;     [174]&#10;     [ 59]&#10;     [ 88]&#10;     [ 43]&#10;     [180]&#10;     [147]&#10;     [185]&#10;     [144]&#10;     [175]&#10;     [183]&#10;     [ 58]]&#10;  &#10;    [[170]&#10;     [143]&#10;     [ 87]&#10;     [ 94]&#10;     [148]&#10;     [ 27]&#10;     [201]&#10;     [111]&#10;     [209]&#10;     [180]&#10;     [183]&#10;     [141]&#10;     [ 80]&#10;     [ 76]&#10;     [ 60]&#10;     [199]&#10;     [142]&#10;     [149]&#10;     [196]&#10;     [175]]&#10;  &#10;    [[157]&#10;     [126]&#10;     [ 79]&#10;     [123]&#10;     [123]&#10;     [ 58]&#10;     [ 85]&#10;     [ 78]&#10;     [148]&#10;     [ 64]&#10;     [153]&#10;     [ 96]&#10;     [ 74]&#10;     [216]&#10;     [210]&#10;     [109]&#10;     [ 90]&#10;     [175]&#10;     [157]&#10;     [ 87]]&#10;  &#10;    [[216]&#10;     [ 58]&#10;     [190]&#10;     [ 53]&#10;     [154]&#10;     [ 46]&#10;     [116]&#10;     [ 92]&#10;     [145]&#10;     [ 95]&#10;     [ 88]&#10;     [150]&#10;     [113]&#10;     [139]&#10;     [117]&#10;     [235]&#10;     [154]&#10;     [187]&#10;     [ 81]&#10;     [162]]&#10;  &#10;    [[ 84]&#10;     [102]&#10;     [ 33]&#10;     [103]&#10;     [145]&#10;     [125]&#10;     [150]&#10;     [149]&#10;     [ 97]&#10;     [159]&#10;     [ 42]&#10;     [130]&#10;     [193]&#10;     [ 93]&#10;     [150]&#10;     [117]&#10;     [102]&#10;     [ 54]&#10;     [164]&#10;     [153]]&#10;  &#10;    [[150]&#10;     [ 92]&#10;     [191]&#10;     [186]&#10;     [ 69]&#10;     [ 67]&#10;     [153]&#10;     [135]&#10;     [193]&#10;     [162]&#10;     [160]&#10;     [ 96]&#10;     [170]&#10;     [134]&#10;     [176]&#10;     [222]&#10;     [182]&#10;     [ 58]&#10;     [ 95]&#10;     [104]]&#10;  &#10;    [[ 44]&#10;     [ 61]&#10;     [ 51]&#10;     [210]&#10;     [ 83]&#10;     [122]&#10;     [ 68]&#10;     [145]&#10;     [ 51]&#10;     [222]&#10;     [167]&#10;     [ 83]&#10;     [141]&#10;     [ 91]&#10;     [152]&#10;     [164]&#10;     [131]&#10;     [128]&#10;     [110]&#10;     [ 36]]&#10;  &#10;    [[ 87]&#10;     [ 84]&#10;     [ 73]&#10;     [241]&#10;     [ 69]&#10;     [120]&#10;     [ 59]&#10;     [180]&#10;     [203]&#10;     [146]&#10;     [139]&#10;     [ 77]&#10;     [132]&#10;     [189]&#10;     [219]&#10;     [186]&#10;     [161]&#10;     [ 56]&#10;     [100]&#10;     [ 79]]&#10;  &#10;    [[193]&#10;     [135]&#10;     [155]&#10;     [115]&#10;     [ 19]&#10;     [ 90]&#10;     [170]&#10;     [ 65]&#10;     [186]&#10;     [ 47]&#10;     [137]&#10;     [123]&#10;     [124]&#10;     [170]&#10;     [ 72]&#10;     [204]&#10;     [165]&#10;     [ 67]&#10;     [192]&#10;     [168]]]], but actual [[[[127]&#10;     [181]&#10;     [117]&#10;     [ 68]&#10;     [131]&#10;     [ 70]&#10;     [106]&#10;     [ 89]&#10;     [163]&#10;     [137]&#10;     [ 86]&#10;     [171]&#10;     [ 92]&#10;     [235]&#10;     [132]&#10;     [141]&#10;     [127]&#10;     [184]&#10;     [133]&#10;     [125]]&#10;  &#10;    [[121]&#10;     [123]&#10;     [161]&#10;     [238]&#10;     [103]&#10;     [131]&#10;     [204]&#10;     [ 56]&#10;     [195]&#10;     [ 77]&#10;     [120]&#10;     [ 62]&#10;     [122]&#10;     [210]&#10;     [142]&#10;     [ 92]&#10;     [ 74]&#10;     [ 20]&#10;     [ 61]&#10;     [ 72]]&#10;  &#10;    [[205]&#10;     [108]&#10;     [ 72]&#10;     [ 80]&#10;     [ 68]&#10;     [159]&#10;     [130]&#10;     [178]&#10;     [ 75]&#10;     [174]&#10;     [152]&#10;     [132]&#10;     [177]&#10;     [162]&#10;     [137]&#10;     [173]&#10;     [ 86]&#10;     [101]&#10;     [ 74]&#10;     [ 57]]&#10;  &#10;    [[127]&#10;     [115]&#10;     [131]&#10;     [184]&#10;     [112]&#10;     [143]&#10;     [164]&#10;     [187]&#10;     [163]&#10;     [116]&#10;     [113]&#10;     [164]&#10;     [216]&#10;     [194]&#10;     [224]&#10;     [125]&#10;     [171]&#10;     [ 77]&#10;     [165]&#10;     [121]]&#10;  &#10;    [[ 65]&#10;     [ 43]&#10;     [ 81]&#10;     [ 88]&#10;     [155]&#10;     [124]&#10;     [163]&#10;     [ 88]&#10;     [ 80]&#10;     [101]&#10;     [155]&#10;     [ 56]&#10;     [158]&#10;     [ 76]&#10;     [138]&#10;     [108]&#10;     [101]&#10;     [119]&#10;     [108]&#10;     [118]]&#10;  &#10;    [[124]&#10;     [ 83]&#10;     [ 55]&#10;     [112]&#10;     [203]&#10;     [112]&#10;     [103]&#10;     [ 50]&#10;     [136]&#10;     [174]&#10;     [238]&#10;     [100]&#10;     [108]&#10;     [ 34]&#10;     [152]&#10;     [127]&#10;     [102]&#10;     [ 93]&#10;     [ 39]&#10;     [189]]&#10;  &#10;    [[198]&#10;     [104]&#10;     [215]&#10;     [123]&#10;     [104]&#10;     [ 62]&#10;     [146]&#10;     [126]&#10;     [150]&#10;     [199]&#10;     [ 85]&#10;     [ 46]&#10;     [ 86]&#10;     [166]&#10;     [201]&#10;     [205]&#10;     [ 81]&#10;     [ 60]&#10;     [ 40]&#10;     [ 40]]&#10;  &#10;    [[152]&#10;     [138]&#10;     [133]&#10;     [145]&#10;     [178]&#10;     [235]&#10;     [169]&#10;     [183]&#10;     [200]&#10;     [ 34]&#10;     [167]&#10;     [171]&#10;     [138]&#10;     [ 41]&#10;     [ 74]&#10;     [ 98]&#10;     [116]&#10;     [140]&#10;     [189]&#10;     [136]]&#10;  &#10;    [[144]&#10;     [111]&#10;     [143]&#10;     [219]&#10;     [ 78]&#10;     [106]&#10;     [137]&#10;     [ 44]&#10;     [ 31]&#10;     [144]&#10;     [109]&#10;     [ 60]&#10;     [ 84]&#10;     [137]&#10;     [ 28]&#10;     [229]&#10;     [ 35]&#10;     [182]&#10;     [209]&#10;     [ 92]]&#10;  &#10;    [[ 88]&#10;     [123]&#10;     [147]&#10;     [105]&#10;     [185]&#10;     [180]&#10;     [ 90]&#10;     [164]&#10;     [127]&#10;     [168]&#10;     [ 76]&#10;     [ 46]&#10;     [ 76]&#10;     [171]&#10;     [150]&#10;     [ 64]&#10;     [132]&#10;     [191]&#10;     [ 94]&#10;     [185]]&#10;  &#10;    [[219]&#10;     [150]&#10;     [115]&#10;     [ 77]&#10;     [172]&#10;     [ 63]&#10;     [ 42]&#10;     [ 99]&#10;     [ 93]&#10;     [ 55]&#10;     [138]&#10;     [152]&#10;     [137]&#10;     [181]&#10;     [ 71]&#10;     [126]&#10;     [ 83]&#10;     [ 88]&#10;     [135]&#10;     [210]]&#10;  &#10;    [[124]&#10;     [ 87]&#10;     [ 35]&#10;     [160]&#10;     [177]&#10;     [201]&#10;     [160]&#10;     [ 59]&#10;     [169]&#10;     [174]&#10;     [ 59]&#10;     [ 88]&#10;     [ 43]&#10;     [180]&#10;     [147]&#10;     [185]&#10;     [144]&#10;     [175]&#10;     [183]&#10;     [ 58]]&#10;  &#10;    [[170]&#10;     [143]&#10;     [ 87]&#10;     [ 94]&#10;     [148]&#10;     [ 27]&#10;     [201]&#10;     [111]&#10;     [209]&#10;     [180]&#10;     [183]&#10;     [141]&#10;     [ 80]&#10;     [ 76]&#10;     [ 60]&#10;     [199]&#10;     [142]&#10;     [149]&#10;     [196]&#10;     [175]]&#10;  &#10;    [[157]&#10;     [126]&#10;     [ 79]&#10;     [123]&#10;     [123]&#10;     [ 58]&#10;     [ 85]&#10;     [ 78]&#10;     [148]&#10;     [ 64]&#10;     [153]&#10;     [ 96]&#10;     [ 74]&#10;     [216]&#10;     [210]&#10;     [109]&#10;     [ 90]&#10;     [175]&#10;     [157]&#10;     [ 87]]&#10;  &#10;    [[216]&#10;     [ 58]&#10;     [190]&#10;     [ 53]&#10;     [154]&#10;     [ 46]&#10;     [116]&#10;     [ 92]&#10;     [145]&#10;     [ 95]&#10;     [ 88]&#10;     [150]&#10;     [113]&#10;     [139]&#10;     [117]&#10;     [235]&#10;     [154]&#10;     [187]&#10;     [ 81]&#10;     [162]]&#10;  &#10;    [[ 84]&#10;     [102]&#10;     [ 33]&#10;     [103]&#10;     [145]&#10;     [125]&#10;     [150]&#10;     [149]&#10;     [ 97]&#10;     [159]&#10;     [ 42]&#10;     [130]&#10;     [193]&#10;     [ 93]&#10;     [150]&#10;     [117]&#10;     [102]&#10;     [ 54]&#10;     [164]&#10;     [153]]&#10;  &#10;    [[150]&#10;     [ 92]&#10;     [191]&#10;     [186]&#10;     [ 69]&#10;     [ 67]&#10;     [153]&#10;     [135]&#10;     [193]&#10;     [162]&#10;     [160]&#10;     [ 96]&#10;     [170]&#10;     [134]&#10;     [176]&#10;     [222]&#10;     [182]&#10;     [ 58]&#10;     [ 95]&#10;     [104]]&#10;  &#10;    [[ 44]&#10;     [ 61]&#10;     [ 51]&#10;     [210]&#10;     [ 83]&#10;     [122]&#10;     [ 68]&#10;     [145]&#10;     [ 51]&#10;     [222]&#10;     [167]&#10;     [ 83]&#10;     [141]&#10;     [ 91]&#10;     [152]&#10;     [164]&#10;     [131]&#10;     [128]&#10;     [110]&#10;     [ 36]]&#10;  &#10;    [[ 87]&#10;     [ 84]&#10;     [ 73]&#10;     [241]&#10;     [ 69]&#10;     [120]&#10;     [ 59]&#10;     [180]&#10;     [203]&#10;     [146]&#10;     [139]&#10;     [ 77]&#10;     [132]&#10;     [189]&#10;     [219]&#10;     [186]&#10;     [161]&#10;     [ 56]&#10;     [100]&#10;     [ 79]]&#10;  &#10;    [[193]&#10;     [135]&#10;     [155]&#10;     [115]&#10;     [ 19]&#10;     [ 90]&#10;     [170]&#10;     [ 65]&#10;     [186]&#10;     [ 47]&#10;     [137]&#10;     [123]&#10;     [124]&#10;     [170]&#10;     [ 72]&#10;     [204]&#10;     [165]&#10;     [ 67]&#10;     [192]&#10;     [168]]]]. conversion from&#10;   {'data_representation': 'numpy.ndarray', 'color_channel': 'bgr', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'uint8', 'device': 'cpu'} to&#10;   {'data_representation': 'numpy.ndarray', 'color_channel': 'gray', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'uint8', 'device': 'cpu'} failed&#10;   imports: import numpy as np&#10;  conversion function: &#10;   def convert(var):&#10;      type_in = var.dtype&#10;      var = np.expand_dims(np.dot(var[..., :3], [0.114, 0.587, 0.299]), axis=-1)&#10;      return var.astype(type_in)&#10;  from channel_last_bgr_to_gray in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py&#10;assert False&#10; +  where False = is_image_equal(array([[[[127],\n         [181],\n         [117],\n         [ 68],\n         [131],\n         [ 70],\n         [106],\n         [ 89],\n         [163],\n         [137],\n         [ 86],\n         [171],\n         [ 92],\n         [235],\n         [132],\n         [141],\n         [127],\n         [184],\n         [133],\n         [125]],\n\n        [[121],\n         [123],\n         [161],\n         [238],\n         [103],\n         [131],\n         [204],\n         [ 56],\n         [195],\n         [ 77],\n         [120],\n         [ 62],\n         [122],\n         [210],\n         [142],\n         [ 92],\n         [ 74],\n         [ 20],\n         [ 61],\n         [ 72]],\n\n        [[205],\n         [108],\n         [ 72],\n         [ 80],\n         [ 68],\n         [159],\n         [130],\n         [178],\n         [ 75],\n         [174],\n         [152],\n         [132],\n         [177],\n         [162],\n         [137],\n         [173],\n         [ 86],\n         [101],\n         [ 74],\n         [ 57]],\n\n        [[127],\n         [115],\n         [131],\n         [184],\n         [112],\n         [143],\n         [164],\n         [187],\n         [163],\n         [116],\n         [113],\n         [164],\n         [216],\n         [194],\n        ...   [153],\n         [135],\n         [193],\n         [162],\n         [160],\n         [ 96],\n         [170],\n         [134],\n         [176],\n         [222],\n         [182],\n         [ 58],\n         [ 95],\n         [104]],\n\n        [[ 44],\n         [ 61],\n         [ 51],\n         [210],\n         [ 83],\n         [122],\n         [ 68],\n         [145],\n         [ 51],\n         [222],\n         [167],\n         [ 83],\n         [141],\n         [ 91],\n         [152],\n         [164],\n         [131],\n         [128],\n         [110],\n         [ 36]],\n\n        [[ 87],\n         [ 84],\n         [ 73],\n         [241],\n         [ 69],\n         [120],\n         [ 59],\n         [180],\n         [203],\n         [146],\n         [139],\n         [ 77],\n         [132],\n         [189],\n         [219],\n         [186],\n         [161],\n         [ 56],\n         [100],\n         [ 79]],\n\n        [[193],\n         [135],\n         [155],\n         [115],\n         [ 19],\n         [ 90],\n         [170],\n         [ 65],\n         [186],\n         [ 47],\n         [137],\n         [123],\n         [124],\n         [170],\n         [ 72],\n         [204],\n         [165],\n         [ 67],\n         [192],\n         [168]]]], dtype=uint8), array([[[[127],\n         [181],\n         [117],\n         [ 68],\n         [131],\n         [ 70],\n         [106],\n         [ 89],\n         [163],\n         [137],\n         [ 86],\n         [171],\n         [ 92],\n         [235],\n         [132],\n         [141],\n         [127],\n         [184],\n         [133],\n         [125]],\n\n        [[121],\n         [123],\n         [161],\n         [238],\n         [103],\n         [131],\n         [204],\n         [ 56],\n         [195],\n         [ 77],\n         [120],\n         [ 62],\n         [122],\n         [210],\n         [142],\n         [ 92],\n         [ 74],\n         [ 20],\n         [ 61],\n         [ 72]],\n\n        [[205],\n         [108],\n         [ 72],\n         [ 80],\n         [ 68],\n         [159],\n         [130],\n         [178],\n         [ 75],\n         [174],\n         [152],\n         [132],\n         [177],\n         [162],\n         [137],\n         [173],\n         [ 86],\n         [101],\n         [ 74],\n         [ 57]],\n\n        [[127],\n         [115],\n         [131],\n         [184],\n         [112],\n         [143],\n         [164],\n         [187],\n         [163],\n         [116],\n         [113],\n         [164],\n         [216],\n         [194],\n        ...   [153],\n         [135],\n         [193],\n         [162],\n         [160],\n         [ 96],\n         [170],\n         [134],\n         [176],\n         [222],\n         [182],\n         [ 58],\n         [ 95],\n         [104]],\n\n        [[ 44],\n         [ 61],\n         [ 51],\n         [210],\n         [ 83],\n         [122],\n         [ 68],\n         [145],\n         [ 51],\n         [222],\n         [167],\n         [ 83],\n         [141],\n         [ 91],\n         [152],\n         [164],\n         [131],\n         [128],\n         [110],\n         [ 36]],\n\n        [[ 87],\n         [ 84],\n         [ 73],\n         [241],\n         [ 69],\n         [120],\n         [ 59],\n         [180],\n         [203],\n         [146],\n         [139],\n         [ 77],\n         [132],\n         [189],\n         [219],\n         [186],\n         [161],\n         [ 56],\n         [100],\n         [ 79]],\n\n        [[193],\n         [135],\n         [155],\n         [115],\n         [ 19],\n         [ 90],\n         [170],\n         [ 65],\n         [186],\n         [ 47],\n         [137],\n         [123],\n         [124],\n         [170],\n         [ 72],\n         [204],\n         [165],\n         [ 67],\n         [192],\n         [168]]]], dtype=uint8))">code_generator = &lt;imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7fa63a2c9e40&gt;

    def test_all_conversion_code_exec_on_cpu(code_generator):
        kg = code_generator.knowledge_graph
        for edge in kg.edges:
            if is_code_exec_on_cpu(edge):
&gt;               assert_exec_of_conversion_code_in_edge(*edge, kg)

tests/test_conversion_code_in_kg.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source_metadata = {'channel_order': 'channel last', 'color_channel': 'bgr', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
target_metadata = {'channel_order': 'channel last', 'color_channel': 'gray', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
kg = &lt;imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7fa6a5f66fb0&gt;

    def assert_exec_of_conversion_code_in_edge(source_metadata, target_metadata, kg):
        edge_data = kg.get_edge_data(source_metadata, target_metadata)
        conversion = edge_data.get('conversion')
        assert conversion is not None, f"No conversion from {source_metadata} to {target_metadata}"
        assert len(conversion) == 2, (f"Expected two elements in the conversions, but got: {conversion} from"
                                      f" {source_metadata} to {target_metadata}")
        assert isinstance(conversion[0], str), (f"Expected the first element of the conversion to be a string, but got:"
                                                f" {conversion[0]} from {source_metadata} to {target_metadata}")
        assert isinstance(conversion[1], str), (f"Expected the second element of the conversion to be a string, but got:"
                                                f" {conversion[1]} from {source_metadata} to {target_metadata}")
        error_message = (f"conversion from\n {source_metadata} to\n {target_metadata} failed\n "
                         f"imports: {conversion[0]}\nconversion function: \n {conversion[1]}\nfrom {edge_data.get('factory')}")
    
        try:
            source_image, target_image = get_input_image_and_expected_output(source_metadata, target_metadata)
            func_name = re.search(r'(?&lt;=def )\w+', conversion[1]).group(0)
    
            scope = {}
            scope.update({'source_image': source_image})
            exec(f"""{conversion[0]}
    {conversion[1]}
    actual_image = {func_name}(source_image)""", scope)
            actual_image = scope.get('actual_image')
        except Exception as e:
            raise AssertionError(f"Failed to execute conversion code from {error_message}") from e
    
&gt;       assert is_image_equal(target_image,
                              actual_image), f'expected {target_image}, but actual {actual_image}. {error_message}'
E       AssertionError: expected [[[[127]
E            [181]
E            [117]
E            [ 68]
E            [131]
E            [ 70]
E            [106]
E            [ 89]
E            [163]
E            [137]
E            [ 86]
E            [171]
E            [ 92]
E            [235]
E            [132]
E            [141]
E            [127]
E            [184]
E            [133]
E            [125]]
E         
E           [[121]
E            [123]
E            [161]
E            [238]
E            [103]
E            [131]
E            [204]
E            [ 56]
E            [195]
E            [ 77]
E            [120]
E            [ 62]
E            [122]
E            [210]
E            [142]
E            [ 92]
E            [ 74]
E            [ 20]
E            [ 61]
E            [ 72]]
E         
E           [[205]
E            [108]
E            [ 72]
E            [ 80]
E            [ 68]
E            [159]
E            [130]
E            [178]
E            [ 75]
E            [174]
E            [152]
E            [132]
E            [177]
E            [162]
E            [137]
E            [173]
E            [ 86]
E            [101]
E            [ 74]
E            [ 57]]
E         
E           [[127]
E            [115]
E            [131]
E            [184]
E            [112]
E            [143]
E            [164]
E            [187]
E            [163]
E            [116]
E            [113]
E            [164]
E            [216]
E            [194]
E            [224]
E            [125]
E            [171]
E            [ 77]
E            [165]
E            [121]]
E         
E           [[ 65]
E            [ 43]
E            [ 81]
E            [ 88]
E            [155]
E            [124]
E            [163]
E            [ 88]
E            [ 80]
E            [101]
E            [155]
E            [ 56]
E            [158]
E            [ 76]
E            [138]
E            [108]
E            [101]
E            [119]
E            [108]
E            [118]]
E         
E           [[124]
E            [ 83]
E            [ 55]
E            [112]
E            [203]
E            [112]
E            [103]
E            [ 50]
E            [136]
E            [174]
E            [238]
E            [100]
E            [108]
E            [ 34]
E            [152]
E            [127]
E            [102]
E            [ 93]
E            [ 39]
E            [189]]
E         
E           [[198]
E            [104]
E            [215]
E            [123]
E            [103]
E            [ 62]
E            [146]
E            [126]
E            [150]
E            [199]
E            [ 85]
E            [ 46]
E            [ 86]
E            [166]
E            [201]
E            [205]
E            [ 81]
E            [ 60]
E            [ 40]
E            [ 40]]
E         
E           [[152]
E            [138]
E            [133]
E            [145]
E            [178]
E            [235]
E            [169]
E            [183]
E            [200]
E            [ 34]
E            [167]
E            [171]
E            [138]
E            [ 41]
E            [ 74]
E            [ 98]
E            [116]
E            [140]
E            [189]
E            [136]]
E         
E           [[144]
E            [111]
E            [143]
E            [219]
E            [ 78]
E            [106]
E            [137]
E            [ 44]
E            [ 31]
E            [144]
E            [109]
E            [ 60]
E            [ 84]
E            [137]
E            [ 28]
E            [229]
E            [ 35]
E            [182]
E            [209]
E            [ 92]]
E         
E           [[ 88]
E            [123]
E            [147]
E            [105]
E            [185]
E            [180]
E            [ 90]
E            [164]
E            [127]
E            [168]
E            [ 76]
E            [ 46]
E            [ 76]
E            [171]
E            [150]
E            [ 64]
E            [132]
E            [191]
E            [ 94]
E            [185]]
E         
E           [[219]
E            [150]
E            [115]
E            [ 77]
E            [172]
E            [ 63]
E            [ 42]
E            [ 99]
E            [ 93]
E            [ 55]
E            [138]
E            [152]
E            [137]
E            [181]
E            [ 71]
E            [126]
E            [ 83]
E            [ 88]
E            [135]
E            [210]]
E         
E           [[124]
E            [ 87]
E            [ 35]
E            [160]
E            [177]
E            [201]
E            [160]
E            [ 59]
E            [169]
E            [174]
E            [ 59]
E            [ 88]
E            [ 43]
E            [180]
E            [147]
E            [185]
E            [144]
E            [175]
E            [183]
E            [ 58]]
E         
E           [[170]
E            [143]
E            [ 87]
E            [ 94]
E            [148]
E            [ 27]
E            [201]
E            [111]
E            [209]
E            [180]
E            [183]
E            [141]
E            [ 80]
E            [ 76]
E            [ 60]
E            [199]
E            [142]
E            [149]
E            [196]
E            [175]]
E         
E           [[157]
E            [126]
E            [ 79]
E            [123]
E            [123]
E            [ 58]
E            [ 85]
E            [ 78]
E            [148]
E            [ 64]
E            [153]
E            [ 96]
E            [ 74]
E            [216]
E            [210]
E            [109]
E            [ 90]
E            [175]
E            [157]
E            [ 87]]
E         
E           [[216]
E            [ 58]
E            [190]
E            [ 53]
E            [154]
E            [ 46]
E            [116]
E            [ 92]
E            [145]
E            [ 95]
E            [ 88]
E            [150]
E            [113]
E            [139]
E            [117]
E            [235]
E            [154]
E            [187]
E            [ 81]
E            [162]]
E         
E           [[ 84]
E            [102]
E            [ 33]
E            [103]
E            [145]
E            [125]
E            [150]
E            [149]
E            [ 97]
E            [159]
E            [ 42]
E            [130]
E            [193]
E            [ 93]
E            [150]
E            [117]
E            [102]
E            [ 54]
E            [164]
E            [153]]
E         
E           [[150]
E            [ 92]
E            [191]
E            [186]
E            [ 69]
E            [ 67]
E            [153]
E            [135]
E            [193]
E            [162]
E            [160]
E            [ 96]
E            [170]
E            [134]
E            [176]
E            [222]
E            [182]
E            [ 58]
E            [ 95]
E            [104]]
E         
E           [[ 44]
E            [ 61]
E            [ 51]
E            [210]
E            [ 83]
E            [122]
E            [ 68]
E            [145]
E            [ 51]
E            [222]
E            [167]
E            [ 83]
E            [141]
E            [ 91]
E            [152]
E            [164]
E            [131]
E            [128]
E            [110]
E            [ 36]]
E         
E           [[ 87]
E            [ 84]
E            [ 73]
E            [241]
E            [ 69]
E            [120]
E            [ 59]
E            [180]
E            [203]
E            [146]
E            [139]
E            [ 77]
E            [132]
E            [189]
E            [219]
E            [186]
E            [161]
E            [ 56]
E            [100]
E            [ 79]]
E         
E           [[193]
E            [135]
E            [155]
E            [115]
E            [ 19]
E            [ 90]
E            [170]
E            [ 65]
E            [186]
E            [ 47]
E            [137]
E            [123]
E            [124]
E            [170]
E            [ 72]
E            [204]
E            [165]
E            [ 67]
E            [192]
E            [168]]]], but actual [[[[127]
E            [181]
E            [117]
E            [ 68]
E            [131]
E            [ 70]
E            [106]
E            [ 89]
E            [163]
E            [137]
E            [ 86]
E            [171]
E            [ 92]
E            [235]
E            [132]
E            [141]
E            [127]
E            [184]
E            [133]
E            [125]]
E         
E           [[121]
E            [123]
E            [161]
E            [238]
E            [103]
E            [131]
E            [204]
E            [ 56]
E            [195]
E            [ 77]
E            [120]
E            [ 62]
E            [122]
E            [210]
E            [142]
E            [ 92]
E            [ 74]
E            [ 20]
E            [ 61]
E            [ 72]]
E         
E           [[205]
E            [108]
E            [ 72]
E            [ 80]
E            [ 68]
E            [159]
E            [130]
E            [178]
E            [ 75]
E            [174]
E            [152]
E            [132]
E            [177]
E            [162]
E            [137]
E            [173]
E            [ 86]
E            [101]
E            [ 74]
E            [ 57]]
E         
E           [[127]
E            [115]
E            [131]
E            [184]
E            [112]
E            [143]
E            [164]
E            [187]
E            [163]
E            [116]
E            [113]
E            [164]
E            [216]
E            [194]
E            [224]
E            [125]
E            [171]
E            [ 77]
E            [165]
E            [121]]
E         
E           [[ 65]
E            [ 43]
E            [ 81]
E            [ 88]
E            [155]
E            [124]
E            [163]
E            [ 88]
E            [ 80]
E            [101]
E            [155]
E            [ 56]
E            [158]
E            [ 76]
E            [138]
E            [108]
E            [101]
E            [119]
E            [108]
E            [118]]
E         
E           [[124]
E            [ 83]
E            [ 55]
E            [112]
E            [203]
E            [112]
E            [103]
E            [ 50]
E            [136]
E            [174]
E            [238]
E            [100]
E            [108]
E            [ 34]
E            [152]
E            [127]
E            [102]
E            [ 93]
E            [ 39]
E            [189]]
E         
E           [[198]
E            [104]
E            [215]
E            [123]
E            [104]
E            [ 62]
E            [146]
E            [126]
E            [150]
E            [199]
E            [ 85]
E            [ 46]
E            [ 86]
E            [166]
E            [201]
E            [205]
E            [ 81]
E            [ 60]
E            [ 40]
E            [ 40]]
E         
E           [[152]
E            [138]
E            [133]
E            [145]
E            [178]
E            [235]
E            [169]
E            [183]
E            [200]
E            [ 34]
E            [167]
E            [171]
E            [138]
E            [ 41]
E            [ 74]
E            [ 98]
E            [116]
E            [140]
E            [189]
E            [136]]
E         
E           [[144]
E            [111]
E            [143]
E            [219]
E            [ 78]
E            [106]
E            [137]
E            [ 44]
E            [ 31]
E            [144]
E            [109]
E            [ 60]
E            [ 84]
E            [137]
E            [ 28]
E            [229]
E            [ 35]
E            [182]
E            [209]
E            [ 92]]
E         
E           [[ 88]
E            [123]
E            [147]
E            [105]
E            [185]
E            [180]
E            [ 90]
E            [164]
E            [127]
E            [168]
E            [ 76]
E            [ 46]
E            [ 76]
E            [171]
E            [150]
E            [ 64]
E            [132]
E            [191]
E            [ 94]
E            [185]]
E         
E           [[219]
E            [150]
E            [115]
E            [ 77]
E            [172]
E            [ 63]
E            [ 42]
E            [ 99]
E            [ 93]
E            [ 55]
E            [138]
E            [152]
E            [137]
E            [181]
E            [ 71]
E            [126]
E            [ 83]
E            [ 88]
E            [135]
E            [210]]
E         
E           [[124]
E            [ 87]
E            [ 35]
E            [160]
E            [177]
E            [201]
E            [160]
E            [ 59]
E            [169]
E            [174]
E            [ 59]
E            [ 88]
E            [ 43]
E            [180]
E            [147]
E            [185]
E            [144]
E            [175]
E            [183]
E            [ 58]]
E         
E           [[170]
E            [143]
E            [ 87]
E            [ 94]
E            [148]
E            [ 27]
E            [201]
E            [111]
E            [209]
E            [180]
E            [183]
E            [141]
E            [ 80]
E            [ 76]
E            [ 60]
E            [199]
E            [142]
E            [149]
E            [196]
E            [175]]
E         
E           [[157]
E            [126]
E            [ 79]
E            [123]
E            [123]
E            [ 58]
E            [ 85]
E            [ 78]
E            [148]
E            [ 64]
E            [153]
E            [ 96]
E            [ 74]
E            [216]
E            [210]
E            [109]
E            [ 90]
E            [175]
E            [157]
E            [ 87]]
E         
E           [[216]
E            [ 58]
E            [190]
E            [ 53]
E            [154]
E            [ 46]
E            [116]
E            [ 92]
E            [145]
E            [ 95]
E            [ 88]
E            [150]
E            [113]
E            [139]
E            [117]
E            [235]
E            [154]
E            [187]
E            [ 81]
E            [162]]
E         
E           [[ 84]
E            [102]
E            [ 33]
E            [103]
E            [145]
E            [125]
E            [150]
E            [149]
E            [ 97]
E            [159]
E            [ 42]
E            [130]
E            [193]
E            [ 93]
E            [150]
E            [117]
E            [102]
E            [ 54]
E            [164]
E            [153]]
E         
E           [[150]
E            [ 92]
E            [191]
E            [186]
E            [ 69]
E            [ 67]
E            [153]
E            [135]
E            [193]
E            [162]
E            [160]
E            [ 96]
E            [170]
E            [134]
E            [176]
E            [222]
E            [182]
E            [ 58]
E            [ 95]
E            [104]]
E         
E           [[ 44]
E            [ 61]
E            [ 51]
E            [210]
E            [ 83]
E            [122]
E            [ 68]
E            [145]
E            [ 51]
E            [222]
E            [167]
E            [ 83]
E            [141]
E            [ 91]
E            [152]
E            [164]
E            [131]
E            [128]
E            [110]
E            [ 36]]
E         
E           [[ 87]
E            [ 84]
E            [ 73]
E            [241]
E            [ 69]
E            [120]
E            [ 59]
E            [180]
E            [203]
E            [146]
E            [139]
E            [ 77]
E            [132]
E            [189]
E            [219]
E            [186]
E            [161]
E            [ 56]
E            [100]
E            [ 79]]
E         
E           [[193]
E            [135]
E            [155]
E            [115]
E            [ 19]
E            [ 90]
E            [170]
E            [ 65]
E            [186]
E            [ 47]
E            [137]
E            [123]
E            [124]
E            [170]
E            [ 72]
E            [204]
E            [165]
E            [ 67]
E            [192]
E            [168]]]]. conversion from
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'bgr', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'uint8', 'device': 'cpu'} to
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'gray', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'uint8', 'device': 'cpu'} failed
E          imports: import numpy as np
E         conversion function: 
E          def convert(var):
E             type_in = var.dtype
E             var = np.expand_dims(np.dot(var[..., :3], [0.114, 0.587, 0.299]), axis=-1)
E             return var.astype(type_in)
E         from channel_last_bgr_to_gray in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
E       assert False
E        +  where False = is_image_equal(array([[[[127],\n         [181],\n         [117],\n         [ 68],\n         [131],\n         [ 70],\n         [106],\n         [ 89],\n         [163],\n         [137],\n         [ 86],\n         [171],\n         [ 92],\n         [235],\n         [132],\n         [141],\n         [127],\n         [184],\n         [133],\n         [125]],\n\n        [[121],\n         [123],\n         [161],\n         [238],\n         [103],\n         [131],\n         [204],\n         [ 56],\n         [195],\n         [ 77],\n         [120],\n         [ 62],\n         [122],\n         [210],\n         [142],\n         [ 92],\n         [ 74],\n         [ 20],\n         [ 61],\n         [ 72]],\n\n        [[205],\n         [108],\n         [ 72],\n         [ 80],\n         [ 68],\n         [159],\n         [130],\n         [178],\n         [ 75],\n         [174],\n         [152],\n         [132],\n         [177],\n         [162],\n         [137],\n         [173],\n         [ 86],\n         [101],\n         [ 74],\n         [ 57]],\n\n        [[127],\n         [115],\n         [131],\n         [184],\n         [112],\n         [143],\n         [164],\n         [187],\n         [163],\n         [116],\n         [113],\n         [164],\n         [216],\n         [194],\n        ...   [153],\n         [135],\n         [193],\n         [162],\n         [160],\n         [ 96],\n         [170],\n         [134],\n         [176],\n         [222],\n         [182],\n         [ 58],\n         [ 95],\n         [104]],\n\n        [[ 44],\n         [ 61],\n         [ 51],\n         [210],\n         [ 83],\n         [122],\n         [ 68],\n         [145],\n         [ 51],\n         [222],\n         [167],\n         [ 83],\n         [141],\n         [ 91],\n         [152],\n         [164],\n         [131],\n         [128],\n         [110],\n         [ 36]],\n\n        [[ 87],\n         [ 84],\n         [ 73],\n         [241],\n         [ 69],\n         [120],\n         [ 59],\n         [180],\n         [203],\n         [146],\n         [139],\n         [ 77],\n         [132],\n         [189],\n         [219],\n         [186],\n         [161],\n         [ 56],\n         [100],\n         [ 79]],\n\n        [[193],\n         [135],\n         [155],\n         [115],\n         [ 19],\n         [ 90],\n         [170],\n         [ 65],\n         [186],\n         [ 47],\n         [137],\n         [123],\n         [124],\n         [170],\n         [ 72],\n         [204],\n         [165],\n         [ 67],\n         [192],\n         [168]]]], dtype=uint8), array([[[[127],\n         [181],\n         [117],\n         [ 68],\n         [131],\n         [ 70],\n         [106],\n         [ 89],\n         [163],\n         [137],\n         [ 86],\n         [171],\n         [ 92],\n         [235],\n         [132],\n         [141],\n         [127],\n         [184],\n         [133],\n         [125]],\n\n        [[121],\n         [123],\n         [161],\n         [238],\n         [103],\n         [131],\n         [204],\n         [ 56],\n         [195],\n         [ 77],\n         [120],\n         [ 62],\n         [122],\n         [210],\n         [142],\n         [ 92],\n         [ 74],\n         [ 20],\n         [ 61],\n         [ 72]],\n\n        [[205],\n         [108],\n         [ 72],\n         [ 80],\n         [ 68],\n         [159],\n         [130],\n         [178],\n         [ 75],\n         [174],\n         [152],\n         [132],\n         [177],\n         [162],\n         [137],\n         [173],\n         [ 86],\n         [101],\n         [ 74],\n         [ 57]],\n\n        [[127],\n         [115],\n         [131],\n         [184],\n         [112],\n         [143],\n         [164],\n         [187],\n         [163],\n         [116],\n         [113],\n         [164],\n         [216],\n         [194],\n        ...   [153],\n         [135],\n         [193],\n         [162],\n         [160],\n         [ 96],\n         [170],\n         [134],\n         [176],\n         [222],\n         [182],\n         [ 58],\n         [ 95],\n         [104]],\n\n        [[ 44],\n         [ 61],\n         [ 51],\n         [210],\n         [ 83],\n         [122],\n         [ 68],\n         [145],\n         [ 51],\n         [222],\n         [167],\n         [ 83],\n         [141],\n         [ 91],\n         [152],\n         [164],\n         [131],\n         [128],\n         [110],\n         [ 36]],\n\n        [[ 87],\n         [ 84],\n         [ 73],\n         [241],\n         [ 69],\n         [120],\n         [ 59],\n         [180],\n         [203],\n         [146],\n         [139],\n         [ 77],\n         [132],\n         [189],\n         [219],\n         [186],\n         [161],\n         [ 56],\n         [100],\n         [ 79]],\n\n        [[193],\n         [135],\n         [155],\n         [115],\n         [ 19],\n         [ 90],\n         [170],\n         [ 65],\n         [186],\n         [ 47],\n         [137],\n         [123],\n         [124],\n         [170],\n         [ 72],\n         [204],\n         [165],\n         [ 67],\n         [192],\n         [168]]]], dtype=uint8))

tests/test_conversion_code_in_kg.py:46: AssertionError</failure></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_pytorch_gpu" time="0.001"><skipped type="pytest.skip" message="Test skipped because PyTorch is not installed with CUDA support or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:79: Test skipped because PyTorch is not installed with CUDA support or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_tensorflow_gpu" time="0.000"><skipped type="pytest.skip" message="Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:89: Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_tensorflow_gpu_torch_gpu" time="0.000"><skipped type="pytest.skip" message="Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:99: Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_io" name="test_load_graph_from_file" time="0.001" /><testcase classname="tests.test_io" name="test_load_graph_with_invalid_path" time="0.001" /><testcase classname="tests.test_io" name="test_save_graph_to_file" time="0.006" /><testcase classname="tests.test_io" name="test_save_graph_with_invalid_path" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_knowledge_graph_init" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_add_new_node" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_add_edge" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_edge" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_edge_failure" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_save_to_file" time="0.002" /><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path_no_path" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path_same_node" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_knowledge_graph_str" time="0.001" /><testcase classname="tests.test_metadata" name="test_encode_to_string" time="0.001" /><testcase classname="tests.test_metadata" name="test_decode_to_dict" time="0.001" /><testcase classname="tests.test_metadata" name="test_exact_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_representation_match_no_channel_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_no_representation_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_rgb_bgr_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_empty_candidate_list" time="0.001" /><testcase classname="tests.test_metadata" name="test_one_candidata" time="0.001" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_match_data_repr" time="0.001" /><testcase classname="tests.test_metadata_differ" name="test_one_metadata_missing_data_repr" time="0.001" /><testcase classname="tests.test_metadata_differ" name="test_one_metadata_different_data_repr" time="0.001" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_missing_data_repr" time="0.001" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_different_data_repr" time="0.001" /><testcase classname="tests.test_metadata_differ" name="test_is_differ_value_for_key_true" time="0.001" /><testcase classname="tests.test_metadata_differ" name="test_is_differ_value_for_key_false" time="0.001" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_single_value" time="0.004" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_list_values" time="0.001" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_empty" time="0.001" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_none" time="0.001" /><testcase classname="tests.test_py_interface" name="test_get_convert_path" time="0.001" /><testcase classname="tests.test_py_interface" name="test_get_conversion_code" time="0.001" /><testcase classname="tests.test_util" name="test_remove_intermediate_functon_call" time="0.001" /><testcase classname="tests.test_util" name="test_extract_func_body_fail" time="0.001" /><testcase classname="tests.test_util" name="test_func_obj_to_str_function" time="0.001" /><testcase classname="tests.test_util" name="test_exclude_key_from_list" time="0.001" /></testsuite></testsuites>