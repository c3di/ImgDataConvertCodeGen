<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="3" tests="52" time="30.112" timestamp="2024-04-02T16:08:38.553068" hostname="fv-az926-665"><testcase classname="tests.test_code_generation" name="test_convert_code_generator_init" time="0.002" /><testcase classname="tests.test_code_generation" name="test_knowledge_graph_property" time="0.001" /><testcase classname="tests.test_code_generation" name="test_conversion_path" time="0.002" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_no_path" time="0.001" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_same_type" time="0.001" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_multiple_steps" time="0.002" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_using_cache" time="0.001" /><testcase classname="tests.test_conversion_code_execution" name="test_code_generation_using_metadata" time="0.001" /><testcase classname="tests.test_conversion_code_in_kg" name="test_all_conversion_code_exec_on_cpu" time="10.368"><failure message="AssertionError: expected [[[[ 0.54330707 -2.574803   -0.16535431]&#10;     [ 0.3070866  -2.2913384  -0.7637795 ]&#10;     [-0.07086617 -2.0866141  -0.8267716 ]&#10;     ...&#10;     [ 0.88976383 -0.5905512   0.511811  ]&#10;     [-1.0629921  -2.3543305  -2.1023622 ]&#10;     [-0.14960629 -2.4173229  -0.63779527]]&#10;  &#10;    [[-0.62204725  0.511811    0.96850395]&#10;     [-1.6299212  -2.7322836  -2.055118  ]&#10;     [-2.023622   -1.4094489  -2.3228345 ]&#10;     ...&#10;     [-0.71653545 -0.03937006 -0.511811  ]&#10;     [-1.015748    0.22834647  0.24409449]&#10;     [ 0.52755904 -2.6850395  -2.3228345 ]]&#10;  &#10;    [[-0.8110236  -0.21259844 -0.32283467]&#10;     [ 0.90551186 -0.79527557 -0.00787401]&#10;     [ 0.24409449 -1.         -1.2677165 ]&#10;     ...&#10;     [ 0.88976383  0.6850394  -0.32283467]&#10;     [-1.5984251  -2.3385825  -1.7716535 ]&#10;     [ 0.38582683 -2.6535435   0.6692914 ]]&#10;  &#10;    ...&#10;  &#10;    [[ 0.84251964  0.77952754  0.40157485]&#10;     [-1.472441    0.08661413 -0.08661419]&#10;     [-1.5984251  -1.2992126  -2.6535435 ]&#10;     ...&#10;     [ 0.9370079  -2.3070865  -2.7165356 ]&#10;     [-0.63779527 -2.070866   -0.48031497]&#10;     [-0.7322835  -1.8346457   0.02362204]]&#10;  &#10;    [[-2.968504    0.9370079  -0.9370079 ]&#10;     [-2.6535435  -0.16535431  0.11811018]&#10;     [-1.3779528   0.71653545 -1.7401575 ]&#10;     ...&#10;     [-0.21259844 -2.6535435   1.        ]&#10;     [-1.6929134   0.7322835  -1.519685  ]&#10;     [-1.5511811  -1.4566929  -0.9212598 ]]&#10;  &#10;    [[-0.511811    0.7480315  -1.9133859 ]&#10;     [-2.7165356   0.8740157  -2.7480316 ]&#10;     [-2.2125983  -2.543307    0.77952754]&#10;     ...&#10;     [ 0.65354335 -2.6377952  -1.3779528 ]&#10;     [-1.1732284   0.27559054 -1.535433  ]&#10;     [ 0.40157485 -0.3070866  -1.9291339 ]]]], but actual [[[[ 0.77165353 -0.78740156  0.41732284]&#10;     [ 0.6535433  -0.6456693   0.11811024]&#10;     [ 0.46456692 -0.54330707  0.08661418]&#10;     ...&#10;     [ 0.9448819   0.2047244   0.7559055 ]&#10;     [-0.03149606 -0.6771653  -0.5511811 ]&#10;     [ 0.42519686 -0.70866144  0.18110237]]&#10;  &#10;    [[ 0.18897638  0.7559055   0.984252  ]&#10;     [-0.31496063 -0.86614174 -0.52755904]&#10;     [-0.511811   -0.2047244  -0.6614173 ]&#10;     ...&#10;     [ 0.14173228  0.48031497  0.24409449]&#10;     [-0.00787402  0.61417323  0.62204725]&#10;     [ 0.7637795  -0.8425197  -0.6614173 ]]&#10;  &#10;    [[ 0.09448819  0.39370078  0.33858266]&#10;     [ 0.9527559   0.1023622   0.496063  ]&#10;     [ 0.62204725  0.         -0.13385826]&#10;     ...&#10;     [ 0.9448819   0.8425197   0.33858266]&#10;     [-0.2992126  -0.6692913  -0.38582677]&#10;     [ 0.6929134  -0.8267717   0.8346457 ]]&#10;  &#10;    ...&#10;  &#10;    [[ 0.9212598   0.8897638   0.7007874 ]&#10;     [-0.23622048  0.54330707  0.4566929 ]&#10;     [-0.2992126  -0.1496063  -0.8267717 ]&#10;     ...&#10;     [ 0.96850395 -0.6535433  -0.8582677 ]&#10;     [ 0.18110237 -0.53543305  0.25984251]&#10;     [ 0.13385826 -0.41732284  0.511811  ]]&#10;  &#10;    [[-0.984252    0.96850395  0.03149606]&#10;     [-0.8267717   0.41732284  0.5590551 ]&#10;     [-0.18897638  0.8582677  -0.37007874]&#10;     ...&#10;     [ 0.39370078 -0.8267717   1.        ]&#10;     [-0.3464567   0.86614174 -0.25984251]&#10;     [-0.27559054 -0.22834645  0.03937008]]&#10;  &#10;    [[ 0.24409449  0.87401575 -0.4566929 ]&#10;     [-0.8582677   0.93700784 -0.87401575]&#10;     [-0.6062992  -0.77165353  0.8897638 ]&#10;     ...&#10;     [ 0.8267717  -0.8188976  -0.18897638]&#10;     [-0.08661418  0.63779527 -0.26771653]&#10;     [ 0.7007874   0.3464567  -0.46456692]]]]. conversion from&#10;   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to&#10;   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed&#10;   imports: import skimage as ski&#10;  conversion function: &#10;   def convert(var):&#10;   return ski.util.img_as_float32(var)&#10;  from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py&#10;assert False&#10; +  where False = is_image_equal(array([[[[ 0.54330707, -2.574803  , -0.16535431],\n         [ 0.3070866 , -2.2913384 , -0.7637795 ],\n         [-0.07086...,\n         [-1.1732284 ,  0.27559054, -1.535433  ],\n         [ 0.40157485, -0.3070866 , -1.9291339 ]]]], dtype=float32), array([[[[ 0.77165353, -0.78740156,  0.41732284],\n         [ 0.6535433 , -0.6456693 ,  0.11811024],\n         [ 0.46456...,\n         [-0.08661418,  0.63779527, -0.26771653],\n         [ 0.7007874 ,  0.3464567 , -0.46456692]]]], dtype=float32))">code_generator = &lt;imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f0bd71a4880&gt;

    def test_all_conversion_code_exec_on_cpu(code_generator):
        kg = code_generator.knowledge_graph
        for edge in kg.edges:
            if is_code_exec_on_cpu(edge):
&gt;               assert_exec_of_conversion_code_in_edge(*edge, kg)

tests/test_conversion_code_in_kg.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
target_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
kg = &lt;imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0c5d4570d0&gt;

    def assert_exec_of_conversion_code_in_edge(source_metadata, target_metadata, kg):
        edge_data = kg.get_edge_data(source_metadata, target_metadata)
        conversion = edge_data.get('conversion')
        assert conversion is not None, f"No conversion from {source_metadata} to {target_metadata}"
        assert len(conversion) == 2, (f"Expected two elements in the conversions, but got: {conversion} from"
                                      f" {source_metadata} to {target_metadata}")
        assert isinstance(conversion[0], str), (f"Expected the first element of the conversion to be a string, but got:"
                                                f" {conversion[0]} from {source_metadata} to {target_metadata}")
        assert isinstance(conversion[1], str), (f"Expected the second element of the conversion to be a string, but got:"
                                                f" {conversion[1]} from {source_metadata} to {target_metadata}")
        error_message = (f"conversion from\n {source_metadata} to\n {target_metadata} failed\n "
                         f"imports: {conversion[0]}\nconversion function: \n {conversion[1]}\nfrom {edge_data.get('factory')}")
    
        try:
            source_image, target_image = get_input_image_and_expected_output(source_metadata, target_metadata)
            func_name = re.search(r'(?&lt;=def )\w+', conversion[1]).group(0)
    
            scope = {}
            scope.update({'source_image': source_image})
            exec(f"""{conversion[0]}
    {conversion[1]}
    actual_image = {func_name}(source_image)""", scope)
            actual_image = scope.get('actual_image')
        except Exception as e:
            raise AssertionError(f"Failed to execute conversion code from {error_message}") from e
    
&gt;       assert is_image_equal(target_image,
                              actual_image), f'expected {target_image}, but actual {actual_image}. {error_message}'
E       AssertionError: expected [[[[ 0.54330707 -2.574803   -0.16535431]
E            [ 0.3070866  -2.2913384  -0.7637795 ]
E            [-0.07086617 -2.0866141  -0.8267716 ]
E            ...
E            [ 0.88976383 -0.5905512   0.511811  ]
E            [-1.0629921  -2.3543305  -2.1023622 ]
E            [-0.14960629 -2.4173229  -0.63779527]]
E         
E           [[-0.62204725  0.511811    0.96850395]
E            [-1.6299212  -2.7322836  -2.055118  ]
E            [-2.023622   -1.4094489  -2.3228345 ]
E            ...
E            [-0.71653545 -0.03937006 -0.511811  ]
E            [-1.015748    0.22834647  0.24409449]
E            [ 0.52755904 -2.6850395  -2.3228345 ]]
E         
E           [[-0.8110236  -0.21259844 -0.32283467]
E            [ 0.90551186 -0.79527557 -0.00787401]
E            [ 0.24409449 -1.         -1.2677165 ]
E            ...
E            [ 0.88976383  0.6850394  -0.32283467]
E            [-1.5984251  -2.3385825  -1.7716535 ]
E            [ 0.38582683 -2.6535435   0.6692914 ]]
E         
E           ...
E         
E           [[ 0.84251964  0.77952754  0.40157485]
E            [-1.472441    0.08661413 -0.08661419]
E            [-1.5984251  -1.2992126  -2.6535435 ]
E            ...
E            [ 0.9370079  -2.3070865  -2.7165356 ]
E            [-0.63779527 -2.070866   -0.48031497]
E            [-0.7322835  -1.8346457   0.02362204]]
E         
E           [[-2.968504    0.9370079  -0.9370079 ]
E            [-2.6535435  -0.16535431  0.11811018]
E            [-1.3779528   0.71653545 -1.7401575 ]
E            ...
E            [-0.21259844 -2.6535435   1.        ]
E            [-1.6929134   0.7322835  -1.519685  ]
E            [-1.5511811  -1.4566929  -0.9212598 ]]
E         
E           [[-0.511811    0.7480315  -1.9133859 ]
E            [-2.7165356   0.8740157  -2.7480316 ]
E            [-2.2125983  -2.543307    0.77952754]
E            ...
E            [ 0.65354335 -2.6377952  -1.3779528 ]
E            [-1.1732284   0.27559054 -1.535433  ]
E            [ 0.40157485 -0.3070866  -1.9291339 ]]]], but actual [[[[ 0.77165353 -0.78740156  0.41732284]
E            [ 0.6535433  -0.6456693   0.11811024]
E            [ 0.46456692 -0.54330707  0.08661418]
E            ...
E            [ 0.9448819   0.2047244   0.7559055 ]
E            [-0.03149606 -0.6771653  -0.5511811 ]
E            [ 0.42519686 -0.70866144  0.18110237]]
E         
E           [[ 0.18897638  0.7559055   0.984252  ]
E            [-0.31496063 -0.86614174 -0.52755904]
E            [-0.511811   -0.2047244  -0.6614173 ]
E            ...
E            [ 0.14173228  0.48031497  0.24409449]
E            [-0.00787402  0.61417323  0.62204725]
E            [ 0.7637795  -0.8425197  -0.6614173 ]]
E         
E           [[ 0.09448819  0.39370078  0.33858266]
E            [ 0.9527559   0.1023622   0.496063  ]
E            [ 0.62204725  0.         -0.13385826]
E            ...
E            [ 0.9448819   0.8425197   0.33858266]
E            [-0.2992126  -0.6692913  -0.38582677]
E            [ 0.6929134  -0.8267717   0.8346457 ]]
E         
E           ...
E         
E           [[ 0.9212598   0.8897638   0.7007874 ]
E            [-0.23622048  0.54330707  0.4566929 ]
E            [-0.2992126  -0.1496063  -0.8267717 ]
E            ...
E            [ 0.96850395 -0.6535433  -0.8582677 ]
E            [ 0.18110237 -0.53543305  0.25984251]
E            [ 0.13385826 -0.41732284  0.511811  ]]
E         
E           [[-0.984252    0.96850395  0.03149606]
E            [-0.8267717   0.41732284  0.5590551 ]
E            [-0.18897638  0.8582677  -0.37007874]
E            ...
E            [ 0.39370078 -0.8267717   1.        ]
E            [-0.3464567   0.86614174 -0.25984251]
E            [-0.27559054 -0.22834645  0.03937008]]
E         
E           [[ 0.24409449  0.87401575 -0.4566929 ]
E            [-0.8582677   0.93700784 -0.87401575]
E            [-0.6062992  -0.77165353  0.8897638 ]
E            ...
E            [ 0.8267717  -0.8188976  -0.18897638]
E            [-0.08661418  0.63779527 -0.26771653]
E            [ 0.7007874   0.3464567  -0.46456692]]]]. conversion from
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
E          imports: import skimage as ski
E         conversion function: 
E          def convert(var):
E          return ski.util.img_as_float32(var)
E         from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
E       assert False
E        +  where False = is_image_equal(array([[[[ 0.54330707, -2.574803  , -0.16535431],\n         [ 0.3070866 , -2.2913384 , -0.7637795 ],\n         [-0.07086...,\n         [-1.1732284 ,  0.27559054, -1.535433  ],\n         [ 0.40157485, -0.3070866 , -1.9291339 ]]]], dtype=float32), array([[[[ 0.77165353, -0.78740156,  0.41732284],\n         [ 0.6535433 , -0.6456693 ,  0.11811024],\n         [ 0.46456...,\n         [-0.08661418,  0.63779527, -0.26771653],\n         [ 0.7007874 ,  0.3464567 , -0.46456692]]]], dtype=float32))

tests/test_conversion_code_in_kg.py:46: AssertionError</failure></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_pytorch_gpu" time="0.001"><skipped type="pytest.skip" message="Test skipped because PyTorch is not installed with CUDA support or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:79: Test skipped because PyTorch is not installed with CUDA support or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_tensorflow_gpu" time="0.000"><skipped type="pytest.skip" message="Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:89: Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_tensorflow_gpu_torch_gpu" time="0.000"><skipped type="pytest.skip" message="Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:99: Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_io" name="test_load_graph_from_file" time="0.001" /><testcase classname="tests.test_io" name="test_load_graph_with_invalid_path" time="0.001" /><testcase classname="tests.test_io" name="test_save_graph_to_file" time="0.006" /><testcase classname="tests.test_io" name="test_save_graph_with_invalid_path" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_knowledge_graph_init" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_add_new_node" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_add_edge" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_edge" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_edge_failure" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_save_to_file" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path_no_path" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path_same_node" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_knowledge_graph_str" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_heuristic_function" time="0.001" /><testcase classname="tests.test_metadata" name="test_encode_to_string" time="0.001" /><testcase classname="tests.test_metadata" name="test_decode_to_dict" time="0.001" /><testcase classname="tests.test_metadata" name="test_exact_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_representation_match_no_channel_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_no_representation_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_rgb_bgr_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_empty_candidate_list" time="0.000" /><testcase classname="tests.test_metadata" name="test_one_candidata" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_match_data_repr" time="0.001" /><testcase classname="tests.test_metadata_differ" name="test_one_metadata_missing_data_repr" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_one_metadata_different_data_repr" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_missing_data_repr" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_different_data_repr" time="0.001" /><testcase classname="tests.test_metadata_differ" name="test_is_differ_value_for_key_true" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_is_differ_value_for_key_false" time="0.000" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_single_value" time="0.008" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_list_values" time="0.001" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_empty" time="0.001" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_none" time="0.001" /><testcase classname="tests.test_py_interface" name="test_get_convert_path" time="0.001" /><testcase classname="tests.test_py_interface" name="test_get_conversion_code" time="0.001" /><testcase classname="tests.test_util" name="test_remove_intermediate_functon_call" time="0.001" /><testcase classname="tests.test_util" name="test_extract_func_body_fail" time="0.001" /><testcase classname="tests.test_util" name="test_func_obj_to_str_function" time="0.001" /><testcase classname="tests.test_util" name="test_exclude_key_from_list" time="0.001" /></testsuite></testsuites>