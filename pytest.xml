<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="3" tests="52" time="28.359" timestamp="2024-04-03T06:45:25.452309" hostname="fv-az1379-53"><testcase classname="tests.test_code_generation" name="test_convert_code_generator_init" time="0.002" /><testcase classname="tests.test_code_generation" name="test_knowledge_graph_property" time="0.001" /><testcase classname="tests.test_code_generation" name="test_conversion_path" time="0.001" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_no_path" time="0.001" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_same_type" time="0.001" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_multiple_steps" time="0.002" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_using_cache" time="0.001" /><testcase classname="tests.test_conversion_code_execution" name="test_code_generation_using_metadata" time="0.001" /><testcase classname="tests.test_conversion_code_in_kg" name="test_all_conversion_code_exec_on_cpu" time="10.239"><failure message="AssertionError: expected [[[[-0.8110236   0.5590551   0.44881892]&#10;     [-1.9448819  -1.3464568  -1.9133859 ]&#10;     [-0.05511808  0.88976383 -2.464567  ]&#10;     ...&#10;     [-1.5511811  -2.937008   -0.5905512 ]&#10;     [-0.496063    0.11811018 -0.87401575]&#10;     [-0.5905512  -2.023622   -1.3779528 ]]&#10;  &#10;    [[-1.6141732  -1.8188976  -1.7086614 ]&#10;     [-1.8503938   0.40157485 -0.29133856]&#10;     [-0.5748031  -2.937008   -0.24409449]&#10;     ...&#10;     [-2.8897638   0.8110236  -1.9606299 ]&#10;     [-1.503937   -1.8976378   0.9212599 ]&#10;     [-1.7559055  -1.535433   -0.14960629]]&#10;  &#10;    [[-0.496063   -2.3070865  -0.6535433 ]&#10;     [-1.8503938   0.1338582  -0.52755904]&#10;     [-1.6771653  -0.63779527 -1.3622048 ]&#10;     ...&#10;     [-1.8188976   0.9212599  -0.14960629]&#10;     [-0.10236222 -0.03937006 -2.6692915 ]&#10;     [-0.25984251 -2.2440944   0.496063  ]]&#10;  &#10;    ...&#10;  &#10;    [[-2.6850395   0.77952754  0.9527559 ]&#10;     [-0.8425197   0.03937006 -0.44881892]&#10;     [ 0.77952754 -2.7795277  -0.3070866 ]&#10;     ...&#10;     [-0.3070866  -2.480315   -2.2283463 ]&#10;     [ 0.08661413 -2.433071   -1.976378  ]&#10;     [-0.79527557 -2.8740158  -2.2440944 ]]&#10;  &#10;    [[-2.480315   -1.6456692  -0.6535433 ]&#10;     [-0.46456695 -0.63779527  0.88976383]&#10;     [-1.8188976   0.1811024  -2.937008  ]&#10;     ...&#10;     [-0.7480315  -1.9448819  -2.2755904 ]&#10;     [-2.8110237   0.71653545 -1.8031496 ]&#10;     [-2.8425198  -1.031496   -2.1338582 ]]&#10;  &#10;    [[ 0.16535437  0.27559054  0.60629916]&#10;     [-0.29133856 -0.79527557 -1.0787401 ]&#10;     [-2.9055119  -2.055118   -1.6771653 ]&#10;     ...&#10;     [ 0.85826766  0.5748031  -0.11811024]&#10;     [-1.7716535  -1.8976378  -2.6062992 ]&#10;     [-0.984252   -0.7007874  -1.9606299 ]]]], but actual [[[[ 0.09448819  0.77952754  0.72440946]&#10;     [-0.47244096 -0.17322835 -0.4566929 ]&#10;     [ 0.47244096  0.9448819  -0.7322835 ]&#10;     ...&#10;     [-0.27559054 -0.96850395  0.2047244 ]&#10;     [ 0.2519685   0.5590551   0.06299213]&#10;     [ 0.2047244  -0.511811   -0.18897638]]&#10;  &#10;    [[-0.30708662 -0.4094488  -0.35433072]&#10;     [-0.42519686  0.7007874   0.35433072]&#10;     [ 0.21259843 -0.96850395  0.37795275]&#10;     ...&#10;     [-0.9448819   0.9055118  -0.48031497]&#10;     [-0.2519685  -0.4488189   0.96062994]&#10;     [-0.37795275 -0.26771653  0.42519686]]&#10;  &#10;    [[ 0.2519685  -0.6535433   0.17322835]&#10;     [-0.42519686  0.5669291   0.23622048]&#10;     [-0.33858266  0.18110237 -0.18110237]&#10;     ...&#10;     [-0.4094488   0.96062994  0.42519686]&#10;     [ 0.4488189   0.48031497 -0.8346457 ]&#10;     [ 0.37007874 -0.62204725  0.7480315 ]]&#10;  &#10;    ...&#10;  &#10;    [[-0.8425197   0.8897638   0.97637796]&#10;     [ 0.07874016  0.51968503  0.27559054]&#10;     [ 0.8897638  -0.8897638   0.3464567 ]&#10;     ...&#10;     [ 0.3464567  -0.7401575  -0.61417323]&#10;     [ 0.54330707 -0.71653545 -0.48818898]&#10;     [ 0.1023622  -0.93700784 -0.62204725]]&#10;  &#10;    [[-0.7401575  -0.32283464  0.17322835]&#10;     [ 0.26771653  0.18110237  0.9448819 ]&#10;     [-0.4094488   0.5905512  -0.96850395]&#10;     ...&#10;     [ 0.12598425 -0.47244096 -0.63779527]&#10;     [-0.9055118   0.8582677  -0.4015748 ]&#10;     [-0.9212598  -0.01574803 -0.5669291 ]]&#10;  &#10;    [[ 0.5826772   0.63779527  0.8031496 ]&#10;     [ 0.35433072  0.1023622  -0.03937008]&#10;     [-0.9527559  -0.52755904 -0.33858266]&#10;     ...&#10;     [ 0.92913383  0.78740156  0.44094488]&#10;     [-0.38582677 -0.4488189  -0.8031496 ]&#10;     [ 0.00787402  0.1496063  -0.48031497]]]]. conversion from&#10;   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to&#10;   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed&#10;   imports: import skimage as ski&#10;  conversion function: &#10;   def convert(var):&#10;   return ski.util.img_as_float32(var)&#10;  from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py&#10;assert False&#10; +  where False = is_image_equal(array([[[[-0.8110236 ,  0.5590551 ,  0.44881892],\n         [-1.9448819 , -1.3464568 , -1.9133859 ],\n         [-0.05511...,\n         [-1.7716535 , -1.8976378 , -2.6062992 ],\n         [-0.984252  , -0.7007874 , -1.9606299 ]]]], dtype=float32), array([[[[ 0.09448819,  0.77952754,  0.72440946],\n         [-0.47244096, -0.17322835, -0.4566929 ],\n         [ 0.47244...,\n         [-0.38582677, -0.4488189 , -0.8031496 ],\n         [ 0.00787402,  0.1496063 , -0.48031497]]]], dtype=float32))">code_generator = &lt;imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f11656e2b90&gt;

    def test_all_conversion_code_exec_on_cpu(code_generator):
        kg = code_generator.knowledge_graph
        for edge in kg.edges:
            if is_code_exec_on_cpu(edge):
&gt;               assert_exec_of_conversion_code_in_edge(*edge, kg)

tests/test_conversion_code_in_kg.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
target_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
kg = &lt;imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f11db94f0a0&gt;

    def assert_exec_of_conversion_code_in_edge(source_metadata, target_metadata, kg):
        edge_data = kg.get_edge_data(source_metadata, target_metadata)
        conversion = edge_data.get('conversion')
        assert conversion is not None, f"No conversion from {source_metadata} to {target_metadata}"
        assert len(conversion) == 2, (f"Expected two elements in the conversions, but got: {conversion} from"
                                      f" {source_metadata} to {target_metadata}")
        assert isinstance(conversion[0], str), (f"Expected the first element of the conversion to be a string, but got:"
                                                f" {conversion[0]} from {source_metadata} to {target_metadata}")
        assert isinstance(conversion[1], str), (f"Expected the second element of the conversion to be a string, but got:"
                                                f" {conversion[1]} from {source_metadata} to {target_metadata}")
        error_message = (f"conversion from\n {source_metadata} to\n {target_metadata} failed\n "
                         f"imports: {conversion[0]}\nconversion function: \n {conversion[1]}\nfrom {edge_data.get('factory')}")
    
        try:
            source_image, target_image = get_input_image_and_expected_output(source_metadata, target_metadata)
            func_name = re.search(r'(?&lt;=def )\w+', conversion[1]).group(0)
    
            scope = {}
            scope.update({'source_image': source_image})
            exec(f"""{conversion[0]}
    {conversion[1]}
    actual_image = {func_name}(source_image)""", scope)
            actual_image = scope.get('actual_image')
        except Exception as e:
            raise AssertionError(f"Failed to execute conversion code from {error_message}") from e
    
&gt;       assert is_image_equal(target_image,
                              actual_image), f'expected {target_image}, but actual {actual_image}. {error_message}'
E       AssertionError: expected [[[[-0.8110236   0.5590551   0.44881892]
E            [-1.9448819  -1.3464568  -1.9133859 ]
E            [-0.05511808  0.88976383 -2.464567  ]
E            ...
E            [-1.5511811  -2.937008   -0.5905512 ]
E            [-0.496063    0.11811018 -0.87401575]
E            [-0.5905512  -2.023622   -1.3779528 ]]
E         
E           [[-1.6141732  -1.8188976  -1.7086614 ]
E            [-1.8503938   0.40157485 -0.29133856]
E            [-0.5748031  -2.937008   -0.24409449]
E            ...
E            [-2.8897638   0.8110236  -1.9606299 ]
E            [-1.503937   -1.8976378   0.9212599 ]
E            [-1.7559055  -1.535433   -0.14960629]]
E         
E           [[-0.496063   -2.3070865  -0.6535433 ]
E            [-1.8503938   0.1338582  -0.52755904]
E            [-1.6771653  -0.63779527 -1.3622048 ]
E            ...
E            [-1.8188976   0.9212599  -0.14960629]
E            [-0.10236222 -0.03937006 -2.6692915 ]
E            [-0.25984251 -2.2440944   0.496063  ]]
E         
E           ...
E         
E           [[-2.6850395   0.77952754  0.9527559 ]
E            [-0.8425197   0.03937006 -0.44881892]
E            [ 0.77952754 -2.7795277  -0.3070866 ]
E            ...
E            [-0.3070866  -2.480315   -2.2283463 ]
E            [ 0.08661413 -2.433071   -1.976378  ]
E            [-0.79527557 -2.8740158  -2.2440944 ]]
E         
E           [[-2.480315   -1.6456692  -0.6535433 ]
E            [-0.46456695 -0.63779527  0.88976383]
E            [-1.8188976   0.1811024  -2.937008  ]
E            ...
E            [-0.7480315  -1.9448819  -2.2755904 ]
E            [-2.8110237   0.71653545 -1.8031496 ]
E            [-2.8425198  -1.031496   -2.1338582 ]]
E         
E           [[ 0.16535437  0.27559054  0.60629916]
E            [-0.29133856 -0.79527557 -1.0787401 ]
E            [-2.9055119  -2.055118   -1.6771653 ]
E            ...
E            [ 0.85826766  0.5748031  -0.11811024]
E            [-1.7716535  -1.8976378  -2.6062992 ]
E            [-0.984252   -0.7007874  -1.9606299 ]]]], but actual [[[[ 0.09448819  0.77952754  0.72440946]
E            [-0.47244096 -0.17322835 -0.4566929 ]
E            [ 0.47244096  0.9448819  -0.7322835 ]
E            ...
E            [-0.27559054 -0.96850395  0.2047244 ]
E            [ 0.2519685   0.5590551   0.06299213]
E            [ 0.2047244  -0.511811   -0.18897638]]
E         
E           [[-0.30708662 -0.4094488  -0.35433072]
E            [-0.42519686  0.7007874   0.35433072]
E            [ 0.21259843 -0.96850395  0.37795275]
E            ...
E            [-0.9448819   0.9055118  -0.48031497]
E            [-0.2519685  -0.4488189   0.96062994]
E            [-0.37795275 -0.26771653  0.42519686]]
E         
E           [[ 0.2519685  -0.6535433   0.17322835]
E            [-0.42519686  0.5669291   0.23622048]
E            [-0.33858266  0.18110237 -0.18110237]
E            ...
E            [-0.4094488   0.96062994  0.42519686]
E            [ 0.4488189   0.48031497 -0.8346457 ]
E            [ 0.37007874 -0.62204725  0.7480315 ]]
E         
E           ...
E         
E           [[-0.8425197   0.8897638   0.97637796]
E            [ 0.07874016  0.51968503  0.27559054]
E            [ 0.8897638  -0.8897638   0.3464567 ]
E            ...
E            [ 0.3464567  -0.7401575  -0.61417323]
E            [ 0.54330707 -0.71653545 -0.48818898]
E            [ 0.1023622  -0.93700784 -0.62204725]]
E         
E           [[-0.7401575  -0.32283464  0.17322835]
E            [ 0.26771653  0.18110237  0.9448819 ]
E            [-0.4094488   0.5905512  -0.96850395]
E            ...
E            [ 0.12598425 -0.47244096 -0.63779527]
E            [-0.9055118   0.8582677  -0.4015748 ]
E            [-0.9212598  -0.01574803 -0.5669291 ]]
E         
E           [[ 0.5826772   0.63779527  0.8031496 ]
E            [ 0.35433072  0.1023622  -0.03937008]
E            [-0.9527559  -0.52755904 -0.33858266]
E            ...
E            [ 0.92913383  0.78740156  0.44094488]
E            [-0.38582677 -0.4488189  -0.8031496 ]
E            [ 0.00787402  0.1496063  -0.48031497]]]]. conversion from
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
E          imports: import skimage as ski
E         conversion function: 
E          def convert(var):
E          return ski.util.img_as_float32(var)
E         from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
E       assert False
E        +  where False = is_image_equal(array([[[[-0.8110236 ,  0.5590551 ,  0.44881892],\n         [-1.9448819 , -1.3464568 , -1.9133859 ],\n         [-0.05511...,\n         [-1.7716535 , -1.8976378 , -2.6062992 ],\n         [-0.984252  , -0.7007874 , -1.9606299 ]]]], dtype=float32), array([[[[ 0.09448819,  0.77952754,  0.72440946],\n         [-0.47244096, -0.17322835, -0.4566929 ],\n         [ 0.47244...,\n         [-0.38582677, -0.4488189 , -0.8031496 ],\n         [ 0.00787402,  0.1496063 , -0.48031497]]]], dtype=float32))

tests/test_conversion_code_in_kg.py:46: AssertionError</failure></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_pytorch_gpu" time="0.000"><skipped type="pytest.skip" message="Test skipped because PyTorch is not installed with CUDA support or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:79: Test skipped because PyTorch is not installed with CUDA support or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_tensorflow_gpu" time="0.000"><skipped type="pytest.skip" message="Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:89: Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_tensorflow_gpu_torch_gpu" time="0.000"><skipped type="pytest.skip" message="Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:99: Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_io" name="test_load_graph_from_file" time="0.001" /><testcase classname="tests.test_io" name="test_load_graph_with_invalid_path" time="0.001" /><testcase classname="tests.test_io" name="test_save_graph_to_file" time="0.005" /><testcase classname="tests.test_io" name="test_save_graph_with_invalid_path" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_knowledge_graph_init" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_add_new_node" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_add_edge" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_edge" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_edge_failure" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_save_to_file" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path_no_path" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path_same_node" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_knowledge_graph_str" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_heuristic_function" time="0.001" /><testcase classname="tests.test_metadata" name="test_encode_to_string" time="0.001" /><testcase classname="tests.test_metadata" name="test_decode_to_dict" time="0.001" /><testcase classname="tests.test_metadata" name="test_exact_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_representation_match_no_channel_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_no_representation_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_rgb_bgr_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_empty_candidate_list" time="0.000" /><testcase classname="tests.test_metadata" name="test_one_candidata" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_match_data_repr" time="0.001" /><testcase classname="tests.test_metadata_differ" name="test_one_metadata_missing_data_repr" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_one_metadata_different_data_repr" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_missing_data_repr" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_different_data_repr" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_is_differ_value_for_key_true" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_is_differ_value_for_key_false" time="0.000" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_single_value" time="0.005" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_list_values" time="0.001" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_empty" time="0.001" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_none" time="0.001" /><testcase classname="tests.test_py_interface" name="test_get_convert_path" time="0.001" /><testcase classname="tests.test_py_interface" name="test_get_conversion_code" time="0.001" /><testcase classname="tests.test_util" name="test_remove_intermediate_functon_call" time="0.001" /><testcase classname="tests.test_util" name="test_extract_func_body_fail" time="0.000" /><testcase classname="tests.test_util" name="test_func_obj_to_str_function" time="0.001" /><testcase classname="tests.test_util" name="test_exclude_key_from_list" time="0.001" /></testsuite></testsuites>