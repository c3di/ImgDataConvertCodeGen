<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="3" tests="52" time="27.751" timestamp="2024-04-02T16:45:10.271963" hostname="fv-az814-561"><testcase classname="tests.test_code_generation" name="test_convert_code_generator_init" time="0.002" /><testcase classname="tests.test_code_generation" name="test_knowledge_graph_property" time="0.001" /><testcase classname="tests.test_code_generation" name="test_conversion_path" time="0.001" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_no_path" time="0.001" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_same_type" time="0.001" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_multiple_steps" time="0.002" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_using_cache" time="0.001" /><testcase classname="tests.test_conversion_code_execution" name="test_code_generation_using_metadata" time="0.001" /><testcase classname="tests.test_conversion_code_in_kg" name="test_all_conversion_code_exec_on_cpu" time="10.151"><failure message="AssertionError: expected [[[[-2.8897638  -2.7952757   0.46456695]&#10;     [-2.496063   -0.6535433  -1.2992126 ]&#10;     [-1.0787401  -0.8425197  -0.7480315 ]&#10;     ...&#10;     [ 0.90551186 -1.2677165  -1.992126  ]&#10;     [-0.27559054 -0.79527557 -0.9370079 ]&#10;     [-1.3779528  -2.433071   -1.3779528 ]]&#10;  &#10;    [[ 0.1338582  -2.1181102   0.29133856]&#10;     [-0.8582677   0.3070866  -0.00787401]&#10;     [ 0.19685042 -1.9606299  -1.5984251 ]&#10;     ...&#10;     [-1.0629921  -0.46456695 -2.4173229 ]&#10;     [-0.1811024  -2.8425198  -1.1732284 ]&#10;     [-0.16535431  0.3070866  -2.6692915 ]]&#10;  &#10;    [[-1.472441   -0.02362204 -0.9055118 ]&#10;     [-0.6062992  -2.5905511  -0.44881892]&#10;     [ 0.7007874  -1.0629921  -1.7559055 ]&#10;     ...&#10;     [-2.2598424  -2.7637796  -2.2755904 ]&#10;     [ 0.44881892 -2.8740158  -2.2755904 ]&#10;     [-2.464567    0.37007868 -2.952756  ]]&#10;  &#10;    ...&#10;  &#10;    [[-1.6614172   0.1811024  -1.7086614 ]&#10;     [ 0.7480315   0.21259844 -0.5905512 ]&#10;     [-2.070866   -1.976378   -2.4173229 ]&#10;     ...&#10;     [-2.543307    0.11811018 -0.9212598 ]&#10;     [ 0.03937006 -2.5905511  -0.3385827 ]&#10;     [-2.6692915  -0.9055118  -1.031496  ]]&#10;  &#10;    [[-0.8425197  -2.1496062  -0.71653545]&#10;     [-0.8110236  -0.10236222 -1.2362205 ]&#10;     [ 0.59055114 -0.5905512  -2.055118  ]&#10;     ...&#10;     [-2.3543305  -0.25984251  0.8740157 ]&#10;     [-1.7874016   0.9370079  -2.6692915 ]&#10;     [ 0.77952754 -1.4566929  -0.9370079 ]]&#10;  &#10;    [[-2.6220472   0.1338582  -0.25984251]&#10;     [-1.503937   -1.8503938   0.11811018]&#10;     [-1.503937   -0.7480315  -1.8503938 ]&#10;     ...&#10;     [ 0.3228346  -0.87401575 -0.13385826]&#10;     [-0.77952754 -0.8110236  -2.03937   ]&#10;     [-1.1889764  -0.46456695  0.6850394 ]]]], but actual [[[[-0.9448819  -0.8976378   0.7322835 ]&#10;     [-0.7480315   0.17322835 -0.1496063 ]&#10;     [-0.03937008  0.07874016  0.12598425]&#10;     ...&#10;     [ 0.9527559  -0.13385826 -0.496063  ]&#10;     [ 0.36220473  0.1023622   0.03149606]&#10;     [-0.18897638 -0.71653545 -0.18897638]]&#10;  &#10;    [[ 0.5669291  -0.5590551   0.6456693 ]&#10;     [ 0.07086614  0.6535433   0.496063  ]&#10;     [ 0.5984252  -0.48031497 -0.2992126 ]&#10;     ...&#10;     [-0.03149606  0.26771653 -0.70866144]&#10;     [ 0.4094488  -0.9212598  -0.08661418]&#10;     [ 0.41732284  0.6535433  -0.8346457 ]]&#10;  &#10;    [[-0.23622048  0.48818898  0.04724409]&#10;     [ 0.19685039 -0.79527557  0.27559054]&#10;     [ 0.8503937  -0.03149606 -0.37795275]&#10;     ...&#10;     [-0.62992126 -0.88188976 -0.63779527]&#10;     [ 0.72440946 -0.93700784 -0.63779527]&#10;     [-0.7322835   0.68503934 -0.97637796]]&#10;  &#10;    ...&#10;  &#10;    [[-0.33070865  0.5905512  -0.35433072]&#10;     [ 0.87401575  0.6062992   0.2047244 ]&#10;     [-0.53543305 -0.48818898 -0.70866144]&#10;     ...&#10;     [-0.77165353  0.5590551   0.03937008]&#10;     [ 0.51968503 -0.79527557  0.33070865]&#10;     [-0.8346457   0.04724409 -0.01574803]]&#10;  &#10;    [[ 0.07874016 -0.5748032   0.14173228]&#10;     [ 0.09448819  0.4488189  -0.11811024]&#10;     [ 0.79527557  0.2047244  -0.52755904]&#10;     ...&#10;     [-0.6771653   0.37007874  0.93700784]&#10;     [-0.39370078  0.96850395 -0.8346457 ]&#10;     [ 0.8897638  -0.22834645  0.03149606]]&#10;  &#10;    [[-0.8110236   0.5669291   0.37007874]&#10;     [-0.2519685  -0.42519686  0.5590551 ]&#10;     [-0.2519685   0.12598425 -0.42519686]&#10;     ...&#10;     [ 0.6614173   0.06299213  0.43307087]&#10;     [ 0.11023622  0.09448819 -0.51968503]&#10;     [-0.09448819  0.26771653  0.8425197 ]]]]. conversion from&#10;   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to&#10;   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed&#10;   imports: import skimage as ski&#10;  conversion function: &#10;   def convert(var):&#10;   return ski.util.img_as_float32(var)&#10;  from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py&#10;assert False&#10; +  where False = is_image_equal(array([[[[-2.8897638 , -2.7952757 ,  0.46456695],\n         [-2.496063  , -0.6535433 , -1.2992126 ],\n         [-1.07874...,\n         [-0.77952754, -0.8110236 , -2.03937   ],\n         [-1.1889764 , -0.46456695,  0.6850394 ]]]], dtype=float32), array([[[[-0.9448819 , -0.8976378 ,  0.7322835 ],\n         [-0.7480315 ,  0.17322835, -0.1496063 ],\n         [-0.03937...,\n         [ 0.11023622,  0.09448819, -0.51968503],\n         [-0.09448819,  0.26771653,  0.8425197 ]]]], dtype=float32))">code_generator = &lt;imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f76202245b0&gt;

    def test_all_conversion_code_exec_on_cpu(code_generator):
        kg = code_generator.knowledge_graph
        for edge in kg.edges:
            if is_code_exec_on_cpu(edge):
&gt;               assert_exec_of_conversion_code_in_edge(*edge, kg)

tests/test_conversion_code_in_kg.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
target_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
kg = &lt;imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f768ed97040&gt;

    def assert_exec_of_conversion_code_in_edge(source_metadata, target_metadata, kg):
        edge_data = kg.get_edge_data(source_metadata, target_metadata)
        conversion = edge_data.get('conversion')
        assert conversion is not None, f"No conversion from {source_metadata} to {target_metadata}"
        assert len(conversion) == 2, (f"Expected two elements in the conversions, but got: {conversion} from"
                                      f" {source_metadata} to {target_metadata}")
        assert isinstance(conversion[0], str), (f"Expected the first element of the conversion to be a string, but got:"
                                                f" {conversion[0]} from {source_metadata} to {target_metadata}")
        assert isinstance(conversion[1], str), (f"Expected the second element of the conversion to be a string, but got:"
                                                f" {conversion[1]} from {source_metadata} to {target_metadata}")
        error_message = (f"conversion from\n {source_metadata} to\n {target_metadata} failed\n "
                         f"imports: {conversion[0]}\nconversion function: \n {conversion[1]}\nfrom {edge_data.get('factory')}")
    
        try:
            source_image, target_image = get_input_image_and_expected_output(source_metadata, target_metadata)
            func_name = re.search(r'(?&lt;=def )\w+', conversion[1]).group(0)
    
            scope = {}
            scope.update({'source_image': source_image})
            exec(f"""{conversion[0]}
    {conversion[1]}
    actual_image = {func_name}(source_image)""", scope)
            actual_image = scope.get('actual_image')
        except Exception as e:
            raise AssertionError(f"Failed to execute conversion code from {error_message}") from e
    
&gt;       assert is_image_equal(target_image,
                              actual_image), f'expected {target_image}, but actual {actual_image}. {error_message}'
E       AssertionError: expected [[[[-2.8897638  -2.7952757   0.46456695]
E            [-2.496063   -0.6535433  -1.2992126 ]
E            [-1.0787401  -0.8425197  -0.7480315 ]
E            ...
E            [ 0.90551186 -1.2677165  -1.992126  ]
E            [-0.27559054 -0.79527557 -0.9370079 ]
E            [-1.3779528  -2.433071   -1.3779528 ]]
E         
E           [[ 0.1338582  -2.1181102   0.29133856]
E            [-0.8582677   0.3070866  -0.00787401]
E            [ 0.19685042 -1.9606299  -1.5984251 ]
E            ...
E            [-1.0629921  -0.46456695 -2.4173229 ]
E            [-0.1811024  -2.8425198  -1.1732284 ]
E            [-0.16535431  0.3070866  -2.6692915 ]]
E         
E           [[-1.472441   -0.02362204 -0.9055118 ]
E            [-0.6062992  -2.5905511  -0.44881892]
E            [ 0.7007874  -1.0629921  -1.7559055 ]
E            ...
E            [-2.2598424  -2.7637796  -2.2755904 ]
E            [ 0.44881892 -2.8740158  -2.2755904 ]
E            [-2.464567    0.37007868 -2.952756  ]]
E         
E           ...
E         
E           [[-1.6614172   0.1811024  -1.7086614 ]
E            [ 0.7480315   0.21259844 -0.5905512 ]
E            [-2.070866   -1.976378   -2.4173229 ]
E            ...
E            [-2.543307    0.11811018 -0.9212598 ]
E            [ 0.03937006 -2.5905511  -0.3385827 ]
E            [-2.6692915  -0.9055118  -1.031496  ]]
E         
E           [[-0.8425197  -2.1496062  -0.71653545]
E            [-0.8110236  -0.10236222 -1.2362205 ]
E            [ 0.59055114 -0.5905512  -2.055118  ]
E            ...
E            [-2.3543305  -0.25984251  0.8740157 ]
E            [-1.7874016   0.9370079  -2.6692915 ]
E            [ 0.77952754 -1.4566929  -0.9370079 ]]
E         
E           [[-2.6220472   0.1338582  -0.25984251]
E            [-1.503937   -1.8503938   0.11811018]
E            [-1.503937   -0.7480315  -1.8503938 ]
E            ...
E            [ 0.3228346  -0.87401575 -0.13385826]
E            [-0.77952754 -0.8110236  -2.03937   ]
E            [-1.1889764  -0.46456695  0.6850394 ]]]], but actual [[[[-0.9448819  -0.8976378   0.7322835 ]
E            [-0.7480315   0.17322835 -0.1496063 ]
E            [-0.03937008  0.07874016  0.12598425]
E            ...
E            [ 0.9527559  -0.13385826 -0.496063  ]
E            [ 0.36220473  0.1023622   0.03149606]
E            [-0.18897638 -0.71653545 -0.18897638]]
E         
E           [[ 0.5669291  -0.5590551   0.6456693 ]
E            [ 0.07086614  0.6535433   0.496063  ]
E            [ 0.5984252  -0.48031497 -0.2992126 ]
E            ...
E            [-0.03149606  0.26771653 -0.70866144]
E            [ 0.4094488  -0.9212598  -0.08661418]
E            [ 0.41732284  0.6535433  -0.8346457 ]]
E         
E           [[-0.23622048  0.48818898  0.04724409]
E            [ 0.19685039 -0.79527557  0.27559054]
E            [ 0.8503937  -0.03149606 -0.37795275]
E            ...
E            [-0.62992126 -0.88188976 -0.63779527]
E            [ 0.72440946 -0.93700784 -0.63779527]
E            [-0.7322835   0.68503934 -0.97637796]]
E         
E           ...
E         
E           [[-0.33070865  0.5905512  -0.35433072]
E            [ 0.87401575  0.6062992   0.2047244 ]
E            [-0.53543305 -0.48818898 -0.70866144]
E            ...
E            [-0.77165353  0.5590551   0.03937008]
E            [ 0.51968503 -0.79527557  0.33070865]
E            [-0.8346457   0.04724409 -0.01574803]]
E         
E           [[ 0.07874016 -0.5748032   0.14173228]
E            [ 0.09448819  0.4488189  -0.11811024]
E            [ 0.79527557  0.2047244  -0.52755904]
E            ...
E            [-0.6771653   0.37007874  0.93700784]
E            [-0.39370078  0.96850395 -0.8346457 ]
E            [ 0.8897638  -0.22834645  0.03149606]]
E         
E           [[-0.8110236   0.5669291   0.37007874]
E            [-0.2519685  -0.42519686  0.5590551 ]
E            [-0.2519685   0.12598425 -0.42519686]
E            ...
E            [ 0.6614173   0.06299213  0.43307087]
E            [ 0.11023622  0.09448819 -0.51968503]
E            [-0.09448819  0.26771653  0.8425197 ]]]]. conversion from
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
E          imports: import skimage as ski
E         conversion function: 
E          def convert(var):
E          return ski.util.img_as_float32(var)
E         from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
E       assert False
E        +  where False = is_image_equal(array([[[[-2.8897638 , -2.7952757 ,  0.46456695],\n         [-2.496063  , -0.6535433 , -1.2992126 ],\n         [-1.07874...,\n         [-0.77952754, -0.8110236 , -2.03937   ],\n         [-1.1889764 , -0.46456695,  0.6850394 ]]]], dtype=float32), array([[[[-0.9448819 , -0.8976378 ,  0.7322835 ],\n         [-0.7480315 ,  0.17322835, -0.1496063 ],\n         [-0.03937...,\n         [ 0.11023622,  0.09448819, -0.51968503],\n         [-0.09448819,  0.26771653,  0.8425197 ]]]], dtype=float32))

tests/test_conversion_code_in_kg.py:46: AssertionError</failure></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_pytorch_gpu" time="0.000"><skipped type="pytest.skip" message="Test skipped because PyTorch is not installed with CUDA support or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:79: Test skipped because PyTorch is not installed with CUDA support or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_tensorflow_gpu" time="0.000"><skipped type="pytest.skip" message="Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:89: Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_tensorflow_gpu_torch_gpu" time="0.000"><skipped type="pytest.skip" message="Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:99: Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_io" name="test_load_graph_from_file" time="0.001" /><testcase classname="tests.test_io" name="test_load_graph_with_invalid_path" time="0.001" /><testcase classname="tests.test_io" name="test_save_graph_to_file" time="0.005" /><testcase classname="tests.test_io" name="test_save_graph_with_invalid_path" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_knowledge_graph_init" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_add_new_node" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_add_edge" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_edge" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_edge_failure" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_save_to_file" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path_no_path" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path_same_node" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_knowledge_graph_str" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_heuristic_function" time="0.001" /><testcase classname="tests.test_metadata" name="test_encode_to_string" time="0.001" /><testcase classname="tests.test_metadata" name="test_decode_to_dict" time="0.001" /><testcase classname="tests.test_metadata" name="test_exact_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_representation_match_no_channel_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_no_representation_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_rgb_bgr_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_empty_candidate_list" time="0.000" /><testcase classname="tests.test_metadata" name="test_one_candidata" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_match_data_repr" time="0.001" /><testcase classname="tests.test_metadata_differ" name="test_one_metadata_missing_data_repr" time="0.001" /><testcase classname="tests.test_metadata_differ" name="test_one_metadata_different_data_repr" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_missing_data_repr" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_different_data_repr" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_is_differ_value_for_key_true" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_is_differ_value_for_key_false" time="0.000" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_single_value" time="0.005" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_list_values" time="0.001" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_empty" time="0.001" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_none" time="0.001" /><testcase classname="tests.test_py_interface" name="test_get_convert_path" time="0.001" /><testcase classname="tests.test_py_interface" name="test_get_conversion_code" time="0.001" /><testcase classname="tests.test_util" name="test_remove_intermediate_functon_call" time="0.001" /><testcase classname="tests.test_util" name="test_extract_func_body_fail" time="0.001" /><testcase classname="tests.test_util" name="test_func_obj_to_str_function" time="0.001" /><testcase classname="tests.test_util" name="test_exclude_key_from_list" time="0.001" /></testsuite></testsuites>