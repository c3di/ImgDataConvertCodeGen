<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="3" tests="52" time="27.638" timestamp="2024-04-02T15:54:58.034503" hostname="fv-az1726-207"><testcase classname="tests.test_code_generation" name="test_convert_code_generator_init" time="0.002" /><testcase classname="tests.test_code_generation" name="test_knowledge_graph_property" time="0.001" /><testcase classname="tests.test_code_generation" name="test_conversion_path" time="0.002" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_no_path" time="0.001" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_same_type" time="0.001" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_multiple_steps" time="0.002" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_using_cache" time="0.001" /><testcase classname="tests.test_conversion_code_execution" name="test_code_generation_using_metadata" time="0.001" /><testcase classname="tests.test_conversion_code_in_kg" name="test_all_conversion_code_exec_on_cpu" time="10.063"><failure message="AssertionError: expected [[[[ 0.07086611 -1.5984251  -0.71653545]&#10;     [ 0.10236216 -1.6456692  -3.        ]&#10;     [-1.1574804  -1.6771653  -1.3464568 ]&#10;     ...&#10;     [-0.87401575  0.6377952  -1.976378  ]&#10;     [-0.14960629 -0.48031497 -2.7795277 ]&#10;     [ 0.4330709  -0.8267716  -2.1023622 ]]&#10;  &#10;    [[-2.7952757   0.3070866   0.9527559 ]&#10;     [-1.7874016   0.54330707  0.984252  ]&#10;     [-1.2204725  -2.03937     0.1338582 ]&#10;     ...&#10;     [-1.5826771  -0.6850394   0.46456695]&#10;     [ 0.7480315  -2.937008   -2.8110237 ]&#10;     [-1.472441   -2.464567   -1.7401575 ]]&#10;  &#10;    [[-0.22834647  0.511811    0.9212599 ]&#10;     [-1.9291339  -2.8110237  -0.9527559 ]&#10;     [-0.44881892 -0.984252   -2.8582678 ]&#10;     ...&#10;     [-1.6614172   0.16535437 -0.9527559 ]&#10;     [-0.10236222  0.10236216  0.44881892]&#10;     [-1.1259842   0.29133856 -1.9448819 ]]&#10;  &#10;    ...&#10;  &#10;    [[-1.5511811  -0.02362204  0.60629916]&#10;     [-2.6692915  -1.7086614   0.35433066]&#10;     [-1.1732284  -2.8897638  -1.472441  ]&#10;     ...&#10;     [-2.1968503  -0.7322835  -1.2834646 ]&#10;     [-1.1889764  -0.7007874  -2.6377952 ]&#10;     [-1.8188976  -0.54330707 -2.559055  ]]&#10;  &#10;    [[-1.0944881  -0.54330707 -2.984252  ]&#10;     [-2.480315    0.16535437 -0.9527559 ]&#10;     [ 0.60629916 -1.0787401  -0.10236222]&#10;     ...&#10;     [-2.1811023  -1.2992126   0.9527559 ]&#10;     [-0.38582677 -1.7874016  -2.3228345 ]&#10;     [-1.2834646  -2.8110237  -0.511811  ]]&#10;  &#10;    [[-2.9055119  -2.6377952  -1.3149606 ]&#10;     [ 0.88976383 -2.6535435   0.25984251]&#10;     [-0.5590551   0.8740157  -1.7559055 ]&#10;     ...&#10;     [ 0.984252   -1.7874016  -2.3543305 ]&#10;     [-1.535433   -2.2913384  -2.7952757 ]&#10;     [ 0.1811024  -1.6456692   0.90551186]]]], but actual [[[[ 0.53543305 -0.2992126   0.14173228]&#10;     [ 0.5511811  -0.32283464 -1.        ]&#10;     [-0.07874016 -0.33858266 -0.17322835]&#10;     ...&#10;     [ 0.06299213  0.8188976  -0.48818898]&#10;     [ 0.42519686  0.25984251 -0.8897638 ]&#10;     [ 0.71653545  0.08661418 -0.5511811 ]]&#10;  &#10;    [[-0.8976378   0.6535433   0.97637796]&#10;     [-0.39370078  0.77165353  0.992126  ]&#10;     [-0.11023622 -0.51968503  0.5669291 ]&#10;     ...&#10;     [-0.2913386   0.15748031  0.7322835 ]&#10;     [ 0.87401575 -0.96850395 -0.9055118 ]&#10;     [-0.23622048 -0.7322835  -0.37007874]]&#10;  &#10;    [[ 0.38582677  0.7559055   0.96062994]&#10;     [-0.46456692 -0.9055118   0.02362205]&#10;     [ 0.27559054  0.00787402 -0.92913383]&#10;     ...&#10;     [-0.33070865  0.5826772   0.02362205]&#10;     [ 0.4488189   0.5511811   0.72440946]&#10;     [-0.06299213  0.6456693  -0.47244096]]&#10;  &#10;    ...&#10;  &#10;    [[-0.27559054  0.48818898  0.8031496 ]&#10;     [-0.8346457  -0.35433072  0.6771653 ]&#10;     [-0.08661418 -0.9448819  -0.23622048]&#10;     ...&#10;     [-0.5984252   0.13385826 -0.14173228]&#10;     [-0.09448819  0.1496063  -0.8188976 ]&#10;     [-0.4094488   0.22834645 -0.77952754]]&#10;  &#10;    [[-0.04724409  0.22834645 -0.992126  ]&#10;     [-0.7401575   0.5826772   0.02362205]&#10;     [ 0.8031496  -0.03937008  0.4488189 ]&#10;     ...&#10;     [-0.5905512  -0.1496063   0.97637796]&#10;     [ 0.30708662 -0.39370078 -0.6614173 ]&#10;     [-0.14173228 -0.9055118   0.24409449]]&#10;  &#10;    [[-0.9527559  -0.8188976  -0.15748031]&#10;     [ 0.9448819  -0.8267717   0.62992126]&#10;     [ 0.22047244  0.93700784 -0.37795275]&#10;     ...&#10;     [ 0.992126   -0.39370078 -0.6771653 ]&#10;     [-0.26771653 -0.6456693  -0.8976378 ]&#10;     [ 0.5905512  -0.32283464  0.9527559 ]]]]. conversion from&#10;   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to&#10;   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed&#10;   imports: import skimage as ski&#10;  conversion function: &#10;   def convert(var):&#10;   return ski.util.img_as_float32(var)&#10;  from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py&#10;assert False&#10; +  where False = is_image_equal(array([[[[ 0.07086611, -1.5984251 , -0.71653545],\n         [ 0.10236216, -1.6456692 , -3.        ],\n         [-1.15748...,\n         [-1.535433  , -2.2913384 , -2.7952757 ],\n         [ 0.1811024 , -1.6456692 ,  0.90551186]]]], dtype=float32), array([[[[ 0.53543305, -0.2992126 ,  0.14173228],\n         [ 0.5511811 , -0.32283464, -1.        ],\n         [-0.07874...,\n         [-0.26771653, -0.6456693 , -0.8976378 ],\n         [ 0.5905512 , -0.32283464,  0.9527559 ]]]], dtype=float32))">code_generator = &lt;imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f4474b31630&gt;

    def test_all_conversion_code_exec_on_cpu(code_generator):
        kg = code_generator.knowledge_graph
        for edge in kg.edges:
            if is_code_exec_on_cpu(edge):
&gt;               assert_exec_of_conversion_code_in_edge(*edge, kg)

tests/test_conversion_code_in_kg.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
target_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
kg = &lt;imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f44ea70afe0&gt;

    def assert_exec_of_conversion_code_in_edge(source_metadata, target_metadata, kg):
        edge_data = kg.get_edge_data(source_metadata, target_metadata)
        conversion = edge_data.get('conversion')
        assert conversion is not None, f"No conversion from {source_metadata} to {target_metadata}"
        assert len(conversion) == 2, (f"Expected two elements in the conversions, but got: {conversion} from"
                                      f" {source_metadata} to {target_metadata}")
        assert isinstance(conversion[0], str), (f"Expected the first element of the conversion to be a string, but got:"
                                                f" {conversion[0]} from {source_metadata} to {target_metadata}")
        assert isinstance(conversion[1], str), (f"Expected the second element of the conversion to be a string, but got:"
                                                f" {conversion[1]} from {source_metadata} to {target_metadata}")
        error_message = (f"conversion from\n {source_metadata} to\n {target_metadata} failed\n "
                         f"imports: {conversion[0]}\nconversion function: \n {conversion[1]}\nfrom {edge_data.get('factory')}")
    
        try:
            source_image, target_image = get_input_image_and_expected_output(source_metadata, target_metadata)
            func_name = re.search(r'(?&lt;=def )\w+', conversion[1]).group(0)
    
            scope = {}
            scope.update({'source_image': source_image})
            exec(f"""{conversion[0]}
    {conversion[1]}
    actual_image = {func_name}(source_image)""", scope)
            actual_image = scope.get('actual_image')
        except Exception as e:
            raise AssertionError(f"Failed to execute conversion code from {error_message}") from e
    
&gt;       assert is_image_equal(target_image,
                              actual_image), f'expected {target_image}, but actual {actual_image}. {error_message}'
E       AssertionError: expected [[[[ 0.07086611 -1.5984251  -0.71653545]
E            [ 0.10236216 -1.6456692  -3.        ]
E            [-1.1574804  -1.6771653  -1.3464568 ]
E            ...
E            [-0.87401575  0.6377952  -1.976378  ]
E            [-0.14960629 -0.48031497 -2.7795277 ]
E            [ 0.4330709  -0.8267716  -2.1023622 ]]
E         
E           [[-2.7952757   0.3070866   0.9527559 ]
E            [-1.7874016   0.54330707  0.984252  ]
E            [-1.2204725  -2.03937     0.1338582 ]
E            ...
E            [-1.5826771  -0.6850394   0.46456695]
E            [ 0.7480315  -2.937008   -2.8110237 ]
E            [-1.472441   -2.464567   -1.7401575 ]]
E         
E           [[-0.22834647  0.511811    0.9212599 ]
E            [-1.9291339  -2.8110237  -0.9527559 ]
E            [-0.44881892 -0.984252   -2.8582678 ]
E            ...
E            [-1.6614172   0.16535437 -0.9527559 ]
E            [-0.10236222  0.10236216  0.44881892]
E            [-1.1259842   0.29133856 -1.9448819 ]]
E         
E           ...
E         
E           [[-1.5511811  -0.02362204  0.60629916]
E            [-2.6692915  -1.7086614   0.35433066]
E            [-1.1732284  -2.8897638  -1.472441  ]
E            ...
E            [-2.1968503  -0.7322835  -1.2834646 ]
E            [-1.1889764  -0.7007874  -2.6377952 ]
E            [-1.8188976  -0.54330707 -2.559055  ]]
E         
E           [[-1.0944881  -0.54330707 -2.984252  ]
E            [-2.480315    0.16535437 -0.9527559 ]
E            [ 0.60629916 -1.0787401  -0.10236222]
E            ...
E            [-2.1811023  -1.2992126   0.9527559 ]
E            [-0.38582677 -1.7874016  -2.3228345 ]
E            [-1.2834646  -2.8110237  -0.511811  ]]
E         
E           [[-2.9055119  -2.6377952  -1.3149606 ]
E            [ 0.88976383 -2.6535435   0.25984251]
E            [-0.5590551   0.8740157  -1.7559055 ]
E            ...
E            [ 0.984252   -1.7874016  -2.3543305 ]
E            [-1.535433   -2.2913384  -2.7952757 ]
E            [ 0.1811024  -1.6456692   0.90551186]]]], but actual [[[[ 0.53543305 -0.2992126   0.14173228]
E            [ 0.5511811  -0.32283464 -1.        ]
E            [-0.07874016 -0.33858266 -0.17322835]
E            ...
E            [ 0.06299213  0.8188976  -0.48818898]
E            [ 0.42519686  0.25984251 -0.8897638 ]
E            [ 0.71653545  0.08661418 -0.5511811 ]]
E         
E           [[-0.8976378   0.6535433   0.97637796]
E            [-0.39370078  0.77165353  0.992126  ]
E            [-0.11023622 -0.51968503  0.5669291 ]
E            ...
E            [-0.2913386   0.15748031  0.7322835 ]
E            [ 0.87401575 -0.96850395 -0.9055118 ]
E            [-0.23622048 -0.7322835  -0.37007874]]
E         
E           [[ 0.38582677  0.7559055   0.96062994]
E            [-0.46456692 -0.9055118   0.02362205]
E            [ 0.27559054  0.00787402 -0.92913383]
E            ...
E            [-0.33070865  0.5826772   0.02362205]
E            [ 0.4488189   0.5511811   0.72440946]
E            [-0.06299213  0.6456693  -0.47244096]]
E         
E           ...
E         
E           [[-0.27559054  0.48818898  0.8031496 ]
E            [-0.8346457  -0.35433072  0.6771653 ]
E            [-0.08661418 -0.9448819  -0.23622048]
E            ...
E            [-0.5984252   0.13385826 -0.14173228]
E            [-0.09448819  0.1496063  -0.8188976 ]
E            [-0.4094488   0.22834645 -0.77952754]]
E         
E           [[-0.04724409  0.22834645 -0.992126  ]
E            [-0.7401575   0.5826772   0.02362205]
E            [ 0.8031496  -0.03937008  0.4488189 ]
E            ...
E            [-0.5905512  -0.1496063   0.97637796]
E            [ 0.30708662 -0.39370078 -0.6614173 ]
E            [-0.14173228 -0.9055118   0.24409449]]
E         
E           [[-0.9527559  -0.8188976  -0.15748031]
E            [ 0.9448819  -0.8267717   0.62992126]
E            [ 0.22047244  0.93700784 -0.37795275]
E            ...
E            [ 0.992126   -0.39370078 -0.6771653 ]
E            [-0.26771653 -0.6456693  -0.8976378 ]
E            [ 0.5905512  -0.32283464  0.9527559 ]]]]. conversion from
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
E          imports: import skimage as ski
E         conversion function: 
E          def convert(var):
E          return ski.util.img_as_float32(var)
E         from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
E       assert False
E        +  where False = is_image_equal(array([[[[ 0.07086611, -1.5984251 , -0.71653545],\n         [ 0.10236216, -1.6456692 , -3.        ],\n         [-1.15748...,\n         [-1.535433  , -2.2913384 , -2.7952757 ],\n         [ 0.1811024 , -1.6456692 ,  0.90551186]]]], dtype=float32), array([[[[ 0.53543305, -0.2992126 ,  0.14173228],\n         [ 0.5511811 , -0.32283464, -1.        ],\n         [-0.07874...,\n         [-0.26771653, -0.6456693 , -0.8976378 ],\n         [ 0.5905512 , -0.32283464,  0.9527559 ]]]], dtype=float32))

tests/test_conversion_code_in_kg.py:46: AssertionError</failure></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_pytorch_gpu" time="0.000"><skipped type="pytest.skip" message="Test skipped because PyTorch is not installed with CUDA support or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:79: Test skipped because PyTorch is not installed with CUDA support or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_tensorflow_gpu" time="0.000"><skipped type="pytest.skip" message="Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:89: Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_tensorflow_gpu_torch_gpu" time="0.000"><skipped type="pytest.skip" message="Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:99: Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_io" name="test_load_graph_from_file" time="0.001" /><testcase classname="tests.test_io" name="test_load_graph_with_invalid_path" time="0.001" /><testcase classname="tests.test_io" name="test_save_graph_to_file" time="0.005" /><testcase classname="tests.test_io" name="test_save_graph_with_invalid_path" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_knowledge_graph_init" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_add_new_node" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_add_edge" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_edge" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_edge_failure" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_save_to_file" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path_no_path" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path_same_node" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_knowledge_graph_str" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_heuristic_function" time="0.001" /><testcase classname="tests.test_metadata" name="test_encode_to_string" time="0.001" /><testcase classname="tests.test_metadata" name="test_decode_to_dict" time="0.001" /><testcase classname="tests.test_metadata" name="test_exact_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_representation_match_no_channel_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_no_representation_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_rgb_bgr_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_empty_candidate_list" time="0.000" /><testcase classname="tests.test_metadata" name="test_one_candidata" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_match_data_repr" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_one_metadata_missing_data_repr" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_one_metadata_different_data_repr" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_missing_data_repr" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_different_data_repr" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_is_differ_value_for_key_true" time="0.001" /><testcase classname="tests.test_metadata_differ" name="test_is_differ_value_for_key_false" time="0.000" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_single_value" time="0.005" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_list_values" time="0.001" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_empty" time="0.001" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_none" time="0.001" /><testcase classname="tests.test_py_interface" name="test_get_convert_path" time="0.001" /><testcase classname="tests.test_py_interface" name="test_get_conversion_code" time="0.001" /><testcase classname="tests.test_util" name="test_remove_intermediate_functon_call" time="0.001" /><testcase classname="tests.test_util" name="test_extract_func_body_fail" time="0.001" /><testcase classname="tests.test_util" name="test_func_obj_to_str_function" time="0.001" /><testcase classname="tests.test_util" name="test_exclude_key_from_list" time="0.001" /></testsuite></testsuites>