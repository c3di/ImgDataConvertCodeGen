<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="8" skipped="3" tests="52" time="440.649" timestamp="2024-04-02T07:41:29.202930" hostname="fv-az1148-648"><testcase classname="tests.test_code_generation" name="test_convert_code_generator_init" time="0.002" /><testcase classname="tests.test_code_generation" name="test_knowledge_graph_property" time="0.001" /><testcase classname="tests.test_code_generation" name="test_conversion_path" time="0.001" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_no_path" time="0.001" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_same_type" time="0.001" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_multiple_steps" time="0.001"><failure message="KeyError: 'normalized_time_cost'">code_generator = &lt;imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f0cac4c4e80&gt;

    def test_generate_conversion_multiple_steps(code_generator):
        source_var = 'source_var'
        target_var = 'result'
&gt;       generated_code = code_generator.get_conversion(source_var, test_nodes[0], target_var, new_node)

tests/test_code_generation.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/imgdataconvertcodegen/code_generator.py:46: in get_conversion
    cvt_path = self.knowledge_graph.get_shortest_path(source_metadata, target_metadata)
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:65: in get_shortest_path
    path = nx.astar_path(self._graph, encode_metadata(source_metadata), encode_metadata(target_metadata),
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/utils/backends.py:412: in __call__
    return self.orig_func(*args, **kwargs)
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/algorithms/shortest_paths/astar.py:141: in astar_path
    cost = weight(curnode, neighbor, w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0c97a09a20&gt;
u = 'numpy.ndarray_rgb_channel last_False_uint8_cpu'
v = 'numpy.ndarray_bgr_channel last_False_uint8_cpu'
edge_attributes = {'conversion': ['', 'def convert(var):\n  return var[:, :, ::-1]'], 'factory': None, 'time_cost': inf}

    def cost_function_in_AStar(self, u, v, edge_attributes):
&gt;       time_cost = edge_attributes['normalized_time_cost']
E       KeyError: 'normalized_time_cost'

src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:48: KeyError</failure></testcase><testcase classname="tests.test_code_generation" name="test_generate_conversion_using_cache" time="0.001"><failure message="KeyError: 'normalized_time_cost'">code_generator = &lt;imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f0c97a16b90&gt;

    def test_generate_conversion_using_cache(code_generator):
        source_var = 'source_var'
        target_var = 'result'
    
&gt;       code_generator.get_conversion(source_var, test_nodes[0], target_var, new_node)

tests/test_code_generation.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/imgdataconvertcodegen/code_generator.py:46: in get_conversion
    cvt_path = self.knowledge_graph.get_shortest_path(source_metadata, target_metadata)
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:65: in get_shortest_path
    path = nx.astar_path(self._graph, encode_metadata(source_metadata), encode_metadata(target_metadata),
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/utils/backends.py:412: in __call__
    return self.orig_func(*args, **kwargs)
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/algorithms/shortest_paths/astar.py:141: in astar_path
    cost = weight(curnode, neighbor, w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0c97a14f40&gt;
u = 'numpy.ndarray_rgb_channel last_False_uint8_cpu'
v = 'numpy.ndarray_bgr_channel last_False_uint8_cpu'
edge_attributes = {'conversion': ['', 'def convert(var):\n  return var[:, :, ::-1]'], 'factory': None, 'time_cost': inf}

    def cost_function_in_AStar(self, u, v, edge_attributes):
&gt;       time_cost = edge_attributes['normalized_time_cost']
E       KeyError: 'normalized_time_cost'

src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:48: KeyError</failure></testcase><testcase classname="tests.test_conversion_code_execution" name="test_code_generation_using_metadata" time="0.001"><failure message="KeyError: 'normalized_time_cost'">code_generator = &lt;imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f0c97ab49d0&gt;

    def test_code_generation_using_metadata(code_generator):
        kg = code_generator.knowledge_graph
        source_image = np.random.randint(0, 256, (20, 20, 3), dtype=np.uint8)
        expected_image = torch.from_numpy(source_image).permute(2, 0, 1).unsqueeze(0)
    
        # Prepare a custom scope that includes both global and local variables to ensure that the dynamically executed code
        # has access to necessary pre-defined variables and can also store new variables such as 'target_result'.
        # This is crucial in the pytest environment where test function scopes are isolated, and dynamically defined
        # variables might not be directly accessible due to Python's scoping rules.
        scope = globals().copy()
        scope.update(locals())
    
&gt;       convert_code = code_generator.get_conversion('source_image', test_nodes[0],
                                                     'target_image', new_node)

tests/test_conversion_code_execution.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/imgdataconvertcodegen/code_generator.py:46: in get_conversion
    cvt_path = self.knowledge_graph.get_shortest_path(source_metadata, target_metadata)
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:65: in get_shortest_path
    path = nx.astar_path(self._graph, encode_metadata(source_metadata), encode_metadata(target_metadata),
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/utils/backends.py:412: in __call__
    return self.orig_func(*args, **kwargs)
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/algorithms/shortest_paths/astar.py:141: in astar_path
    cost = weight(curnode, neighbor, w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0c97ab49a0&gt;
u = 'numpy.ndarray_rgb_channel last_False_uint8_cpu'
v = 'numpy.ndarray_bgr_channel last_False_uint8_cpu'
edge_attributes = {'conversion': ['', 'def convert(var):\n  return var[:, :, ::-1]'], 'factory': None, 'time_cost': inf}

    def cost_function_in_AStar(self, u, v, edge_attributes):
&gt;       time_cost = edge_attributes['normalized_time_cost']
E       KeyError: 'normalized_time_cost'

src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:48: KeyError</failure></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_all_conversion_code_exec_on_cpu" time="217.644"><failure message="AssertionError: expected [[[[-0.32283467 -2.574803   -2.433071  ]&#10;     [ 0.85826766  0.37007868 -1.2677165 ]&#10;     [-1.4409449  -1.6771653   0.7637795 ]&#10;     ...&#10;     [-1.4566929  -2.2125983  -0.77952754]&#10;     [-1.472441   -1.2519685   0.9212599 ]&#10;     [-0.8267716  -0.54330707 -0.07086617]]&#10;  &#10;    [[-1.1259842  -2.433071    0.511811  ]&#10;     [-2.070866   -2.7165356  -0.7637795 ]&#10;     [ 0.984252   -1.3307086  -2.7165356 ]&#10;     ...&#10;     [-0.984252   -1.488189   -0.96850395]&#10;     [ 0.08661413 -2.527559   -2.6850395 ]&#10;     [-2.480315   -0.71653545 -2.3700786 ]]&#10;  &#10;    [[-1.519685   -0.24409449 -2.6850395 ]&#10;     [-2.4173229   0.5748031  -2.2598424 ]&#10;     [ 0.88976383 -0.35433072 -1.        ]&#10;     ...&#10;     [-2.3385825  -1.8661418  -0.71653545]&#10;     [-1.4566929  -1.1417322   0.8740157 ]&#10;     [-1.2677165  -0.9527559  -1.2204725 ]]&#10;  &#10;    ...&#10;  &#10;    [[-2.496063   -1.503937   -2.4015749 ]&#10;     [-0.984252    0.08661413  0.7322835 ]&#10;     [ 0.6220472   0.1338582  -0.9527559 ]&#10;     ...&#10;     [-0.27559054 -1.3149606  -2.3700786 ]&#10;     [ 0.6692914  -1.2362205  -2.4015749 ]&#10;     [ 0.7480315  -1.976378   -0.8110236 ]]&#10;  &#10;    [[-2.543307   -1.7086614  -0.21259844]&#10;     [-1.0472441  -1.3307086  -1.992126  ]&#10;     [ 0.54330707 -1.1732284   0.27559054]&#10;     ...&#10;     [ 0.3070866  -2.6692915   0.9370079 ]&#10;     [-1.1889764  -2.0866141  -2.4015749 ]&#10;     [-0.4330709   0.77952754 -2.968504  ]]&#10;  &#10;    [[-0.8267716   0.7637795  -0.13385826]&#10;     [-1.2834646  -1.2519685  -0.13385826]&#10;     [-0.7322835  -0.5905512   0.9212599 ]&#10;     ...&#10;     [-0.96850395 -2.3385825  -0.6692914 ]&#10;     [-0.6692914  -0.29133856 -0.35433072]&#10;     [-2.7165356  -2.7165356   0.88976383]]]], but actual [[[[ 0.33858266 -0.78740156 -0.71653545]&#10;     [ 0.92913383  0.68503934 -0.13385826]&#10;     [-0.22047244 -0.33858266  0.88188976]&#10;     ...&#10;     [-0.22834645 -0.6062992   0.11023622]&#10;     [-0.23622048 -0.12598425  0.96062994]&#10;     [ 0.08661418  0.22834645  0.46456692]]&#10;  &#10;    [[-0.06299213 -0.71653545  0.7559055 ]&#10;     [-0.53543305 -0.8582677   0.11811024]&#10;     [ 0.992126   -0.16535433 -0.8582677 ]&#10;     ...&#10;     [ 0.00787402 -0.24409449  0.01574803]&#10;     [ 0.54330707 -0.7637795  -0.8425197 ]&#10;     [-0.7401575   0.14173228 -0.68503934]]&#10;  &#10;    [[-0.25984251  0.37795275 -0.8425197 ]&#10;     [-0.70866144  0.78740156 -0.62992126]&#10;     [ 0.9448819   0.32283464  0.        ]&#10;     ...&#10;     [-0.6692913  -0.43307087  0.14173228]&#10;     [-0.22834645 -0.07086614  0.93700784]&#10;     [-0.13385826  0.02362205 -0.11023622]]&#10;  &#10;    ...&#10;  &#10;    [[-0.7480315  -0.2519685  -0.7007874 ]&#10;     [ 0.00787402  0.54330707  0.86614174]&#10;     [ 0.8110236   0.5669291   0.02362205]&#10;     ...&#10;     [ 0.36220473 -0.15748031 -0.68503934]&#10;     [ 0.8346457  -0.11811024 -0.7007874 ]&#10;     [ 0.87401575 -0.48818898  0.09448819]]&#10;  &#10;    [[-0.77165353 -0.35433072  0.39370078]&#10;     [-0.02362205 -0.16535433 -0.496063  ]&#10;     [ 0.77165353 -0.08661418  0.63779527]&#10;     ...&#10;     [ 0.6535433  -0.8346457   0.96850395]&#10;     [-0.09448819 -0.54330707 -0.7007874 ]&#10;     [ 0.28346455  0.8897638  -0.984252  ]]&#10;  &#10;    [[ 0.08661418  0.88188976  0.43307087]&#10;     [-0.14173228 -0.12598425  0.43307087]&#10;     [ 0.13385826  0.2047244   0.96062994]&#10;     ...&#10;     [ 0.01574803 -0.6692913   0.16535433]&#10;     [ 0.16535433  0.35433072  0.32283464]&#10;     [-0.8582677  -0.8582677   0.9448819 ]]]]. conversion from&#10;   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to&#10;   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed&#10;   imports: import skimage as ski&#10;  conversion function: &#10;   def convert(var):&#10;   return ski.util.img_as_float32(var)&#10;  from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py&#10;assert False&#10; +  where False = is_image_equal(array([[[[-0.32283467, -2.574803  , -2.433071  ],\n         [ 0.85826766,  0.37007868, -1.2677165 ],\n         [-1.44094...,\n         [-0.6692914 , -0.29133856, -0.35433072],\n         [-2.7165356 , -2.7165356 ,  0.88976383]]]], dtype=float32), array([[[[ 0.33858266, -0.78740156, -0.71653545],\n         [ 0.92913383,  0.68503934, -0.13385826],\n         [-0.22047...,\n         [ 0.16535433,  0.35433072,  0.32283464],\n         [-0.8582677 , -0.8582677 ,  0.9448819 ]]]], dtype=float32))">code_generator = &lt;imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f0c97b3e920&gt;

    def test_all_conversion_code_exec_on_cpu(code_generator):
        kg = code_generator.knowledge_graph
        for edge in kg.edges:
            if is_code_exec_on_cpu(edge):
&gt;               assert_exec_of_conversion_code_in_edge(*edge, kg)

tests/test_conversion_code_in_kg.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
target_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
kg = &lt;imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0d1de570d0&gt;

    def assert_exec_of_conversion_code_in_edge(source_metadata, target_metadata, kg):
        edge_data = kg.get_edge_data(source_metadata, target_metadata)
        conversion = edge_data.get('conversion')
        assert conversion is not None, f"No conversion from {source_metadata} to {target_metadata}"
        assert len(conversion) == 2, (f"Expected two elements in the conversions, but got: {conversion} from"
                                      f" {source_metadata} to {target_metadata}")
        assert isinstance(conversion[0], str), (f"Expected the first element of the conversion to be a string, but got:"
                                                f" {conversion[0]} from {source_metadata} to {target_metadata}")
        assert isinstance(conversion[1], str), (f"Expected the second element of the conversion to be a string, but got:"
                                                f" {conversion[1]} from {source_metadata} to {target_metadata}")
        error_message = (f"conversion from\n {source_metadata} to\n {target_metadata} failed\n "
                         f"imports: {conversion[0]}\nconversion function: \n {conversion[1]}\nfrom {edge_data.get('factory')}")
    
        try:
            source_image, target_image = get_input_image_and_expected_output(source_metadata, target_metadata)
            func_name = re.search(r'(?&lt;=def )\w+', conversion[1]).group(0)
    
            scope = {}
            scope.update({'source_image': source_image})
            exec(f"""{conversion[0]}
    {conversion[1]}
    actual_image = {func_name}(source_image)""", scope)
            actual_image = scope.get('actual_image')
        except Exception as e:
            raise AssertionError(f"Failed to execute conversion code from {error_message}") from e
    
&gt;       assert is_image_equal(target_image,
                              actual_image), f'expected {target_image}, but actual {actual_image}. {error_message}'
E       AssertionError: expected [[[[-0.32283467 -2.574803   -2.433071  ]
E            [ 0.85826766  0.37007868 -1.2677165 ]
E            [-1.4409449  -1.6771653   0.7637795 ]
E            ...
E            [-1.4566929  -2.2125983  -0.77952754]
E            [-1.472441   -1.2519685   0.9212599 ]
E            [-0.8267716  -0.54330707 -0.07086617]]
E         
E           [[-1.1259842  -2.433071    0.511811  ]
E            [-2.070866   -2.7165356  -0.7637795 ]
E            [ 0.984252   -1.3307086  -2.7165356 ]
E            ...
E            [-0.984252   -1.488189   -0.96850395]
E            [ 0.08661413 -2.527559   -2.6850395 ]
E            [-2.480315   -0.71653545 -2.3700786 ]]
E         
E           [[-1.519685   -0.24409449 -2.6850395 ]
E            [-2.4173229   0.5748031  -2.2598424 ]
E            [ 0.88976383 -0.35433072 -1.        ]
E            ...
E            [-2.3385825  -1.8661418  -0.71653545]
E            [-1.4566929  -1.1417322   0.8740157 ]
E            [-1.2677165  -0.9527559  -1.2204725 ]]
E         
E           ...
E         
E           [[-2.496063   -1.503937   -2.4015749 ]
E            [-0.984252    0.08661413  0.7322835 ]
E            [ 0.6220472   0.1338582  -0.9527559 ]
E            ...
E            [-0.27559054 -1.3149606  -2.3700786 ]
E            [ 0.6692914  -1.2362205  -2.4015749 ]
E            [ 0.7480315  -1.976378   -0.8110236 ]]
E         
E           [[-2.543307   -1.7086614  -0.21259844]
E            [-1.0472441  -1.3307086  -1.992126  ]
E            [ 0.54330707 -1.1732284   0.27559054]
E            ...
E            [ 0.3070866  -2.6692915   0.9370079 ]
E            [-1.1889764  -2.0866141  -2.4015749 ]
E            [-0.4330709   0.77952754 -2.968504  ]]
E         
E           [[-0.8267716   0.7637795  -0.13385826]
E            [-1.2834646  -1.2519685  -0.13385826]
E            [-0.7322835  -0.5905512   0.9212599 ]
E            ...
E            [-0.96850395 -2.3385825  -0.6692914 ]
E            [-0.6692914  -0.29133856 -0.35433072]
E            [-2.7165356  -2.7165356   0.88976383]]]], but actual [[[[ 0.33858266 -0.78740156 -0.71653545]
E            [ 0.92913383  0.68503934 -0.13385826]
E            [-0.22047244 -0.33858266  0.88188976]
E            ...
E            [-0.22834645 -0.6062992   0.11023622]
E            [-0.23622048 -0.12598425  0.96062994]
E            [ 0.08661418  0.22834645  0.46456692]]
E         
E           [[-0.06299213 -0.71653545  0.7559055 ]
E            [-0.53543305 -0.8582677   0.11811024]
E            [ 0.992126   -0.16535433 -0.8582677 ]
E            ...
E            [ 0.00787402 -0.24409449  0.01574803]
E            [ 0.54330707 -0.7637795  -0.8425197 ]
E            [-0.7401575   0.14173228 -0.68503934]]
E         
E           [[-0.25984251  0.37795275 -0.8425197 ]
E            [-0.70866144  0.78740156 -0.62992126]
E            [ 0.9448819   0.32283464  0.        ]
E            ...
E            [-0.6692913  -0.43307087  0.14173228]
E            [-0.22834645 -0.07086614  0.93700784]
E            [-0.13385826  0.02362205 -0.11023622]]
E         
E           ...
E         
E           [[-0.7480315  -0.2519685  -0.7007874 ]
E            [ 0.00787402  0.54330707  0.86614174]
E            [ 0.8110236   0.5669291   0.02362205]
E            ...
E            [ 0.36220473 -0.15748031 -0.68503934]
E            [ 0.8346457  -0.11811024 -0.7007874 ]
E            [ 0.87401575 -0.48818898  0.09448819]]
E         
E           [[-0.77165353 -0.35433072  0.39370078]
E            [-0.02362205 -0.16535433 -0.496063  ]
E            [ 0.77165353 -0.08661418  0.63779527]
E            ...
E            [ 0.6535433  -0.8346457   0.96850395]
E            [-0.09448819 -0.54330707 -0.7007874 ]
E            [ 0.28346455  0.8897638  -0.984252  ]]
E         
E           [[ 0.08661418  0.88188976  0.43307087]
E            [-0.14173228 -0.12598425  0.43307087]
E            [ 0.13385826  0.2047244   0.96062994]
E            ...
E            [ 0.01574803 -0.6692913   0.16535433]
E            [ 0.16535433  0.35433072  0.32283464]
E            [-0.8582677  -0.8582677   0.9448819 ]]]]. conversion from
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
E          imports: import skimage as ski
E         conversion function: 
E          def convert(var):
E          return ski.util.img_as_float32(var)
E         from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
E       assert False
E        +  where False = is_image_equal(array([[[[-0.32283467, -2.574803  , -2.433071  ],\n         [ 0.85826766,  0.37007868, -1.2677165 ],\n         [-1.44094...,\n         [-0.6692914 , -0.29133856, -0.35433072],\n         [-2.7165356 , -2.7165356 ,  0.88976383]]]], dtype=float32), array([[[[ 0.33858266, -0.78740156, -0.71653545],\n         [ 0.92913383,  0.68503934, -0.13385826],\n         [-0.22047...,\n         [ 0.16535433,  0.35433072,  0.32283464],\n         [-0.8582677 , -0.8582677 ,  0.9448819 ]]]], dtype=float32))

tests/test_conversion_code_in_kg.py:46: AssertionError</failure></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_pytorch_gpu" time="0.000"><skipped type="pytest.skip" message="Test skipped because PyTorch is not installed with CUDA support or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:79: Test skipped because PyTorch is not installed with CUDA support or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_tensorflow_gpu" time="0.000"><skipped type="pytest.skip" message="Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:89: Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_tensorflow_gpu_torch_gpu" time="0.000"><skipped type="pytest.skip" message="Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:99: Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_io" name="test_load_graph_from_file" time="0.001" /><testcase classname="tests.test_io" name="test_load_graph_with_invalid_path" time="0.001" /><testcase classname="tests.test_io" name="test_save_graph_to_file" time="0.005" /><testcase classname="tests.test_io" name="test_save_graph_with_invalid_path" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_knowledge_graph_init" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_add_new_node" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_add_edge" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_edge" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_edge_failure" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_save_to_file" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path" time="0.001"><failure message="KeyError: 'normalized_time_cost'">kg = &lt;imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0c977e5fc0&gt;

    def test_get_shortest_path(kg):
        kg.add_node(new_node)
        kg.add_edge(new_edge[0], new_edge[1], new_edge[2])
    
&gt;       path = kg.get_shortest_path(test_nodes[0], new_node)

tests/test_knowledge_graph.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:65: in get_shortest_path
    path = nx.astar_path(self._graph, encode_metadata(source_metadata), encode_metadata(target_metadata),
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/utils/backends.py:412: in __call__
    return self.orig_func(*args, **kwargs)
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/algorithms/shortest_paths/astar.py:141: in astar_path
    cost = weight(curnode, neighbor, w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0c977e5fc0&gt;
u = 'numpy.ndarray_rgb_channel last_False_uint8_cpu'
v = 'numpy.ndarray_bgr_channel last_False_uint8_cpu'
edge_attributes = {'conversion': ('', 'def convert(var):\n  return var[:, :, ::-1]'), 'factory': None, 'time_cost': inf}

    def cost_function_in_AStar(self, u, v, edge_attributes):
&gt;       time_cost = edge_attributes['normalized_time_cost']
E       KeyError: 'normalized_time_cost'

src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:48: KeyError</failure></testcase><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path_no_path" time="0.001"><failure message="KeyError: 'normalized_time_cost'">kg = &lt;imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0c9747e9b0&gt;

    def test_get_shortest_path_no_path(kg):
&gt;       path = kg.get_shortest_path(test_nodes[2], test_nodes[0])

tests/test_knowledge_graph.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:65: in get_shortest_path
    path = nx.astar_path(self._graph, encode_metadata(source_metadata), encode_metadata(target_metadata),
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/utils/backends.py:412: in __call__
    return self.orig_func(*args, **kwargs)
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/algorithms/shortest_paths/astar.py:141: in astar_path
    cost = weight(curnode, neighbor, w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0c9747e9b0&gt;
u = 'torch.tensor_rgb_channel last_False_uint8_cpu'
v = 'torch.tensor_rgb_channel first_False_uint8_cpu'
edge_attributes = {'conversion': ('', 'def convert(var):\n  return var.permute(2, 0, 1)'), 'factory': None, 'time_cost': inf}

    def cost_function_in_AStar(self, u, v, edge_attributes):
&gt;       time_cost = edge_attributes['normalized_time_cost']
E       KeyError: 'normalized_time_cost'

src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:48: KeyError</failure></testcase><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path_same_node" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_knowledge_graph_str" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_heuristic_function" time="0.001" /><testcase classname="tests.test_metadata" name="test_encode_to_string" time="0.001" /><testcase classname="tests.test_metadata" name="test_decode_to_dict" time="0.001" /><testcase classname="tests.test_metadata" name="test_exact_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_representation_match_no_channel_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_no_representation_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_rgb_bgr_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_empty_candidate_list" time="0.001" /><testcase classname="tests.test_metadata" name="test_one_candidata" time="0.001" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_match_data_repr" time="0.001" /><testcase classname="tests.test_metadata_differ" name="test_one_metadata_missing_data_repr" time="0.001" /><testcase classname="tests.test_metadata_differ" name="test_one_metadata_different_data_repr" time="0.001" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_missing_data_repr" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_different_data_repr" time="0.001" /><testcase classname="tests.test_metadata_differ" name="test_is_differ_value_for_key_true" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_is_differ_value_for_key_false" time="0.000" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_single_value" time="0.005" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_list_values" time="0.001" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_empty" time="0.001" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_none" time="0.001" /><testcase classname="tests.test_py_interface" name="test_get_convert_path" time="0.001"><failure message="KeyError: 'normalized_time_cost'">mock_code_generator = &lt;imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f0c977e1d80&gt;

    def test_get_convert_path(mock_code_generator):
        source_image_desc = {"lib": "numpy"}
        target_image_desc = {"lib": "torch", "image_dtype": 'uint8'}
&gt;       path = get_convert_path(source_image_desc, target_image_desc)

tests/test_py_interface.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/imgdataconvertcodegen/interface_py_api.py:53: in get_convert_path
    return get_convert_path_by_metadata(source_metadata, target_metadata)
src/imgdataconvertcodegen/interface_py_api.py:57: in get_convert_path_by_metadata
    return _code_generator.get_convert_path(source_metadata, target_metadata)
src/imgdataconvertcodegen/code_generator.py:22: in get_convert_path
    return self.knowledge_graph.get_shortest_path(source_metadata, target_metadata)
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:65: in get_shortest_path
    path = nx.astar_path(self._graph, encode_metadata(source_metadata), encode_metadata(target_metadata),
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/utils/backends.py:412: in __call__
    return self.orig_func(*args, **kwargs)
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/algorithms/shortest_paths/astar.py:141: in astar_path
    cost = weight(curnode, neighbor, w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0c977e32e0&gt;
u = 'numpy.ndarray_rgb_channel last_False_uint8_cpu'
v = 'numpy.ndarray_bgr_channel last_False_uint8_cpu'
edge_attributes = {'conversion': ['', 'def convert(var):\n  return var[:, :, ::-1]'], 'factory': None, 'time_cost': inf}

    def cost_function_in_AStar(self, u, v, edge_attributes):
&gt;       time_cost = edge_attributes['normalized_time_cost']
E       KeyError: 'normalized_time_cost'

src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:48: KeyError</failure></testcase><testcase classname="tests.test_py_interface" name="test_get_conversion_code" time="0.001"><failure message="KeyError: 'normalized_time_cost'">mock_code_generator = &lt;imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f0c977df4c0&gt;

    def test_get_conversion_code(mock_code_generator):
        source_image_desc = {"lib": "numpy"}
        target_image_desc = {"lib": "torch", "image_dtype": 'uint8'}
    
&gt;       actual_code = get_conversion_code("source_image", source_image_desc, "target_image", target_image_desc)

tests/test_py_interface.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/imgdataconvertcodegen/interface_py_api.py:42: in get_conversion_code
    return get_conversion_by_metadata(source_var_name, source_metadata, target_var_name, target_metadata)
src/imgdataconvertcodegen/interface_py_api.py:47: in get_conversion_by_metadata
    return _code_generator.get_conversion(source_var_name, source_metadata,
src/imgdataconvertcodegen/code_generator.py:46: in get_conversion
    cvt_path = self.knowledge_graph.get_shortest_path(source_metadata, target_metadata)
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:65: in get_shortest_path
    path = nx.astar_path(self._graph, encode_metadata(source_metadata), encode_metadata(target_metadata),
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/utils/backends.py:412: in __call__
    return self.orig_func(*args, **kwargs)
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/algorithms/shortest_paths/astar.py:141: in astar_path
    cost = weight(curnode, neighbor, w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0c977df5e0&gt;
u = 'numpy.ndarray_rgb_channel last_False_uint8_cpu'
v = 'numpy.ndarray_bgr_channel last_False_uint8_cpu'
edge_attributes = {'conversion': ['', 'def convert(var):\n  return var[:, :, ::-1]'], 'factory': None, 'time_cost': inf}

    def cost_function_in_AStar(self, u, v, edge_attributes):
&gt;       time_cost = edge_attributes['normalized_time_cost']
E       KeyError: 'normalized_time_cost'

src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:48: KeyError</failure></testcase><testcase classname="tests.test_util" name="test_remove_intermediate_functon_call" time="0.001" /><testcase classname="tests.test_util" name="test_extract_func_body_fail" time="0.001" /><testcase classname="tests.test_util" name="test_func_obj_to_str_function" time="0.001" /><testcase classname="tests.test_util" name="test_exclude_key_from_list" time="0.001" /></testsuite></testsuites>