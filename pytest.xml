<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="3" tests="52" time="28.683" timestamp="2024-04-02T14:17:22.198202" hostname="fv-az1756-20"><testcase classname="tests.test_code_generation" name="test_convert_code_generator_init" time="0.002" /><testcase classname="tests.test_code_generation" name="test_knowledge_graph_property" time="0.001" /><testcase classname="tests.test_code_generation" name="test_conversion_path" time="0.001" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_no_path" time="0.001" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_same_type" time="0.001" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_multiple_steps" time="0.002" /><testcase classname="tests.test_code_generation" name="test_generate_conversion_using_cache" time="0.001" /><testcase classname="tests.test_conversion_code_execution" name="test_code_generation_using_metadata" time="0.001" /><testcase classname="tests.test_conversion_code_in_kg" name="test_all_conversion_code_exec_on_cpu" time="10.253"><failure message="AssertionError: expected [[[[-2.7165356  -2.448819   -0.5748031 ]&#10;     [-0.96850395 -0.3385827  -1.1889764 ]&#10;     [-0.08661419 -2.8582678  -1.6771653 ]&#10;     ...&#10;     [ 0.90551186  0.4330709   0.14960635]&#10;     [-1.3307086   0.7007874   0.16535437]&#10;     [-0.7480315   0.29133856 -1.3307086 ]]&#10;  &#10;    [[-1.031496   -1.7874016   0.7007874 ]&#10;     [-2.7322836  -2.511811   -1.8661418 ]&#10;     [-2.7322836  -0.7637795   0.6692914 ]&#10;     ...&#10;     [-1.4409449   0.5748031  -2.559055  ]&#10;     [-0.00787401 -1.7086614  -1.031496  ]&#10;     [ 0.9370079  -0.02362204 -3.        ]]&#10;  &#10;    [[-1.0472441  -0.96850395 -2.9212599 ]&#10;     [-0.496063   -1.2834646  -1.3307086 ]&#10;     [-0.05511808 -0.37007874  0.3228346 ]&#10;     ...&#10;     [-0.96850395  0.7637795  -1.5669291 ]&#10;     [-0.96850395 -0.24409449 -0.77952754]&#10;     [-0.511811    0.21259844 -1.015748  ]]&#10;  &#10;    ...&#10;  &#10;    [[-1.3937008   0.27559054 -2.7637796 ]&#10;     [ 0.8110236   0.6850394   0.984252  ]&#10;     [-0.5748031  -0.02362204 -1.8976378 ]&#10;     ...&#10;     [-1.5826771   0.85826766 -1.535433  ]&#10;     [ 0.52755904  0.8110236   0.984252  ]&#10;     [-2.6062992  -2.1653543   0.00787401]]&#10;  &#10;    [[-1.0944881   0.7007874  -0.7322835 ]&#10;     [ 0.79527557 -1.4409449  -0.25984251]&#10;     [-2.3543305  -1.015748    0.9370079 ]&#10;     ...&#10;     [-1.7716535  -0.29133856  0.19685042]&#10;     [-1.535433   -2.1338582  -2.3070865 ]&#10;     [ 0.5748031  -1.1417322  -0.11811024]]&#10;  &#10;    [[-0.05511808 -1.8346457  -2.2913384 ]&#10;     [ 0.85826766  0.10236216 -2.055118  ]&#10;     [-1.3622048  -1.031496   -0.8110236 ]&#10;     ...&#10;     [ 0.07086611 -0.77952754 -2.3858268 ]&#10;     [-0.46456695 -1.4409449  -2.448819  ]&#10;     [-2.8110237  -2.7007875   0.60629916]]]], but actual [[[[-0.8582677  -0.72440946  0.21259843]&#10;     [ 0.01574803  0.33070865 -0.09448819]&#10;     [ 0.4566929  -0.92913383 -0.33858266]&#10;     ...&#10;     [ 0.9527559   0.71653545  0.5748032 ]&#10;     [-0.16535433  0.8503937   0.5826772 ]&#10;     [ 0.12598425  0.6456693  -0.16535433]]&#10;  &#10;    [[-0.01574803 -0.39370078  0.8503937 ]&#10;     [-0.86614174 -0.7559055  -0.43307087]&#10;     [-0.86614174  0.11811024  0.8346457 ]&#10;     ...&#10;     [-0.22047244  0.78740156 -0.77952754]&#10;     [ 0.496063   -0.35433072 -0.01574803]&#10;     [ 0.96850395  0.48818898 -1.        ]]&#10;  &#10;    [[-0.02362205  0.01574803 -0.96062994]&#10;     [ 0.2519685  -0.14173228 -0.16535433]&#10;     [ 0.47244096  0.31496063  0.6614173 ]&#10;     ...&#10;     [ 0.01574803  0.88188976 -0.28346455]&#10;     [ 0.01574803  0.37795275  0.11023622]&#10;     [ 0.24409449  0.6062992  -0.00787402]]&#10;  &#10;    ...&#10;  &#10;    [[-0.19685039  0.63779527 -0.88188976]&#10;     [ 0.9055118   0.8425197   0.992126  ]&#10;     [ 0.21259843  0.48818898 -0.4488189 ]&#10;     ...&#10;     [-0.2913386   0.92913383 -0.26771653]&#10;     [ 0.7637795   0.9055118   0.992126  ]&#10;     [-0.8031496  -0.5826772   0.503937  ]]&#10;  &#10;    [[-0.04724409  0.8503937   0.13385826]&#10;     [ 0.8976378  -0.22047244  0.37007874]&#10;     [-0.6771653  -0.00787402  0.96850395]&#10;     ...&#10;     [-0.38582677  0.35433072  0.5984252 ]&#10;     [-0.26771653 -0.5669291  -0.6535433 ]&#10;     [ 0.78740156 -0.07086614  0.44094488]]&#10;  &#10;    [[ 0.47244096 -0.41732284 -0.6456693 ]&#10;     [ 0.92913383  0.5511811  -0.52755904]&#10;     [-0.18110237 -0.01574803  0.09448819]&#10;     ...&#10;     [ 0.53543305  0.11023622 -0.6929134 ]&#10;     [ 0.26771653 -0.22047244 -0.72440946]&#10;     [-0.9055118  -0.8503937   0.8031496 ]]]]. conversion from&#10;   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to&#10;   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed&#10;   imports: import skimage as ski&#10;  conversion function: &#10;   def convert(var):&#10;   return ski.util.img_as_float32(var)&#10;  from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py&#10;assert False&#10; +  where False = is_image_equal(array([[[[-2.7165356 , -2.448819  , -0.5748031 ],\n         [-0.96850395, -0.3385827 , -1.1889764 ],\n         [-0.08661...,\n         [-0.46456695, -1.4409449 , -2.448819  ],\n         [-2.8110237 , -2.7007875 ,  0.60629916]]]], dtype=float32), array([[[[-0.8582677 , -0.72440946,  0.21259843],\n         [ 0.01574803,  0.33070865, -0.09448819],\n         [ 0.45669...,\n         [ 0.26771653, -0.22047244, -0.72440946],\n         [-0.9055118 , -0.8503937 ,  0.8031496 ]]]], dtype=float32))">code_generator = &lt;imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f03225a13c0&gt;

    def test_all_conversion_code_exec_on_cpu(code_generator):
        kg = code_generator.knowledge_graph
        for edge in kg.edges:
            if is_code_exec_on_cpu(edge):
&gt;               assert_exec_of_conversion_code_in_edge(*edge, kg)

tests/test_conversion_code_in_kg.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
target_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
kg = &lt;imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f03a074b070&gt;

    def assert_exec_of_conversion_code_in_edge(source_metadata, target_metadata, kg):
        edge_data = kg.get_edge_data(source_metadata, target_metadata)
        conversion = edge_data.get('conversion')
        assert conversion is not None, f"No conversion from {source_metadata} to {target_metadata}"
        assert len(conversion) == 2, (f"Expected two elements in the conversions, but got: {conversion} from"
                                      f" {source_metadata} to {target_metadata}")
        assert isinstance(conversion[0], str), (f"Expected the first element of the conversion to be a string, but got:"
                                                f" {conversion[0]} from {source_metadata} to {target_metadata}")
        assert isinstance(conversion[1], str), (f"Expected the second element of the conversion to be a string, but got:"
                                                f" {conversion[1]} from {source_metadata} to {target_metadata}")
        error_message = (f"conversion from\n {source_metadata} to\n {target_metadata} failed\n "
                         f"imports: {conversion[0]}\nconversion function: \n {conversion[1]}\nfrom {edge_data.get('factory')}")
    
        try:
            source_image, target_image = get_input_image_and_expected_output(source_metadata, target_metadata)
            func_name = re.search(r'(?&lt;=def )\w+', conversion[1]).group(0)
    
            scope = {}
            scope.update({'source_image': source_image})
            exec(f"""{conversion[0]}
    {conversion[1]}
    actual_image = {func_name}(source_image)""", scope)
            actual_image = scope.get('actual_image')
        except Exception as e:
            raise AssertionError(f"Failed to execute conversion code from {error_message}") from e
    
&gt;       assert is_image_equal(target_image,
                              actual_image), f'expected {target_image}, but actual {actual_image}. {error_message}'
E       AssertionError: expected [[[[-2.7165356  -2.448819   -0.5748031 ]
E            [-0.96850395 -0.3385827  -1.1889764 ]
E            [-0.08661419 -2.8582678  -1.6771653 ]
E            ...
E            [ 0.90551186  0.4330709   0.14960635]
E            [-1.3307086   0.7007874   0.16535437]
E            [-0.7480315   0.29133856 -1.3307086 ]]
E         
E           [[-1.031496   -1.7874016   0.7007874 ]
E            [-2.7322836  -2.511811   -1.8661418 ]
E            [-2.7322836  -0.7637795   0.6692914 ]
E            ...
E            [-1.4409449   0.5748031  -2.559055  ]
E            [-0.00787401 -1.7086614  -1.031496  ]
E            [ 0.9370079  -0.02362204 -3.        ]]
E         
E           [[-1.0472441  -0.96850395 -2.9212599 ]
E            [-0.496063   -1.2834646  -1.3307086 ]
E            [-0.05511808 -0.37007874  0.3228346 ]
E            ...
E            [-0.96850395  0.7637795  -1.5669291 ]
E            [-0.96850395 -0.24409449 -0.77952754]
E            [-0.511811    0.21259844 -1.015748  ]]
E         
E           ...
E         
E           [[-1.3937008   0.27559054 -2.7637796 ]
E            [ 0.8110236   0.6850394   0.984252  ]
E            [-0.5748031  -0.02362204 -1.8976378 ]
E            ...
E            [-1.5826771   0.85826766 -1.535433  ]
E            [ 0.52755904  0.8110236   0.984252  ]
E            [-2.6062992  -2.1653543   0.00787401]]
E         
E           [[-1.0944881   0.7007874  -0.7322835 ]
E            [ 0.79527557 -1.4409449  -0.25984251]
E            [-2.3543305  -1.015748    0.9370079 ]
E            ...
E            [-1.7716535  -0.29133856  0.19685042]
E            [-1.535433   -2.1338582  -2.3070865 ]
E            [ 0.5748031  -1.1417322  -0.11811024]]
E         
E           [[-0.05511808 -1.8346457  -2.2913384 ]
E            [ 0.85826766  0.10236216 -2.055118  ]
E            [-1.3622048  -1.031496   -0.8110236 ]
E            ...
E            [ 0.07086611 -0.77952754 -2.3858268 ]
E            [-0.46456695 -1.4409449  -2.448819  ]
E            [-2.8110237  -2.7007875   0.60629916]]]], but actual [[[[-0.8582677  -0.72440946  0.21259843]
E            [ 0.01574803  0.33070865 -0.09448819]
E            [ 0.4566929  -0.92913383 -0.33858266]
E            ...
E            [ 0.9527559   0.71653545  0.5748032 ]
E            [-0.16535433  0.8503937   0.5826772 ]
E            [ 0.12598425  0.6456693  -0.16535433]]
E         
E           [[-0.01574803 -0.39370078  0.8503937 ]
E            [-0.86614174 -0.7559055  -0.43307087]
E            [-0.86614174  0.11811024  0.8346457 ]
E            ...
E            [-0.22047244  0.78740156 -0.77952754]
E            [ 0.496063   -0.35433072 -0.01574803]
E            [ 0.96850395  0.48818898 -1.        ]]
E         
E           [[-0.02362205  0.01574803 -0.96062994]
E            [ 0.2519685  -0.14173228 -0.16535433]
E            [ 0.47244096  0.31496063  0.6614173 ]
E            ...
E            [ 0.01574803  0.88188976 -0.28346455]
E            [ 0.01574803  0.37795275  0.11023622]
E            [ 0.24409449  0.6062992  -0.00787402]]
E         
E           ...
E         
E           [[-0.19685039  0.63779527 -0.88188976]
E            [ 0.9055118   0.8425197   0.992126  ]
E            [ 0.21259843  0.48818898 -0.4488189 ]
E            ...
E            [-0.2913386   0.92913383 -0.26771653]
E            [ 0.7637795   0.9055118   0.992126  ]
E            [-0.8031496  -0.5826772   0.503937  ]]
E         
E           [[-0.04724409  0.8503937   0.13385826]
E            [ 0.8976378  -0.22047244  0.37007874]
E            [-0.6771653  -0.00787402  0.96850395]
E            ...
E            [-0.38582677  0.35433072  0.5984252 ]
E            [-0.26771653 -0.5669291  -0.6535433 ]
E            [ 0.78740156 -0.07086614  0.44094488]]
E         
E           [[ 0.47244096 -0.41732284 -0.6456693 ]
E            [ 0.92913383  0.5511811  -0.52755904]
E            [-0.18110237 -0.01574803  0.09448819]
E            ...
E            [ 0.53543305  0.11023622 -0.6929134 ]
E            [ 0.26771653 -0.22047244 -0.72440946]
E            [-0.9055118  -0.8503937   0.8031496 ]]]]. conversion from
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
E          imports: import skimage as ski
E         conversion function: 
E          def convert(var):
E          return ski.util.img_as_float32(var)
E         from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
E       assert False
E        +  where False = is_image_equal(array([[[[-2.7165356 , -2.448819  , -0.5748031 ],\n         [-0.96850395, -0.3385827 , -1.1889764 ],\n         [-0.08661...,\n         [-0.46456695, -1.4409449 , -2.448819  ],\n         [-2.8110237 , -2.7007875 ,  0.60629916]]]], dtype=float32), array([[[[-0.8582677 , -0.72440946,  0.21259843],\n         [ 0.01574803,  0.33070865, -0.09448819],\n         [ 0.45669...,\n         [ 0.26771653, -0.22047244, -0.72440946],\n         [-0.9055118 , -0.8503937 ,  0.8031496 ]]]], dtype=float32))

tests/test_conversion_code_in_kg.py:46: AssertionError</failure></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_pytorch_gpu" time="0.000"><skipped type="pytest.skip" message="Test skipped because PyTorch is not installed with CUDA support or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:79: Test skipped because PyTorch is not installed with CUDA support or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_tensorflow_gpu" time="0.000"><skipped type="pytest.skip" message="Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:89: Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_conversion_code_in_kg" name="test_conversion_code_exec_using_tensorflow_gpu_torch_gpu" time="0.000"><skipped type="pytest.skip" message="Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.">/home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/tests/test_conversion_code_in_kg.py:99: Test skipped because TensorFlow not configured for GPU acceleration or no CUDA-compatible GPU is available.</skipped></testcase><testcase classname="tests.test_io" name="test_load_graph_from_file" time="0.001" /><testcase classname="tests.test_io" name="test_load_graph_with_invalid_path" time="0.001" /><testcase classname="tests.test_io" name="test_save_graph_to_file" time="0.005" /><testcase classname="tests.test_io" name="test_save_graph_with_invalid_path" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_knowledge_graph_init" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_add_new_node" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_add_edge" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_edge" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_edge_failure" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_save_to_file" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path_no_path" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_get_shortest_path_same_node" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_knowledge_graph_str" time="0.001" /><testcase classname="tests.test_knowledge_graph" name="test_heuristic_function" time="0.001" /><testcase classname="tests.test_metadata" name="test_encode_to_string" time="0.001" /><testcase classname="tests.test_metadata" name="test_decode_to_dict" time="0.001" /><testcase classname="tests.test_metadata" name="test_exact_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_representation_match_no_channel_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_no_representation_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_rgb_bgr_match" time="0.001" /><testcase classname="tests.test_metadata" name="test_empty_candidate_list" time="0.001" /><testcase classname="tests.test_metadata" name="test_one_candidata" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_match_data_repr" time="0.001" /><testcase classname="tests.test_metadata_differ" name="test_one_metadata_missing_data_repr" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_one_metadata_different_data_repr" time="0.001" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_missing_data_repr" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_both_metadata_different_data_repr" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_is_differ_value_for_key_true" time="0.000" /><testcase classname="tests.test_metadata_differ" name="test_is_differ_value_for_key_false" time="0.000" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_single_value" time="0.005" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_list_values" time="0.001" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_empty" time="0.001" /><testcase classname="tests.test_py_interface" name="test_add_conversion_for_metadata_pair_none" time="0.001" /><testcase classname="tests.test_py_interface" name="test_get_convert_path" time="0.001" /><testcase classname="tests.test_py_interface" name="test_get_conversion_code" time="0.001" /><testcase classname="tests.test_util" name="test_remove_intermediate_functon_call" time="0.001" /><testcase classname="tests.test_util" name="test_extract_func_body_fail" time="0.001" /><testcase classname="tests.test_util" name="test_func_obj_to_str_function" time="0.001" /><testcase classname="tests.test_util" name="test_exclude_key_from_list" time="0.001" /></testsuite></testsuites>