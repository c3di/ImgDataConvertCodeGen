============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-8.1.1, pluggy-1.4.0
rootdir: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen
configfile: pyproject.toml
plugins: cov-5.0.0
collected 52 items

tests/test_code_generation.py .......                                    [ 13%]
tests/test_conversion_code_execution.py .                                [ 15%]
tests/test_conversion_code_in_kg.py Fsss                                 [ 23%]
tests/test_io.py ....                                                    [ 30%]
tests/test_knowledge_graph.py ...........                                [ 51%]
tests/test_metadata.py ........                                          [ 67%]
tests/test_metadata_differ.py .......                                    [ 80%]
tests/test_py_interface.py ......                                        [ 92%]
tests/test_util.py ....                                                  [100%]

=================================== FAILURES ===================================
_____________________ test_all_conversion_code_exec_on_cpu _____________________

code_generator = <imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f0bd71a4880>

    def test_all_conversion_code_exec_on_cpu(code_generator):
        kg = code_generator.knowledge_graph
        for edge in kg.edges:
            if is_code_exec_on_cpu(edge):
>               assert_exec_of_conversion_code_in_edge(*edge, kg)

tests/test_conversion_code_in_kg.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
target_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
kg = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0c5d4570d0>

    def assert_exec_of_conversion_code_in_edge(source_metadata, target_metadata, kg):
        edge_data = kg.get_edge_data(source_metadata, target_metadata)
        conversion = edge_data.get('conversion')
        assert conversion is not None, f"No conversion from {source_metadata} to {target_metadata}"
        assert len(conversion) == 2, (f"Expected two elements in the conversions, but got: {conversion} from"
                                      f" {source_metadata} to {target_metadata}")
        assert isinstance(conversion[0], str), (f"Expected the first element of the conversion to be a string, but got:"
                                                f" {conversion[0]} from {source_metadata} to {target_metadata}")
        assert isinstance(conversion[1], str), (f"Expected the second element of the conversion to be a string, but got:"
                                                f" {conversion[1]} from {source_metadata} to {target_metadata}")
        error_message = (f"conversion from\n {source_metadata} to\n {target_metadata} failed\n "
                         f"imports: {conversion[0]}\nconversion function: \n {conversion[1]}\nfrom {edge_data.get('factory')}")
    
        try:
            source_image, target_image = get_input_image_and_expected_output(source_metadata, target_metadata)
            func_name = re.search(r'(?<=def )\w+', conversion[1]).group(0)
    
            scope = {}
            scope.update({'source_image': source_image})
            exec(f"""{conversion[0]}
    {conversion[1]}
    actual_image = {func_name}(source_image)""", scope)
            actual_image = scope.get('actual_image')
        except Exception as e:
            raise AssertionError(f"Failed to execute conversion code from {error_message}") from e
    
>       assert is_image_equal(target_image,
                              actual_image), f'expected {target_image}, but actual {actual_image}. {error_message}'
E       AssertionError: expected [[[[ 0.54330707 -2.574803   -0.16535431]
E            [ 0.3070866  -2.2913384  -0.7637795 ]
E            [-0.07086617 -2.0866141  -0.8267716 ]
E            ...
E            [ 0.88976383 -0.5905512   0.511811  ]
E            [-1.0629921  -2.3543305  -2.1023622 ]
E            [-0.14960629 -2.4173229  -0.63779527]]
E         
E           [[-0.62204725  0.511811    0.96850395]
E            [-1.6299212  -2.7322836  -2.055118  ]
E            [-2.023622   -1.4094489  -2.3228345 ]
E            ...
E            [-0.71653545 -0.03937006 -0.511811  ]
E            [-1.015748    0.22834647  0.24409449]
E            [ 0.52755904 -2.6850395  -2.3228345 ]]
E         
E           [[-0.8110236  -0.21259844 -0.32283467]
E            [ 0.90551186 -0.79527557 -0.00787401]
E            [ 0.24409449 -1.         -1.2677165 ]
E            ...
E            [ 0.88976383  0.6850394  -0.32283467]
E            [-1.5984251  -2.3385825  -1.7716535 ]
E            [ 0.38582683 -2.6535435   0.6692914 ]]
E         
E           ...
E         
E           [[ 0.84251964  0.77952754  0.40157485]
E            [-1.472441    0.08661413 -0.08661419]
E            [-1.5984251  -1.2992126  -2.6535435 ]
E            ...
E            [ 0.9370079  -2.3070865  -2.7165356 ]
E            [-0.63779527 -2.070866   -0.48031497]
E            [-0.7322835  -1.8346457   0.02362204]]
E         
E           [[-2.968504    0.9370079  -0.9370079 ]
E            [-2.6535435  -0.16535431  0.11811018]
E            [-1.3779528   0.71653545 -1.7401575 ]
E            ...
E            [-0.21259844 -2.6535435   1.        ]
E            [-1.6929134   0.7322835  -1.519685  ]
E            [-1.5511811  -1.4566929  -0.9212598 ]]
E         
E           [[-0.511811    0.7480315  -1.9133859 ]
E            [-2.7165356   0.8740157  -2.7480316 ]
E            [-2.2125983  -2.543307    0.77952754]
E            ...
E            [ 0.65354335 -2.6377952  -1.3779528 ]
E            [-1.1732284   0.27559054 -1.535433  ]
E            [ 0.40157485 -0.3070866  -1.9291339 ]]]], but actual [[[[ 0.77165353 -0.78740156  0.41732284]
E            [ 0.6535433  -0.6456693   0.11811024]
E            [ 0.46456692 -0.54330707  0.08661418]
E            ...
E            [ 0.9448819   0.2047244   0.7559055 ]
E            [-0.03149606 -0.6771653  -0.5511811 ]
E            [ 0.42519686 -0.70866144  0.18110237]]
E         
E           [[ 0.18897638  0.7559055   0.984252  ]
E            [-0.31496063 -0.86614174 -0.52755904]
E            [-0.511811   -0.2047244  -0.6614173 ]
E            ...
E            [ 0.14173228  0.48031497  0.24409449]
E            [-0.00787402  0.61417323  0.62204725]
E            [ 0.7637795  -0.8425197  -0.6614173 ]]
E         
E           [[ 0.09448819  0.39370078  0.33858266]
E            [ 0.9527559   0.1023622   0.496063  ]
E            [ 0.62204725  0.         -0.13385826]
E            ...
E            [ 0.9448819   0.8425197   0.33858266]
E            [-0.2992126  -0.6692913  -0.38582677]
E            [ 0.6929134  -0.8267717   0.8346457 ]]
E         
E           ...
E         
E           [[ 0.9212598   0.8897638   0.7007874 ]
E            [-0.23622048  0.54330707  0.4566929 ]
E            [-0.2992126  -0.1496063  -0.8267717 ]
E            ...
E            [ 0.96850395 -0.6535433  -0.8582677 ]
E            [ 0.18110237 -0.53543305  0.25984251]
E            [ 0.13385826 -0.41732284  0.511811  ]]
E         
E           [[-0.984252    0.96850395  0.03149606]
E            [-0.8267717   0.41732284  0.5590551 ]
E            [-0.18897638  0.8582677  -0.37007874]
E            ...
E            [ 0.39370078 -0.8267717   1.        ]
E            [-0.3464567   0.86614174 -0.25984251]
E            [-0.27559054 -0.22834645  0.03937008]]
E         
E           [[ 0.24409449  0.87401575 -0.4566929 ]
E            [-0.8582677   0.93700784 -0.87401575]
E            [-0.6062992  -0.77165353  0.8897638 ]
E            ...
E            [ 0.8267717  -0.8188976  -0.18897638]
E            [-0.08661418  0.63779527 -0.26771653]
E            [ 0.7007874   0.3464567  -0.46456692]]]]. conversion from
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
E          imports: import skimage as ski
E         conversion function: 
E          def convert(var):
E          return ski.util.img_as_float32(var)
E         from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
E       assert False
E        +  where False = is_image_equal(array([[[[ 0.54330707, -2.574803  , -0.16535431],\n         [ 0.3070866 , -2.2913384 , -0.7637795 ],\n         [-0.07086...,\n         [-1.1732284 ,  0.27559054, -1.535433  ],\n         [ 0.40157485, -0.3070866 , -1.9291339 ]]]], dtype=float32), array([[[[ 0.77165353, -0.78740156,  0.41732284],\n         [ 0.6535433 , -0.6456693 ,  0.11811024],\n         [ 0.46456...,\n         [-0.08661418,  0.63779527, -0.26771653],\n         [ 0.7007874 ,  0.3464567 , -0.46456692]]]], dtype=float32))

tests/test_conversion_code_in_kg.py:46: AssertionError
- generated xml file: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/pytest.xml -

---------- coverage: platform linux, python 3.10.14-final-0 ----------
Name                                                                        Stmts   Miss Branch BrPart  Cover   Missing
-----------------------------------------------------------------------------------------------------------------------
src/imgdataconvertcodegen/end_metadata_mapper.py                              131     90     52      7    26%   39, 41, 55, 67, 82-100, 112-125, 137-151, 163-177, 190-221, 238, 253, 259, 273-292, 304-336
src/imgdataconvertcodegen/image_data.py                                       226     13    142      9    93%   61, 69, 91, 118->120, 130, 302, 328-329, 338, 345-349
src/imgdataconvertcodegen/interface_cmd.py                                     11     11      0      0     0%   12-38
src/imgdataconvertcodegen/interface_py_api.py                                  25      4      0      0    84%   61-62, 66-67
src/imgdataconvertcodegen/knowledge_graph_construction/constructor.py         100      9     28      2    91%   37-38, 42, 81, 119-121, 124-125
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py      52      6     10      1    89%   50-57
src/imgdataconvertcodegen/knowledge_graph_construction/metedata/util.py        26      0     22      2    96%   24->27, 25->24
-----------------------------------------------------------------------------------------------------------------------
TOTAL                                                                        1051    133    488     21    87%

15 files skipped due to complete coverage.

=========================== short test summary info ============================
FAILED tests/test_conversion_code_in_kg.py::test_all_conversion_code_exec_on_cpu - AssertionError: expected [[[[ 0.54330707 -2.574803   -0.16535431]
     [ 0.3070866  -2.2913384  -0.7637795 ]
     [-0.07086617 -2.0866141  -0.8267716 ]
     ...
     [ 0.88976383 -0.5905512   0.511811  ]
     [-1.0629921  -2.3543305  -2.1023622 ]
     [-0.14960629 -2.4173229  -0.63779527]]
  
    [[-0.62204725  0.511811    0.96850395]
     [-1.6299212  -2.7322836  -2.055118  ]
     [-2.023622   -1.4094489  -2.3228345 ]
     ...
     [-0.71653545 -0.03937006 -0.511811  ]
     [-1.015748    0.22834647  0.24409449]
     [ 0.52755904 -2.6850395  -2.3228345 ]]
  
    [[-0.8110236  -0.21259844 -0.32283467]
     [ 0.90551186 -0.79527557 -0.00787401]
     [ 0.24409449 -1.         -1.2677165 ]
     ...
     [ 0.88976383  0.6850394  -0.32283467]
     [-1.5984251  -2.3385825  -1.7716535 ]
     [ 0.38582683 -2.6535435   0.6692914 ]]
  
    ...
  
    [[ 0.84251964  0.77952754  0.40157485]
     [-1.472441    0.08661413 -0.08661419]
     [-1.5984251  -1.2992126  -2.6535435 ]
     ...
     [ 0.9370079  -2.3070865  -2.7165356 ]
     [-0.63779527 -2.070866   -0.48031497]
     [-0.7322835  -1.8346457   0.02362204]]
  
    [[-2.968504    0.9370079  -0.9370079 ]
     [-2.6535435  -0.16535431  0.11811018]
     [-1.3779528   0.71653545 -1.7401575 ]
     ...
     [-0.21259844 -2.6535435   1.        ]
     [-1.6929134   0.7322835  -1.519685  ]
     [-1.5511811  -1.4566929  -0.9212598 ]]
  
    [[-0.511811    0.7480315  -1.9133859 ]
     [-2.7165356   0.8740157  -2.7480316 ]
     [-2.2125983  -2.543307    0.77952754]
     ...
     [ 0.65354335 -2.6377952  -1.3779528 ]
     [-1.1732284   0.27559054 -1.535433  ]
     [ 0.40157485 -0.3070866  -1.9291339 ]]]], but actual [[[[ 0.77165353 -0.78740156  0.41732284]
     [ 0.6535433  -0.6456693   0.11811024]
     [ 0.46456692 -0.54330707  0.08661418]
     ...
     [ 0.9448819   0.2047244   0.7559055 ]
     [-0.03149606 -0.6771653  -0.5511811 ]
     [ 0.42519686 -0.70866144  0.18110237]]
  
    [[ 0.18897638  0.7559055   0.984252  ]
     [-0.31496063 -0.86614174 -0.52755904]
     [-0.511811   -0.2047244  -0.6614173 ]
     ...
     [ 0.14173228  0.48031497  0.24409449]
     [-0.00787402  0.61417323  0.62204725]
     [ 0.7637795  -0.8425197  -0.6614173 ]]
  
    [[ 0.09448819  0.39370078  0.33858266]
     [ 0.9527559   0.1023622   0.496063  ]
     [ 0.62204725  0.         -0.13385826]
     ...
     [ 0.9448819   0.8425197   0.33858266]
     [-0.2992126  -0.6692913  -0.38582677]
     [ 0.6929134  -0.8267717   0.8346457 ]]
  
    ...
  
    [[ 0.9212598   0.8897638   0.7007874 ]
     [-0.23622048  0.54330707  0.4566929 ]
     [-0.2992126  -0.1496063  -0.8267717 ]
     ...
     [ 0.96850395 -0.6535433  -0.8582677 ]
     [ 0.18110237 -0.53543305  0.25984251]
     [ 0.13385826 -0.41732284  0.511811  ]]
  
    [[-0.984252    0.96850395  0.03149606]
     [-0.8267717   0.41732284  0.5590551 ]
     [-0.18897638  0.8582677  -0.37007874]
     ...
     [ 0.39370078 -0.8267717   1.        ]
     [-0.3464567   0.86614174 -0.25984251]
     [-0.27559054 -0.22834645  0.03937008]]
  
    [[ 0.24409449  0.87401575 -0.4566929 ]
     [-0.8582677   0.93700784 -0.87401575]
     [-0.6062992  -0.77165353  0.8897638 ]
     ...
     [ 0.8267717  -0.8188976  -0.18897638]
     [-0.08661418  0.63779527 -0.26771653]
     [ 0.7007874   0.3464567  -0.46456692]]]]. conversion from
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
   imports: import skimage as ski
  conversion function: 
   def convert(var):
   return ski.util.img_as_float32(var)
  from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
assert False
 +  where False = is_image_equal(array([[[[ 0.54330707, -2.574803  , -0.16535431],\n         [ 0.3070866 , -2.2913384 , -0.7637795 ],\n         [-0.07086...,\n         [-1.1732284 ,  0.27559054, -1.535433  ],\n         [ 0.40157485, -0.3070866 , -1.9291339 ]]]], dtype=float32), array([[[[ 0.77165353, -0.78740156,  0.41732284],\n         [ 0.6535433 , -0.6456693 ,  0.11811024],\n         [ 0.46456...,\n         [-0.08661418,  0.63779527, -0.26771653],\n         [ 0.7007874 ,  0.3464567 , -0.46456692]]]], dtype=float32))
=================== 1 failed, 48 passed, 3 skipped in 30.10s ===================
