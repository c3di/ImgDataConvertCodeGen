============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-8.1.1, pluggy-1.4.0
rootdir: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen
configfile: pyproject.toml
plugins: cov-5.0.0
collected 52 items

tests/test_code_generation.py .......                                    [ 13%]
tests/test_conversion_code_execution.py .                                [ 15%]
tests/test_conversion_code_in_kg.py Fsss                                 [ 23%]
tests/test_io.py ....                                                    [ 30%]
tests/test_knowledge_graph.py ...........                                [ 51%]
tests/test_metadata.py ........                                          [ 67%]
tests/test_metadata_differ.py .......                                    [ 80%]
tests/test_py_interface.py ......                                        [ 92%]
tests/test_util.py ....                                                  [100%]

=================================== FAILURES ===================================
_____________________ test_all_conversion_code_exec_on_cpu _____________________

code_generator = <imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f11656e2b90>

    def test_all_conversion_code_exec_on_cpu(code_generator):
        kg = code_generator.knowledge_graph
        for edge in kg.edges:
            if is_code_exec_on_cpu(edge):
>               assert_exec_of_conversion_code_in_edge(*edge, kg)

tests/test_conversion_code_in_kg.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
target_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
kg = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f11db94f0a0>

    def assert_exec_of_conversion_code_in_edge(source_metadata, target_metadata, kg):
        edge_data = kg.get_edge_data(source_metadata, target_metadata)
        conversion = edge_data.get('conversion')
        assert conversion is not None, f"No conversion from {source_metadata} to {target_metadata}"
        assert len(conversion) == 2, (f"Expected two elements in the conversions, but got: {conversion} from"
                                      f" {source_metadata} to {target_metadata}")
        assert isinstance(conversion[0], str), (f"Expected the first element of the conversion to be a string, but got:"
                                                f" {conversion[0]} from {source_metadata} to {target_metadata}")
        assert isinstance(conversion[1], str), (f"Expected the second element of the conversion to be a string, but got:"
                                                f" {conversion[1]} from {source_metadata} to {target_metadata}")
        error_message = (f"conversion from\n {source_metadata} to\n {target_metadata} failed\n "
                         f"imports: {conversion[0]}\nconversion function: \n {conversion[1]}\nfrom {edge_data.get('factory')}")
    
        try:
            source_image, target_image = get_input_image_and_expected_output(source_metadata, target_metadata)
            func_name = re.search(r'(?<=def )\w+', conversion[1]).group(0)
    
            scope = {}
            scope.update({'source_image': source_image})
            exec(f"""{conversion[0]}
    {conversion[1]}
    actual_image = {func_name}(source_image)""", scope)
            actual_image = scope.get('actual_image')
        except Exception as e:
            raise AssertionError(f"Failed to execute conversion code from {error_message}") from e
    
>       assert is_image_equal(target_image,
                              actual_image), f'expected {target_image}, but actual {actual_image}. {error_message}'
E       AssertionError: expected [[[[-0.8110236   0.5590551   0.44881892]
E            [-1.9448819  -1.3464568  -1.9133859 ]
E            [-0.05511808  0.88976383 -2.464567  ]
E            ...
E            [-1.5511811  -2.937008   -0.5905512 ]
E            [-0.496063    0.11811018 -0.87401575]
E            [-0.5905512  -2.023622   -1.3779528 ]]
E         
E           [[-1.6141732  -1.8188976  -1.7086614 ]
E            [-1.8503938   0.40157485 -0.29133856]
E            [-0.5748031  -2.937008   -0.24409449]
E            ...
E            [-2.8897638   0.8110236  -1.9606299 ]
E            [-1.503937   -1.8976378   0.9212599 ]
E            [-1.7559055  -1.535433   -0.14960629]]
E         
E           [[-0.496063   -2.3070865  -0.6535433 ]
E            [-1.8503938   0.1338582  -0.52755904]
E            [-1.6771653  -0.63779527 -1.3622048 ]
E            ...
E            [-1.8188976   0.9212599  -0.14960629]
E            [-0.10236222 -0.03937006 -2.6692915 ]
E            [-0.25984251 -2.2440944   0.496063  ]]
E         
E           ...
E         
E           [[-2.6850395   0.77952754  0.9527559 ]
E            [-0.8425197   0.03937006 -0.44881892]
E            [ 0.77952754 -2.7795277  -0.3070866 ]
E            ...
E            [-0.3070866  -2.480315   -2.2283463 ]
E            [ 0.08661413 -2.433071   -1.976378  ]
E            [-0.79527557 -2.8740158  -2.2440944 ]]
E         
E           [[-2.480315   -1.6456692  -0.6535433 ]
E            [-0.46456695 -0.63779527  0.88976383]
E            [-1.8188976   0.1811024  -2.937008  ]
E            ...
E            [-0.7480315  -1.9448819  -2.2755904 ]
E            [-2.8110237   0.71653545 -1.8031496 ]
E            [-2.8425198  -1.031496   -2.1338582 ]]
E         
E           [[ 0.16535437  0.27559054  0.60629916]
E            [-0.29133856 -0.79527557 -1.0787401 ]
E            [-2.9055119  -2.055118   -1.6771653 ]
E            ...
E            [ 0.85826766  0.5748031  -0.11811024]
E            [-1.7716535  -1.8976378  -2.6062992 ]
E            [-0.984252   -0.7007874  -1.9606299 ]]]], but actual [[[[ 0.09448819  0.77952754  0.72440946]
E            [-0.47244096 -0.17322835 -0.4566929 ]
E            [ 0.47244096  0.9448819  -0.7322835 ]
E            ...
E            [-0.27559054 -0.96850395  0.2047244 ]
E            [ 0.2519685   0.5590551   0.06299213]
E            [ 0.2047244  -0.511811   -0.18897638]]
E         
E           [[-0.30708662 -0.4094488  -0.35433072]
E            [-0.42519686  0.7007874   0.35433072]
E            [ 0.21259843 -0.96850395  0.37795275]
E            ...
E            [-0.9448819   0.9055118  -0.48031497]
E            [-0.2519685  -0.4488189   0.96062994]
E            [-0.37795275 -0.26771653  0.42519686]]
E         
E           [[ 0.2519685  -0.6535433   0.17322835]
E            [-0.42519686  0.5669291   0.23622048]
E            [-0.33858266  0.18110237 -0.18110237]
E            ...
E            [-0.4094488   0.96062994  0.42519686]
E            [ 0.4488189   0.48031497 -0.8346457 ]
E            [ 0.37007874 -0.62204725  0.7480315 ]]
E         
E           ...
E         
E           [[-0.8425197   0.8897638   0.97637796]
E            [ 0.07874016  0.51968503  0.27559054]
E            [ 0.8897638  -0.8897638   0.3464567 ]
E            ...
E            [ 0.3464567  -0.7401575  -0.61417323]
E            [ 0.54330707 -0.71653545 -0.48818898]
E            [ 0.1023622  -0.93700784 -0.62204725]]
E         
E           [[-0.7401575  -0.32283464  0.17322835]
E            [ 0.26771653  0.18110237  0.9448819 ]
E            [-0.4094488   0.5905512  -0.96850395]
E            ...
E            [ 0.12598425 -0.47244096 -0.63779527]
E            [-0.9055118   0.8582677  -0.4015748 ]
E            [-0.9212598  -0.01574803 -0.5669291 ]]
E         
E           [[ 0.5826772   0.63779527  0.8031496 ]
E            [ 0.35433072  0.1023622  -0.03937008]
E            [-0.9527559  -0.52755904 -0.33858266]
E            ...
E            [ 0.92913383  0.78740156  0.44094488]
E            [-0.38582677 -0.4488189  -0.8031496 ]
E            [ 0.00787402  0.1496063  -0.48031497]]]]. conversion from
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
E          imports: import skimage as ski
E         conversion function: 
E          def convert(var):
E          return ski.util.img_as_float32(var)
E         from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
E       assert False
E        +  where False = is_image_equal(array([[[[-0.8110236 ,  0.5590551 ,  0.44881892],\n         [-1.9448819 , -1.3464568 , -1.9133859 ],\n         [-0.05511...,\n         [-1.7716535 , -1.8976378 , -2.6062992 ],\n         [-0.984252  , -0.7007874 , -1.9606299 ]]]], dtype=float32), array([[[[ 0.09448819,  0.77952754,  0.72440946],\n         [-0.47244096, -0.17322835, -0.4566929 ],\n         [ 0.47244...,\n         [-0.38582677, -0.4488189 , -0.8031496 ],\n         [ 0.00787402,  0.1496063 , -0.48031497]]]], dtype=float32))

tests/test_conversion_code_in_kg.py:46: AssertionError
- generated xml file: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/pytest.xml -

---------- coverage: platform linux, python 3.10.14-final-0 ----------
Name                                                                        Stmts   Miss Branch BrPart  Cover   Missing
-----------------------------------------------------------------------------------------------------------------------
src/imgdataconvertcodegen/end_metadata_mapper.py                              131     90     52      7    26%   39, 41, 55, 67, 82-100, 112-125, 137-151, 163-177, 190-221, 238, 253, 259, 273-292, 304-336
src/imgdataconvertcodegen/image_data.py                                       226     13    142      9    93%   61, 69, 91, 118->120, 130, 302, 328-329, 338, 345-349
src/imgdataconvertcodegen/interface_cmd.py                                     11     11      0      0     0%   12-38
src/imgdataconvertcodegen/interface_py_api.py                                  25      4      0      0    84%   61-62, 66-67
src/imgdataconvertcodegen/knowledge_graph_construction/constructor.py         100      9     28      2    91%   37-38, 42, 81, 119-121, 124-125
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py      52      6     10      1    89%   50-57
src/imgdataconvertcodegen/knowledge_graph_construction/metedata/util.py        26      0     22      2    96%   24->27, 25->24
-----------------------------------------------------------------------------------------------------------------------
TOTAL                                                                        1051    133    488     21    87%

15 files skipped due to complete coverage.

=========================== short test summary info ============================
FAILED tests/test_conversion_code_in_kg.py::test_all_conversion_code_exec_on_cpu - AssertionError: expected [[[[-0.8110236   0.5590551   0.44881892]
     [-1.9448819  -1.3464568  -1.9133859 ]
     [-0.05511808  0.88976383 -2.464567  ]
     ...
     [-1.5511811  -2.937008   -0.5905512 ]
     [-0.496063    0.11811018 -0.87401575]
     [-0.5905512  -2.023622   -1.3779528 ]]
  
    [[-1.6141732  -1.8188976  -1.7086614 ]
     [-1.8503938   0.40157485 -0.29133856]
     [-0.5748031  -2.937008   -0.24409449]
     ...
     [-2.8897638   0.8110236  -1.9606299 ]
     [-1.503937   -1.8976378   0.9212599 ]
     [-1.7559055  -1.535433   -0.14960629]]
  
    [[-0.496063   -2.3070865  -0.6535433 ]
     [-1.8503938   0.1338582  -0.52755904]
     [-1.6771653  -0.63779527 -1.3622048 ]
     ...
     [-1.8188976   0.9212599  -0.14960629]
     [-0.10236222 -0.03937006 -2.6692915 ]
     [-0.25984251 -2.2440944   0.496063  ]]
  
    ...
  
    [[-2.6850395   0.77952754  0.9527559 ]
     [-0.8425197   0.03937006 -0.44881892]
     [ 0.77952754 -2.7795277  -0.3070866 ]
     ...
     [-0.3070866  -2.480315   -2.2283463 ]
     [ 0.08661413 -2.433071   -1.976378  ]
     [-0.79527557 -2.8740158  -2.2440944 ]]
  
    [[-2.480315   -1.6456692  -0.6535433 ]
     [-0.46456695 -0.63779527  0.88976383]
     [-1.8188976   0.1811024  -2.937008  ]
     ...
     [-0.7480315  -1.9448819  -2.2755904 ]
     [-2.8110237   0.71653545 -1.8031496 ]
     [-2.8425198  -1.031496   -2.1338582 ]]
  
    [[ 0.16535437  0.27559054  0.60629916]
     [-0.29133856 -0.79527557 -1.0787401 ]
     [-2.9055119  -2.055118   -1.6771653 ]
     ...
     [ 0.85826766  0.5748031  -0.11811024]
     [-1.7716535  -1.8976378  -2.6062992 ]
     [-0.984252   -0.7007874  -1.9606299 ]]]], but actual [[[[ 0.09448819  0.77952754  0.72440946]
     [-0.47244096 -0.17322835 -0.4566929 ]
     [ 0.47244096  0.9448819  -0.7322835 ]
     ...
     [-0.27559054 -0.96850395  0.2047244 ]
     [ 0.2519685   0.5590551   0.06299213]
     [ 0.2047244  -0.511811   -0.18897638]]
  
    [[-0.30708662 -0.4094488  -0.35433072]
     [-0.42519686  0.7007874   0.35433072]
     [ 0.21259843 -0.96850395  0.37795275]
     ...
     [-0.9448819   0.9055118  -0.48031497]
     [-0.2519685  -0.4488189   0.96062994]
     [-0.37795275 -0.26771653  0.42519686]]
  
    [[ 0.2519685  -0.6535433   0.17322835]
     [-0.42519686  0.5669291   0.23622048]
     [-0.33858266  0.18110237 -0.18110237]
     ...
     [-0.4094488   0.96062994  0.42519686]
     [ 0.4488189   0.48031497 -0.8346457 ]
     [ 0.37007874 -0.62204725  0.7480315 ]]
  
    ...
  
    [[-0.8425197   0.8897638   0.97637796]
     [ 0.07874016  0.51968503  0.27559054]
     [ 0.8897638  -0.8897638   0.3464567 ]
     ...
     [ 0.3464567  -0.7401575  -0.61417323]
     [ 0.54330707 -0.71653545 -0.48818898]
     [ 0.1023622  -0.93700784 -0.62204725]]
  
    [[-0.7401575  -0.32283464  0.17322835]
     [ 0.26771653  0.18110237  0.9448819 ]
     [-0.4094488   0.5905512  -0.96850395]
     ...
     [ 0.12598425 -0.47244096 -0.63779527]
     [-0.9055118   0.8582677  -0.4015748 ]
     [-0.9212598  -0.01574803 -0.5669291 ]]
  
    [[ 0.5826772   0.63779527  0.8031496 ]
     [ 0.35433072  0.1023622  -0.03937008]
     [-0.9527559  -0.52755904 -0.33858266]
     ...
     [ 0.92913383  0.78740156  0.44094488]
     [-0.38582677 -0.4488189  -0.8031496 ]
     [ 0.00787402  0.1496063  -0.48031497]]]]. conversion from
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
   imports: import skimage as ski
  conversion function: 
   def convert(var):
   return ski.util.img_as_float32(var)
  from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
assert False
 +  where False = is_image_equal(array([[[[-0.8110236 ,  0.5590551 ,  0.44881892],\n         [-1.9448819 , -1.3464568 , -1.9133859 ],\n         [-0.05511...,\n         [-1.7716535 , -1.8976378 , -2.6062992 ],\n         [-0.984252  , -0.7007874 , -1.9606299 ]]]], dtype=float32), array([[[[ 0.09448819,  0.77952754,  0.72440946],\n         [-0.47244096, -0.17322835, -0.4566929 ],\n         [ 0.47244...,\n         [-0.38582677, -0.4488189 , -0.8031496 ],\n         [ 0.00787402,  0.1496063 , -0.48031497]]]], dtype=float32))
=================== 1 failed, 48 passed, 3 skipped in 28.35s ===================
