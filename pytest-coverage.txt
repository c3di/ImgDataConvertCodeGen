============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-8.1.1, pluggy-1.4.0
rootdir: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen
configfile: pyproject.toml
plugins: cov-5.0.0
collected 52 items

tests/test_code_generation.py .......                                    [ 13%]
tests/test_conversion_code_execution.py .                                [ 15%]
tests/test_conversion_code_in_kg.py Fsss                                 [ 23%]
tests/test_io.py ....                                                    [ 30%]
tests/test_knowledge_graph.py ...........                                [ 51%]
tests/test_metadata.py ........                                          [ 67%]
tests/test_metadata_differ.py .......                                    [ 80%]
tests/test_py_interface.py ......                                        [ 92%]
tests/test_util.py ....                                                  [100%]WARNING: Failed to generate report: No data to report.



=================================== FAILURES ===================================
_____________________ test_all_conversion_code_exec_on_cpu _____________________

code_generator = <imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7ff5b7fca770>

    def test_all_conversion_code_exec_on_cpu(code_generator):
        kg = code_generator.knowledge_graph
        for edge in kg.edges:
            if is_code_exec_on_cpu(edge):
>               assert_exec_of_conversion_code_in_edge(*edge, kg)

tests/test_conversion_code_in_kg.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
target_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
kg = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7ff63da6f070>

    def assert_exec_of_conversion_code_in_edge(source_metadata, target_metadata, kg):
        edge_data = kg.get_edge_data(source_metadata, target_metadata)
        conversion = edge_data.get('conversion')
        assert conversion is not None, f"No conversion from {source_metadata} to {target_metadata}"
        assert len(conversion) == 2, (f"Expected two elements in the conversions, but got: {conversion} from"
                                      f" {source_metadata} to {target_metadata}")
        assert isinstance(conversion[0], str), (f"Expected the first element of the conversion to be a string, but got:"
                                                f" {conversion[0]} from {source_metadata} to {target_metadata}")
        assert isinstance(conversion[1], str), (f"Expected the second element of the conversion to be a string, but got:"
                                                f" {conversion[1]} from {source_metadata} to {target_metadata}")
        error_message = (f"conversion from\n {source_metadata} to\n {target_metadata} failed\n "
                         f"imports: {conversion[0]}\nconversion function: \n {conversion[1]}\nfrom {edge_data.get('factory')}")
    
        try:
            source_image, target_image = get_input_image_and_expected_output(source_metadata, target_metadata)
            func_name = re.search(r'(?<=def )\w+', conversion[1]).group(0)
    
            scope = {}
            scope.update({'source_image': source_image})
            exec(f"""{conversion[0]}
    {conversion[1]}
    actual_image = {func_name}(source_image)""", scope)
            actual_image = scope.get('actual_image')
        except Exception as e:
            raise AssertionError(f"Failed to execute conversion code from {error_message}") from e
    
>       assert is_image_equal(target_image,
                              actual_image), f'expected {target_image}, but actual {actual_image}. {error_message}'
E       AssertionError: expected [[[[-2.543307   -2.511811   -2.1338582 ]
E            [-2.1968503  -1.6771653  -0.8110236 ]
E            [-2.1338582  -0.6692914   0.84251964]
E            ...
E            [-2.3228345  -1.0944881   0.22834647]
E            [ 0.9527559  -1.0787401  -1.2834646 ]
E            [ 0.60629916  0.90551186 -2.3700786 ]]
E         
E           [[ 0.3070866   0.88976383 -2.559055  ]
E            [-0.9527559  -2.574803   -2.055118  ]
E            [ 0.511811   -0.16535431 -1.976378  ]
E            ...
E            [-1.519685   -0.38582677 -1.6141732 ]
E            [-0.3070866  -0.984252   -0.7637795 ]
E            [ 0.54330707 -2.023622   -2.023622  ]]
E         
E           [[-0.3070866  -2.7480316   0.7637795 ]
E            [-1.9291339   0.3070866  -2.1338582 ]
E            [ 0.1338582   0.7637795  -1.4566929 ]
E            ...
E            [-0.3385827  -0.9370079   0.7007874 ]
E            [-2.1338582  -0.44881892 -1.519685  ]
E            [ 0.90551186 -2.8740158   0.10236216]]
E         
E           ...
E         
E           [[ 0.08661413 -1.3149606  -1.2677165 ]
E            [-0.87401575 -0.8110236  -0.7007874 ]
E            [-0.9055118  -1.9133859  -1.7086614 ]
E            ...
E            [-1.5511811  -0.7480315  -0.19685042]
E            [-1.1574804  -1.0472441  -2.7165356 ]
E            [-1.8188976  -2.1811023   0.22834647]]
E         
E           [[-1.992126   -2.2125983  -0.11811024]
E            [-1.4251969  -1.472441    0.3070866 ]
E            [-0.5905512  -2.7165356   0.03937006]
E            ...
E            [-0.6535433  -0.46456695  0.25984251]
E            [-1.6299212  -2.8897638  -2.3385825 ]
E            [-2.1811023  -0.79527557 -2.7322836 ]]
E         
E           [[ 0.5748031  -2.984252   -2.968504  ]
E            [-1.2204725  -0.35433072 -0.44881892]
E            [ 0.8740157  -1.1889764  -2.9212599 ]
E            ...
E            [-2.007874   -2.3543305   0.05511808]
E            [-0.4173228  -1.1574804  -1.9448819 ]
E            [-0.9527559  -2.1653543  -1.5669291 ]]]], but actual [[[[-0.77165353 -0.7559055  -0.5669291 ]
E            [-0.5984252  -0.33858266  0.09448819]
E            [-0.5669291   0.16535433  0.9212598 ]
E            ...
E            [-0.6614173  -0.04724409  0.61417323]
E            [ 0.97637796 -0.03937008 -0.14173228]
E            [ 0.8031496   0.9527559  -0.68503934]]
E         
E           [[ 0.6535433   0.9448819  -0.77952754]
E            [ 0.02362205 -0.78740156 -0.52755904]
E            [ 0.7559055   0.41732284 -0.48818898]
E            ...
E            [-0.25984251  0.30708662 -0.30708662]
E            [ 0.3464567   0.00787402  0.11811024]
E            [ 0.77165353 -0.511811   -0.511811  ]]
E         
E           [[ 0.3464567  -0.87401575  0.88188976]
E            [-0.46456692  0.6535433  -0.5669291 ]
E            [ 0.5669291   0.88188976 -0.22834645]
E            ...
E            [ 0.33070865  0.03149606  0.8503937 ]
E            [-0.5669291   0.27559054 -0.25984251]
E            [ 0.9527559  -0.93700784  0.5511811 ]]
E         
E           ...
E         
E           [[ 0.54330707 -0.15748031 -0.13385826]
E            [ 0.06299213  0.09448819  0.1496063 ]
E            [ 0.04724409 -0.4566929  -0.35433072]
E            ...
E            [-0.27559054  0.12598425  0.4015748 ]
E            [-0.07874016 -0.02362205 -0.8582677 ]
E            [-0.4094488  -0.5905512   0.61417323]]
E         
E           [[-0.496063   -0.6062992   0.44094488]
E            [-0.21259843 -0.23622048  0.6535433 ]
E            [ 0.2047244  -0.8582677   0.51968503]
E            ...
E            [ 0.17322835  0.26771653  0.62992126]
E            [-0.31496063 -0.9448819  -0.6692913 ]
E            [-0.5905512   0.1023622  -0.86614174]]
E         
E           [[ 0.78740156 -0.992126   -0.984252  ]
E            [-0.11023622  0.32283464  0.27559054]
E            [ 0.93700784 -0.09448819 -0.96062994]
E            ...
E            [-0.503937   -0.6771653   0.52755904]
E            [ 0.2913386  -0.07874016 -0.47244096]
E            [ 0.02362205 -0.5826772  -0.28346455]]]]. conversion from
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
E          imports: import skimage as ski
E         conversion function: 
E          def convert(var):
E          return ski.util.img_as_float32(var)
E         from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
E       assert False
E        +  where False = is_image_equal(array([[[[-2.543307  , -2.511811  , -2.1338582 ],\n         [-2.1968503 , -1.6771653 , -0.8110236 ],\n         [-2.13385...,\n         [-0.4173228 , -1.1574804 , -1.9448819 ],\n         [-0.9527559 , -2.1653543 , -1.5669291 ]]]], dtype=float32), array([[[[-0.77165353, -0.7559055 , -0.5669291 ],\n         [-0.5984252 , -0.33858266,  0.09448819],\n         [-0.56692...,\n         [ 0.2913386 , -0.07874016, -0.47244096],\n         [ 0.02362205, -0.5826772 , -0.28346455]]]], dtype=float32))

tests/test_conversion_code_in_kg.py:46: AssertionError
- generated xml file: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/pytest.xml -

---------- coverage: platform linux, python 3.10.14-final-0 ----------

=========================== short test summary info ============================
FAILED tests/test_conversion_code_in_kg.py::test_all_conversion_code_exec_on_cpu - AssertionError: expected [[[[-2.543307   -2.511811   -2.1338582 ]
     [-2.1968503  -1.6771653  -0.8110236 ]
     [-2.1338582  -0.6692914   0.84251964]
     ...
     [-2.3228345  -1.0944881   0.22834647]
     [ 0.9527559  -1.0787401  -1.2834646 ]
     [ 0.60629916  0.90551186 -2.3700786 ]]
  
    [[ 0.3070866   0.88976383 -2.559055  ]
     [-0.9527559  -2.574803   -2.055118  ]
     [ 0.511811   -0.16535431 -1.976378  ]
     ...
     [-1.519685   -0.38582677 -1.6141732 ]
     [-0.3070866  -0.984252   -0.7637795 ]
     [ 0.54330707 -2.023622   -2.023622  ]]
  
    [[-0.3070866  -2.7480316   0.7637795 ]
     [-1.9291339   0.3070866  -2.1338582 ]
     [ 0.1338582   0.7637795  -1.4566929 ]
     ...
     [-0.3385827  -0.9370079   0.7007874 ]
     [-2.1338582  -0.44881892 -1.519685  ]
     [ 0.90551186 -2.8740158   0.10236216]]
  
    ...
  
    [[ 0.08661413 -1.3149606  -1.2677165 ]
     [-0.87401575 -0.8110236  -0.7007874 ]
     [-0.9055118  -1.9133859  -1.7086614 ]
     ...
     [-1.5511811  -0.7480315  -0.19685042]
     [-1.1574804  -1.0472441  -2.7165356 ]
     [-1.8188976  -2.1811023   0.22834647]]
  
    [[-1.992126   -2.2125983  -0.11811024]
     [-1.4251969  -1.472441    0.3070866 ]
     [-0.5905512  -2.7165356   0.03937006]
     ...
     [-0.6535433  -0.46456695  0.25984251]
     [-1.6299212  -2.8897638  -2.3385825 ]
     [-2.1811023  -0.79527557 -2.7322836 ]]
  
    [[ 0.5748031  -2.984252   -2.968504  ]
     [-1.2204725  -0.35433072 -0.44881892]
     [ 0.8740157  -1.1889764  -2.9212599 ]
     ...
     [-2.007874   -2.3543305   0.05511808]
     [-0.4173228  -1.1574804  -1.9448819 ]
     [-0.9527559  -2.1653543  -1.5669291 ]]]], but actual [[[[-0.77165353 -0.7559055  -0.5669291 ]
     [-0.5984252  -0.33858266  0.09448819]
     [-0.5669291   0.16535433  0.9212598 ]
     ...
     [-0.6614173  -0.04724409  0.61417323]
     [ 0.97637796 -0.03937008 -0.14173228]
     [ 0.8031496   0.9527559  -0.68503934]]
  
    [[ 0.6535433   0.9448819  -0.77952754]
     [ 0.02362205 -0.78740156 -0.52755904]
     [ 0.7559055   0.41732284 -0.48818898]
     ...
     [-0.25984251  0.30708662 -0.30708662]
     [ 0.3464567   0.00787402  0.11811024]
     [ 0.77165353 -0.511811   -0.511811  ]]
  
    [[ 0.3464567  -0.87401575  0.88188976]
     [-0.46456692  0.6535433  -0.5669291 ]
     [ 0.5669291   0.88188976 -0.22834645]
     ...
     [ 0.33070865  0.03149606  0.8503937 ]
     [-0.5669291   0.27559054 -0.25984251]
     [ 0.9527559  -0.93700784  0.5511811 ]]
  
    ...
  
    [[ 0.54330707 -0.15748031 -0.13385826]
     [ 0.06299213  0.09448819  0.1496063 ]
     [ 0.04724409 -0.4566929  -0.35433072]
     ...
     [-0.27559054  0.12598425  0.4015748 ]
     [-0.07874016 -0.02362205 -0.8582677 ]
     [-0.4094488  -0.5905512   0.61417323]]
  
    [[-0.496063   -0.6062992   0.44094488]
     [-0.21259843 -0.23622048  0.6535433 ]
     [ 0.2047244  -0.8582677   0.51968503]
     ...
     [ 0.17322835  0.26771653  0.62992126]
     [-0.31496063 -0.9448819  -0.6692913 ]
     [-0.5905512   0.1023622  -0.86614174]]
  
    [[ 0.78740156 -0.992126   -0.984252  ]
     [-0.11023622  0.32283464  0.27559054]
     [ 0.93700784 -0.09448819 -0.96062994]
     ...
     [-0.503937   -0.6771653   0.52755904]
     [ 0.2913386  -0.07874016 -0.47244096]
     [ 0.02362205 -0.5826772  -0.28346455]]]]. conversion from
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
   imports: import skimage as ski
  conversion function: 
   def convert(var):
   return ski.util.img_as_float32(var)
  from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
assert False
 +  where False = is_image_equal(array([[[[-2.543307  , -2.511811  , -2.1338582 ],\n         [-2.1968503 , -1.6771653 , -0.8110236 ],\n         [-2.13385...,\n         [-0.4173228 , -1.1574804 , -1.9448819 ],\n         [-0.9527559 , -2.1653543 , -1.5669291 ]]]], dtype=float32), array([[[[-0.77165353, -0.7559055 , -0.5669291 ],\n         [-0.5984252 , -0.33858266,  0.09448819],\n         [-0.56692...,\n         [ 0.2913386 , -0.07874016, -0.47244096],\n         [ 0.02362205, -0.5826772 , -0.28346455]]]], dtype=float32))
=================== 1 failed, 48 passed, 3 skipped in 29.98s ===================
