============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-8.1.1, pluggy-1.4.0
rootdir: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen
configfile: pyproject.toml
plugins: cov-5.0.0
collected 52 items

tests/test_code_generation.py .......                                    [ 13%]
tests/test_conversion_code_execution.py .                                [ 15%]
tests/test_conversion_code_in_kg.py Fsss                                 [ 23%]
tests/test_io.py ....                                                    [ 30%]
tests/test_knowledge_graph.py ...........                                [ 51%]
tests/test_metadata.py ........                                          [ 67%]
tests/test_metadata_differ.py .......                                    [ 80%]
tests/test_py_interface.py ......                                        [ 92%]
tests/test_util.py ....                                                  [100%]

=================================== FAILURES ===================================
_____________________ test_all_conversion_code_exec_on_cpu _____________________

code_generator = <imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f76202245b0>

    def test_all_conversion_code_exec_on_cpu(code_generator):
        kg = code_generator.knowledge_graph
        for edge in kg.edges:
            if is_code_exec_on_cpu(edge):
>               assert_exec_of_conversion_code_in_edge(*edge, kg)

tests/test_conversion_code_in_kg.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
target_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
kg = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f768ed97040>

    def assert_exec_of_conversion_code_in_edge(source_metadata, target_metadata, kg):
        edge_data = kg.get_edge_data(source_metadata, target_metadata)
        conversion = edge_data.get('conversion')
        assert conversion is not None, f"No conversion from {source_metadata} to {target_metadata}"
        assert len(conversion) == 2, (f"Expected two elements in the conversions, but got: {conversion} from"
                                      f" {source_metadata} to {target_metadata}")
        assert isinstance(conversion[0], str), (f"Expected the first element of the conversion to be a string, but got:"
                                                f" {conversion[0]} from {source_metadata} to {target_metadata}")
        assert isinstance(conversion[1], str), (f"Expected the second element of the conversion to be a string, but got:"
                                                f" {conversion[1]} from {source_metadata} to {target_metadata}")
        error_message = (f"conversion from\n {source_metadata} to\n {target_metadata} failed\n "
                         f"imports: {conversion[0]}\nconversion function: \n {conversion[1]}\nfrom {edge_data.get('factory')}")
    
        try:
            source_image, target_image = get_input_image_and_expected_output(source_metadata, target_metadata)
            func_name = re.search(r'(?<=def )\w+', conversion[1]).group(0)
    
            scope = {}
            scope.update({'source_image': source_image})
            exec(f"""{conversion[0]}
    {conversion[1]}
    actual_image = {func_name}(source_image)""", scope)
            actual_image = scope.get('actual_image')
        except Exception as e:
            raise AssertionError(f"Failed to execute conversion code from {error_message}") from e
    
>       assert is_image_equal(target_image,
                              actual_image), f'expected {target_image}, but actual {actual_image}. {error_message}'
E       AssertionError: expected [[[[-2.8897638  -2.7952757   0.46456695]
E            [-2.496063   -0.6535433  -1.2992126 ]
E            [-1.0787401  -0.8425197  -0.7480315 ]
E            ...
E            [ 0.90551186 -1.2677165  -1.992126  ]
E            [-0.27559054 -0.79527557 -0.9370079 ]
E            [-1.3779528  -2.433071   -1.3779528 ]]
E         
E           [[ 0.1338582  -2.1181102   0.29133856]
E            [-0.8582677   0.3070866  -0.00787401]
E            [ 0.19685042 -1.9606299  -1.5984251 ]
E            ...
E            [-1.0629921  -0.46456695 -2.4173229 ]
E            [-0.1811024  -2.8425198  -1.1732284 ]
E            [-0.16535431  0.3070866  -2.6692915 ]]
E         
E           [[-1.472441   -0.02362204 -0.9055118 ]
E            [-0.6062992  -2.5905511  -0.44881892]
E            [ 0.7007874  -1.0629921  -1.7559055 ]
E            ...
E            [-2.2598424  -2.7637796  -2.2755904 ]
E            [ 0.44881892 -2.8740158  -2.2755904 ]
E            [-2.464567    0.37007868 -2.952756  ]]
E         
E           ...
E         
E           [[-1.6614172   0.1811024  -1.7086614 ]
E            [ 0.7480315   0.21259844 -0.5905512 ]
E            [-2.070866   -1.976378   -2.4173229 ]
E            ...
E            [-2.543307    0.11811018 -0.9212598 ]
E            [ 0.03937006 -2.5905511  -0.3385827 ]
E            [-2.6692915  -0.9055118  -1.031496  ]]
E         
E           [[-0.8425197  -2.1496062  -0.71653545]
E            [-0.8110236  -0.10236222 -1.2362205 ]
E            [ 0.59055114 -0.5905512  -2.055118  ]
E            ...
E            [-2.3543305  -0.25984251  0.8740157 ]
E            [-1.7874016   0.9370079  -2.6692915 ]
E            [ 0.77952754 -1.4566929  -0.9370079 ]]
E         
E           [[-2.6220472   0.1338582  -0.25984251]
E            [-1.503937   -1.8503938   0.11811018]
E            [-1.503937   -0.7480315  -1.8503938 ]
E            ...
E            [ 0.3228346  -0.87401575 -0.13385826]
E            [-0.77952754 -0.8110236  -2.03937   ]
E            [-1.1889764  -0.46456695  0.6850394 ]]]], but actual [[[[-0.9448819  -0.8976378   0.7322835 ]
E            [-0.7480315   0.17322835 -0.1496063 ]
E            [-0.03937008  0.07874016  0.12598425]
E            ...
E            [ 0.9527559  -0.13385826 -0.496063  ]
E            [ 0.36220473  0.1023622   0.03149606]
E            [-0.18897638 -0.71653545 -0.18897638]]
E         
E           [[ 0.5669291  -0.5590551   0.6456693 ]
E            [ 0.07086614  0.6535433   0.496063  ]
E            [ 0.5984252  -0.48031497 -0.2992126 ]
E            ...
E            [-0.03149606  0.26771653 -0.70866144]
E            [ 0.4094488  -0.9212598  -0.08661418]
E            [ 0.41732284  0.6535433  -0.8346457 ]]
E         
E           [[-0.23622048  0.48818898  0.04724409]
E            [ 0.19685039 -0.79527557  0.27559054]
E            [ 0.8503937  -0.03149606 -0.37795275]
E            ...
E            [-0.62992126 -0.88188976 -0.63779527]
E            [ 0.72440946 -0.93700784 -0.63779527]
E            [-0.7322835   0.68503934 -0.97637796]]
E         
E           ...
E         
E           [[-0.33070865  0.5905512  -0.35433072]
E            [ 0.87401575  0.6062992   0.2047244 ]
E            [-0.53543305 -0.48818898 -0.70866144]
E            ...
E            [-0.77165353  0.5590551   0.03937008]
E            [ 0.51968503 -0.79527557  0.33070865]
E            [-0.8346457   0.04724409 -0.01574803]]
E         
E           [[ 0.07874016 -0.5748032   0.14173228]
E            [ 0.09448819  0.4488189  -0.11811024]
E            [ 0.79527557  0.2047244  -0.52755904]
E            ...
E            [-0.6771653   0.37007874  0.93700784]
E            [-0.39370078  0.96850395 -0.8346457 ]
E            [ 0.8897638  -0.22834645  0.03149606]]
E         
E           [[-0.8110236   0.5669291   0.37007874]
E            [-0.2519685  -0.42519686  0.5590551 ]
E            [-0.2519685   0.12598425 -0.42519686]
E            ...
E            [ 0.6614173   0.06299213  0.43307087]
E            [ 0.11023622  0.09448819 -0.51968503]
E            [-0.09448819  0.26771653  0.8425197 ]]]]. conversion from
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
E          imports: import skimage as ski
E         conversion function: 
E          def convert(var):
E          return ski.util.img_as_float32(var)
E         from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
E       assert False
E        +  where False = is_image_equal(array([[[[-2.8897638 , -2.7952757 ,  0.46456695],\n         [-2.496063  , -0.6535433 , -1.2992126 ],\n         [-1.07874...,\n         [-0.77952754, -0.8110236 , -2.03937   ],\n         [-1.1889764 , -0.46456695,  0.6850394 ]]]], dtype=float32), array([[[[-0.9448819 , -0.8976378 ,  0.7322835 ],\n         [-0.7480315 ,  0.17322835, -0.1496063 ],\n         [-0.03937...,\n         [ 0.11023622,  0.09448819, -0.51968503],\n         [-0.09448819,  0.26771653,  0.8425197 ]]]], dtype=float32))

tests/test_conversion_code_in_kg.py:46: AssertionError
- generated xml file: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/pytest.xml -

---------- coverage: platform linux, python 3.10.14-final-0 ----------
Name                                                                        Stmts   Miss Branch BrPart  Cover   Missing
-----------------------------------------------------------------------------------------------------------------------
src/imgdataconvertcodegen/end_metadata_mapper.py                              131     90     52      7    26%   39, 41, 55, 67, 82-100, 112-125, 137-151, 163-177, 190-221, 238, 253, 259, 273-292, 304-336
src/imgdataconvertcodegen/image_data.py                                       226     13    142      9    93%   61, 69, 91, 118->120, 130, 302, 328-329, 338, 345-349
src/imgdataconvertcodegen/interface_cmd.py                                     11     11      0      0     0%   12-38
src/imgdataconvertcodegen/interface_py_api.py                                  25      4      0      0    84%   61-62, 66-67
src/imgdataconvertcodegen/knowledge_graph_construction/constructor.py         100      9     28      2    91%   37-38, 42, 81, 119-121, 124-125
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py      52      6     10      1    89%   50-57
src/imgdataconvertcodegen/knowledge_graph_construction/metedata/util.py        26      0     22      2    96%   24->27, 25->24
-----------------------------------------------------------------------------------------------------------------------
TOTAL                                                                        1051    133    488     21    87%

15 files skipped due to complete coverage.

=========================== short test summary info ============================
FAILED tests/test_conversion_code_in_kg.py::test_all_conversion_code_exec_on_cpu - AssertionError: expected [[[[-2.8897638  -2.7952757   0.46456695]
     [-2.496063   -0.6535433  -1.2992126 ]
     [-1.0787401  -0.8425197  -0.7480315 ]
     ...
     [ 0.90551186 -1.2677165  -1.992126  ]
     [-0.27559054 -0.79527557 -0.9370079 ]
     [-1.3779528  -2.433071   -1.3779528 ]]
  
    [[ 0.1338582  -2.1181102   0.29133856]
     [-0.8582677   0.3070866  -0.00787401]
     [ 0.19685042 -1.9606299  -1.5984251 ]
     ...
     [-1.0629921  -0.46456695 -2.4173229 ]
     [-0.1811024  -2.8425198  -1.1732284 ]
     [-0.16535431  0.3070866  -2.6692915 ]]
  
    [[-1.472441   -0.02362204 -0.9055118 ]
     [-0.6062992  -2.5905511  -0.44881892]
     [ 0.7007874  -1.0629921  -1.7559055 ]
     ...
     [-2.2598424  -2.7637796  -2.2755904 ]
     [ 0.44881892 -2.8740158  -2.2755904 ]
     [-2.464567    0.37007868 -2.952756  ]]
  
    ...
  
    [[-1.6614172   0.1811024  -1.7086614 ]
     [ 0.7480315   0.21259844 -0.5905512 ]
     [-2.070866   -1.976378   -2.4173229 ]
     ...
     [-2.543307    0.11811018 -0.9212598 ]
     [ 0.03937006 -2.5905511  -0.3385827 ]
     [-2.6692915  -0.9055118  -1.031496  ]]
  
    [[-0.8425197  -2.1496062  -0.71653545]
     [-0.8110236  -0.10236222 -1.2362205 ]
     [ 0.59055114 -0.5905512  -2.055118  ]
     ...
     [-2.3543305  -0.25984251  0.8740157 ]
     [-1.7874016   0.9370079  -2.6692915 ]
     [ 0.77952754 -1.4566929  -0.9370079 ]]
  
    [[-2.6220472   0.1338582  -0.25984251]
     [-1.503937   -1.8503938   0.11811018]
     [-1.503937   -0.7480315  -1.8503938 ]
     ...
     [ 0.3228346  -0.87401575 -0.13385826]
     [-0.77952754 -0.8110236  -2.03937   ]
     [-1.1889764  -0.46456695  0.6850394 ]]]], but actual [[[[-0.9448819  -0.8976378   0.7322835 ]
     [-0.7480315   0.17322835 -0.1496063 ]
     [-0.03937008  0.07874016  0.12598425]
     ...
     [ 0.9527559  -0.13385826 -0.496063  ]
     [ 0.36220473  0.1023622   0.03149606]
     [-0.18897638 -0.71653545 -0.18897638]]
  
    [[ 0.5669291  -0.5590551   0.6456693 ]
     [ 0.07086614  0.6535433   0.496063  ]
     [ 0.5984252  -0.48031497 -0.2992126 ]
     ...
     [-0.03149606  0.26771653 -0.70866144]
     [ 0.4094488  -0.9212598  -0.08661418]
     [ 0.41732284  0.6535433  -0.8346457 ]]
  
    [[-0.23622048  0.48818898  0.04724409]
     [ 0.19685039 -0.79527557  0.27559054]
     [ 0.8503937  -0.03149606 -0.37795275]
     ...
     [-0.62992126 -0.88188976 -0.63779527]
     [ 0.72440946 -0.93700784 -0.63779527]
     [-0.7322835   0.68503934 -0.97637796]]
  
    ...
  
    [[-0.33070865  0.5905512  -0.35433072]
     [ 0.87401575  0.6062992   0.2047244 ]
     [-0.53543305 -0.48818898 -0.70866144]
     ...
     [-0.77165353  0.5590551   0.03937008]
     [ 0.51968503 -0.79527557  0.33070865]
     [-0.8346457   0.04724409 -0.01574803]]
  
    [[ 0.07874016 -0.5748032   0.14173228]
     [ 0.09448819  0.4488189  -0.11811024]
     [ 0.79527557  0.2047244  -0.52755904]
     ...
     [-0.6771653   0.37007874  0.93700784]
     [-0.39370078  0.96850395 -0.8346457 ]
     [ 0.8897638  -0.22834645  0.03149606]]
  
    [[-0.8110236   0.5669291   0.37007874]
     [-0.2519685  -0.42519686  0.5590551 ]
     [-0.2519685   0.12598425 -0.42519686]
     ...
     [ 0.6614173   0.06299213  0.43307087]
     [ 0.11023622  0.09448819 -0.51968503]
     [-0.09448819  0.26771653  0.8425197 ]]]]. conversion from
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
   imports: import skimage as ski
  conversion function: 
   def convert(var):
   return ski.util.img_as_float32(var)
  from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
assert False
 +  where False = is_image_equal(array([[[[-2.8897638 , -2.7952757 ,  0.46456695],\n         [-2.496063  , -0.6535433 , -1.2992126 ],\n         [-1.07874...,\n         [-0.77952754, -0.8110236 , -2.03937   ],\n         [-1.1889764 , -0.46456695,  0.6850394 ]]]], dtype=float32), array([[[[-0.9448819 , -0.8976378 ,  0.7322835 ],\n         [-0.7480315 ,  0.17322835, -0.1496063 ],\n         [-0.03937...,\n         [ 0.11023622,  0.09448819, -0.51968503],\n         [-0.09448819,  0.26771653,  0.8425197 ]]]], dtype=float32))
=================== 1 failed, 48 passed, 3 skipped in 27.74s ===================
