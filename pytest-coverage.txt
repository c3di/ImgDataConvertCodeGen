============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-8.1.1, pluggy-1.4.0
rootdir: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen
configfile: pyproject.toml
plugins: cov-5.0.0
collected 52 items

tests/test_code_generation.py .....FF                                    [ 13%]
tests/test_conversion_code_execution.py F                                [ 15%]
tests/test_conversion_code_in_kg.py Fsss                                 [ 23%]
tests/test_io.py ....                                                    [ 30%]
tests/test_knowledge_graph.py ......FF...                                [ 51%]
tests/test_metadata.py ........                                          [ 67%]
tests/test_metadata_differ.py .......                                    [ 80%]
tests/test_py_interface.py ....FF                                        [ 92%]
tests/test_util.py ....                                                  [100%]WARNING: Failed to generate report: No data to report.



=================================== FAILURES ===================================
___________________ test_generate_conversion_multiple_steps ____________________

code_generator = <imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f0cac4c4e80>

    def test_generate_conversion_multiple_steps(code_generator):
        source_var = 'source_var'
        target_var = 'result'
>       generated_code = code_generator.get_conversion(source_var, test_nodes[0], target_var, new_node)

tests/test_code_generation.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/imgdataconvertcodegen/code_generator.py:46: in get_conversion
    cvt_path = self.knowledge_graph.get_shortest_path(source_metadata, target_metadata)
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:65: in get_shortest_path
    path = nx.astar_path(self._graph, encode_metadata(source_metadata), encode_metadata(target_metadata),
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/utils/backends.py:412: in __call__
    return self.orig_func(*args, **kwargs)
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/algorithms/shortest_paths/astar.py:141: in astar_path
    cost = weight(curnode, neighbor, w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0c97a09a20>
u = 'numpy.ndarray_rgb_channel last_False_uint8_cpu'
v = 'numpy.ndarray_bgr_channel last_False_uint8_cpu'
edge_attributes = {'conversion': ['', 'def convert(var):\n  return var[:, :, ::-1]'], 'factory': None, 'time_cost': inf}

    def cost_function_in_AStar(self, u, v, edge_attributes):
>       time_cost = edge_attributes['normalized_time_cost']
E       KeyError: 'normalized_time_cost'

src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:48: KeyError
_____________________ test_generate_conversion_using_cache _____________________

code_generator = <imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f0c97a16b90>

    def test_generate_conversion_using_cache(code_generator):
        source_var = 'source_var'
        target_var = 'result'
    
>       code_generator.get_conversion(source_var, test_nodes[0], target_var, new_node)

tests/test_code_generation.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/imgdataconvertcodegen/code_generator.py:46: in get_conversion
    cvt_path = self.knowledge_graph.get_shortest_path(source_metadata, target_metadata)
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:65: in get_shortest_path
    path = nx.astar_path(self._graph, encode_metadata(source_metadata), encode_metadata(target_metadata),
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/utils/backends.py:412: in __call__
    return self.orig_func(*args, **kwargs)
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/algorithms/shortest_paths/astar.py:141: in astar_path
    cost = weight(curnode, neighbor, w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0c97a14f40>
u = 'numpy.ndarray_rgb_channel last_False_uint8_cpu'
v = 'numpy.ndarray_bgr_channel last_False_uint8_cpu'
edge_attributes = {'conversion': ['', 'def convert(var):\n  return var[:, :, ::-1]'], 'factory': None, 'time_cost': inf}

    def cost_function_in_AStar(self, u, v, edge_attributes):
>       time_cost = edge_attributes['normalized_time_cost']
E       KeyError: 'normalized_time_cost'

src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:48: KeyError
_____________________ test_code_generation_using_metadata ______________________

code_generator = <imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f0c97ab49d0>

    def test_code_generation_using_metadata(code_generator):
        kg = code_generator.knowledge_graph
        source_image = np.random.randint(0, 256, (20, 20, 3), dtype=np.uint8)
        expected_image = torch.from_numpy(source_image).permute(2, 0, 1).unsqueeze(0)
    
        # Prepare a custom scope that includes both global and local variables to ensure that the dynamically executed code
        # has access to necessary pre-defined variables and can also store new variables such as 'target_result'.
        # This is crucial in the pytest environment where test function scopes are isolated, and dynamically defined
        # variables might not be directly accessible due to Python's scoping rules.
        scope = globals().copy()
        scope.update(locals())
    
>       convert_code = code_generator.get_conversion('source_image', test_nodes[0],
                                                     'target_image', new_node)

tests/test_conversion_code_execution.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/imgdataconvertcodegen/code_generator.py:46: in get_conversion
    cvt_path = self.knowledge_graph.get_shortest_path(source_metadata, target_metadata)
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:65: in get_shortest_path
    path = nx.astar_path(self._graph, encode_metadata(source_metadata), encode_metadata(target_metadata),
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/utils/backends.py:412: in __call__
    return self.orig_func(*args, **kwargs)
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/algorithms/shortest_paths/astar.py:141: in astar_path
    cost = weight(curnode, neighbor, w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0c97ab49a0>
u = 'numpy.ndarray_rgb_channel last_False_uint8_cpu'
v = 'numpy.ndarray_bgr_channel last_False_uint8_cpu'
edge_attributes = {'conversion': ['', 'def convert(var):\n  return var[:, :, ::-1]'], 'factory': None, 'time_cost': inf}

    def cost_function_in_AStar(self, u, v, edge_attributes):
>       time_cost = edge_attributes['normalized_time_cost']
E       KeyError: 'normalized_time_cost'

src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:48: KeyError
_____________________ test_all_conversion_code_exec_on_cpu _____________________

code_generator = <imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f0c97b3e920>

    def test_all_conversion_code_exec_on_cpu(code_generator):
        kg = code_generator.knowledge_graph
        for edge in kg.edges:
            if is_code_exec_on_cpu(edge):
>               assert_exec_of_conversion_code_in_edge(*edge, kg)

tests/test_conversion_code_in_kg.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
target_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
kg = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0d1de570d0>

    def assert_exec_of_conversion_code_in_edge(source_metadata, target_metadata, kg):
        edge_data = kg.get_edge_data(source_metadata, target_metadata)
        conversion = edge_data.get('conversion')
        assert conversion is not None, f"No conversion from {source_metadata} to {target_metadata}"
        assert len(conversion) == 2, (f"Expected two elements in the conversions, but got: {conversion} from"
                                      f" {source_metadata} to {target_metadata}")
        assert isinstance(conversion[0], str), (f"Expected the first element of the conversion to be a string, but got:"
                                                f" {conversion[0]} from {source_metadata} to {target_metadata}")
        assert isinstance(conversion[1], str), (f"Expected the second element of the conversion to be a string, but got:"
                                                f" {conversion[1]} from {source_metadata} to {target_metadata}")
        error_message = (f"conversion from\n {source_metadata} to\n {target_metadata} failed\n "
                         f"imports: {conversion[0]}\nconversion function: \n {conversion[1]}\nfrom {edge_data.get('factory')}")
    
        try:
            source_image, target_image = get_input_image_and_expected_output(source_metadata, target_metadata)
            func_name = re.search(r'(?<=def )\w+', conversion[1]).group(0)
    
            scope = {}
            scope.update({'source_image': source_image})
            exec(f"""{conversion[0]}
    {conversion[1]}
    actual_image = {func_name}(source_image)""", scope)
            actual_image = scope.get('actual_image')
        except Exception as e:
            raise AssertionError(f"Failed to execute conversion code from {error_message}") from e
    
>       assert is_image_equal(target_image,
                              actual_image), f'expected {target_image}, but actual {actual_image}. {error_message}'
E       AssertionError: expected [[[[-0.32283467 -2.574803   -2.433071  ]
E            [ 0.85826766  0.37007868 -1.2677165 ]
E            [-1.4409449  -1.6771653   0.7637795 ]
E            ...
E            [-1.4566929  -2.2125983  -0.77952754]
E            [-1.472441   -1.2519685   0.9212599 ]
E            [-0.8267716  -0.54330707 -0.07086617]]
E         
E           [[-1.1259842  -2.433071    0.511811  ]
E            [-2.070866   -2.7165356  -0.7637795 ]
E            [ 0.984252   -1.3307086  -2.7165356 ]
E            ...
E            [-0.984252   -1.488189   -0.96850395]
E            [ 0.08661413 -2.527559   -2.6850395 ]
E            [-2.480315   -0.71653545 -2.3700786 ]]
E         
E           [[-1.519685   -0.24409449 -2.6850395 ]
E            [-2.4173229   0.5748031  -2.2598424 ]
E            [ 0.88976383 -0.35433072 -1.        ]
E            ...
E            [-2.3385825  -1.8661418  -0.71653545]
E            [-1.4566929  -1.1417322   0.8740157 ]
E            [-1.2677165  -0.9527559  -1.2204725 ]]
E         
E           ...
E         
E           [[-2.496063   -1.503937   -2.4015749 ]
E            [-0.984252    0.08661413  0.7322835 ]
E            [ 0.6220472   0.1338582  -0.9527559 ]
E            ...
E            [-0.27559054 -1.3149606  -2.3700786 ]
E            [ 0.6692914  -1.2362205  -2.4015749 ]
E            [ 0.7480315  -1.976378   -0.8110236 ]]
E         
E           [[-2.543307   -1.7086614  -0.21259844]
E            [-1.0472441  -1.3307086  -1.992126  ]
E            [ 0.54330707 -1.1732284   0.27559054]
E            ...
E            [ 0.3070866  -2.6692915   0.9370079 ]
E            [-1.1889764  -2.0866141  -2.4015749 ]
E            [-0.4330709   0.77952754 -2.968504  ]]
E         
E           [[-0.8267716   0.7637795  -0.13385826]
E            [-1.2834646  -1.2519685  -0.13385826]
E            [-0.7322835  -0.5905512   0.9212599 ]
E            ...
E            [-0.96850395 -2.3385825  -0.6692914 ]
E            [-0.6692914  -0.29133856 -0.35433072]
E            [-2.7165356  -2.7165356   0.88976383]]]], but actual [[[[ 0.33858266 -0.78740156 -0.71653545]
E            [ 0.92913383  0.68503934 -0.13385826]
E            [-0.22047244 -0.33858266  0.88188976]
E            ...
E            [-0.22834645 -0.6062992   0.11023622]
E            [-0.23622048 -0.12598425  0.96062994]
E            [ 0.08661418  0.22834645  0.46456692]]
E         
E           [[-0.06299213 -0.71653545  0.7559055 ]
E            [-0.53543305 -0.8582677   0.11811024]
E            [ 0.992126   -0.16535433 -0.8582677 ]
E            ...
E            [ 0.00787402 -0.24409449  0.01574803]
E            [ 0.54330707 -0.7637795  -0.8425197 ]
E            [-0.7401575   0.14173228 -0.68503934]]
E         
E           [[-0.25984251  0.37795275 -0.8425197 ]
E            [-0.70866144  0.78740156 -0.62992126]
E            [ 0.9448819   0.32283464  0.        ]
E            ...
E            [-0.6692913  -0.43307087  0.14173228]
E            [-0.22834645 -0.07086614  0.93700784]
E            [-0.13385826  0.02362205 -0.11023622]]
E         
E           ...
E         
E           [[-0.7480315  -0.2519685  -0.7007874 ]
E            [ 0.00787402  0.54330707  0.86614174]
E            [ 0.8110236   0.5669291   0.02362205]
E            ...
E            [ 0.36220473 -0.15748031 -0.68503934]
E            [ 0.8346457  -0.11811024 -0.7007874 ]
E            [ 0.87401575 -0.48818898  0.09448819]]
E         
E           [[-0.77165353 -0.35433072  0.39370078]
E            [-0.02362205 -0.16535433 -0.496063  ]
E            [ 0.77165353 -0.08661418  0.63779527]
E            ...
E            [ 0.6535433  -0.8346457   0.96850395]
E            [-0.09448819 -0.54330707 -0.7007874 ]
E            [ 0.28346455  0.8897638  -0.984252  ]]
E         
E           [[ 0.08661418  0.88188976  0.43307087]
E            [-0.14173228 -0.12598425  0.43307087]
E            [ 0.13385826  0.2047244   0.96062994]
E            ...
E            [ 0.01574803 -0.6692913   0.16535433]
E            [ 0.16535433  0.35433072  0.32283464]
E            [-0.8582677  -0.8582677   0.9448819 ]]]]. conversion from
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
E          imports: import skimage as ski
E         conversion function: 
E          def convert(var):
E          return ski.util.img_as_float32(var)
E         from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
E       assert False
E        +  where False = is_image_equal(array([[[[-0.32283467, -2.574803  , -2.433071  ],\n         [ 0.85826766,  0.37007868, -1.2677165 ],\n         [-1.44094...,\n         [-0.6692914 , -0.29133856, -0.35433072],\n         [-2.7165356 , -2.7165356 ,  0.88976383]]]], dtype=float32), array([[[[ 0.33858266, -0.78740156, -0.71653545],\n         [ 0.92913383,  0.68503934, -0.13385826],\n         [-0.22047...,\n         [ 0.16535433,  0.35433072,  0.32283464],\n         [-0.8582677 , -0.8582677 ,  0.9448819 ]]]], dtype=float32))

tests/test_conversion_code_in_kg.py:46: AssertionError
____________________________ test_get_shortest_path ____________________________

kg = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0c977e5fc0>

    def test_get_shortest_path(kg):
        kg.add_node(new_node)
        kg.add_edge(new_edge[0], new_edge[1], new_edge[2])
    
>       path = kg.get_shortest_path(test_nodes[0], new_node)

tests/test_knowledge_graph.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:65: in get_shortest_path
    path = nx.astar_path(self._graph, encode_metadata(source_metadata), encode_metadata(target_metadata),
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/utils/backends.py:412: in __call__
    return self.orig_func(*args, **kwargs)
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/algorithms/shortest_paths/astar.py:141: in astar_path
    cost = weight(curnode, neighbor, w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0c977e5fc0>
u = 'numpy.ndarray_rgb_channel last_False_uint8_cpu'
v = 'numpy.ndarray_bgr_channel last_False_uint8_cpu'
edge_attributes = {'conversion': ('', 'def convert(var):\n  return var[:, :, ::-1]'), 'factory': None, 'time_cost': inf}

    def cost_function_in_AStar(self, u, v, edge_attributes):
>       time_cost = edge_attributes['normalized_time_cost']
E       KeyError: 'normalized_time_cost'

src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:48: KeyError
________________________ test_get_shortest_path_no_path ________________________

kg = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0c9747e9b0>

    def test_get_shortest_path_no_path(kg):
>       path = kg.get_shortest_path(test_nodes[2], test_nodes[0])

tests/test_knowledge_graph.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:65: in get_shortest_path
    path = nx.astar_path(self._graph, encode_metadata(source_metadata), encode_metadata(target_metadata),
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/utils/backends.py:412: in __call__
    return self.orig_func(*args, **kwargs)
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/algorithms/shortest_paths/astar.py:141: in astar_path
    cost = weight(curnode, neighbor, w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0c9747e9b0>
u = 'torch.tensor_rgb_channel last_False_uint8_cpu'
v = 'torch.tensor_rgb_channel first_False_uint8_cpu'
edge_attributes = {'conversion': ('', 'def convert(var):\n  return var.permute(2, 0, 1)'), 'factory': None, 'time_cost': inf}

    def cost_function_in_AStar(self, u, v, edge_attributes):
>       time_cost = edge_attributes['normalized_time_cost']
E       KeyError: 'normalized_time_cost'

src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:48: KeyError
____________________________ test_get_convert_path _____________________________

mock_code_generator = <imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f0c977e1d80>

    def test_get_convert_path(mock_code_generator):
        source_image_desc = {"lib": "numpy"}
        target_image_desc = {"lib": "torch", "image_dtype": 'uint8'}
>       path = get_convert_path(source_image_desc, target_image_desc)

tests/test_py_interface.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/imgdataconvertcodegen/interface_py_api.py:53: in get_convert_path
    return get_convert_path_by_metadata(source_metadata, target_metadata)
src/imgdataconvertcodegen/interface_py_api.py:57: in get_convert_path_by_metadata
    return _code_generator.get_convert_path(source_metadata, target_metadata)
src/imgdataconvertcodegen/code_generator.py:22: in get_convert_path
    return self.knowledge_graph.get_shortest_path(source_metadata, target_metadata)
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:65: in get_shortest_path
    path = nx.astar_path(self._graph, encode_metadata(source_metadata), encode_metadata(target_metadata),
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/utils/backends.py:412: in __call__
    return self.orig_func(*args, **kwargs)
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/algorithms/shortest_paths/astar.py:141: in astar_path
    cost = weight(curnode, neighbor, w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0c977e32e0>
u = 'numpy.ndarray_rgb_channel last_False_uint8_cpu'
v = 'numpy.ndarray_bgr_channel last_False_uint8_cpu'
edge_attributes = {'conversion': ['', 'def convert(var):\n  return var[:, :, ::-1]'], 'factory': None, 'time_cost': inf}

    def cost_function_in_AStar(self, u, v, edge_attributes):
>       time_cost = edge_attributes['normalized_time_cost']
E       KeyError: 'normalized_time_cost'

src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:48: KeyError
___________________________ test_get_conversion_code ___________________________

mock_code_generator = <imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f0c977df4c0>

    def test_get_conversion_code(mock_code_generator):
        source_image_desc = {"lib": "numpy"}
        target_image_desc = {"lib": "torch", "image_dtype": 'uint8'}
    
>       actual_code = get_conversion_code("source_image", source_image_desc, "target_image", target_image_desc)

tests/test_py_interface.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/imgdataconvertcodegen/interface_py_api.py:42: in get_conversion_code
    return get_conversion_by_metadata(source_var_name, source_metadata, target_var_name, target_metadata)
src/imgdataconvertcodegen/interface_py_api.py:47: in get_conversion_by_metadata
    return _code_generator.get_conversion(source_var_name, source_metadata,
src/imgdataconvertcodegen/code_generator.py:46: in get_conversion
    cvt_path = self.knowledge_graph.get_shortest_path(source_metadata, target_metadata)
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:65: in get_shortest_path
    path = nx.astar_path(self._graph, encode_metadata(source_metadata), encode_metadata(target_metadata),
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/utils/backends.py:412: in __call__
    return self.orig_func(*args, **kwargs)
/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/networkx/algorithms/shortest_paths/astar.py:141: in astar_path
    cost = weight(curnode, neighbor, w)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f0c977df5e0>
u = 'numpy.ndarray_rgb_channel last_False_uint8_cpu'
v = 'numpy.ndarray_bgr_channel last_False_uint8_cpu'
edge_attributes = {'conversion': ['', 'def convert(var):\n  return var[:, :, ::-1]'], 'factory': None, 'time_cost': inf}

    def cost_function_in_AStar(self, u, v, edge_attributes):
>       time_cost = edge_attributes['normalized_time_cost']
E       KeyError: 'normalized_time_cost'

src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py:48: KeyError
- generated xml file: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/pytest.xml -

---------- coverage: platform linux, python 3.10.14-final-0 ----------

=========================== short test summary info ============================
FAILED tests/test_code_generation.py::test_generate_conversion_multiple_steps - KeyError: 'normalized_time_cost'
FAILED tests/test_code_generation.py::test_generate_conversion_using_cache - KeyError: 'normalized_time_cost'
FAILED tests/test_conversion_code_execution.py::test_code_generation_using_metadata - KeyError: 'normalized_time_cost'
FAILED tests/test_conversion_code_in_kg.py::test_all_conversion_code_exec_on_cpu - AssertionError: expected [[[[-0.32283467 -2.574803   -2.433071  ]
     [ 0.85826766  0.37007868 -1.2677165 ]
     [-1.4409449  -1.6771653   0.7637795 ]
     ...
     [-1.4566929  -2.2125983  -0.77952754]
     [-1.472441   -1.2519685   0.9212599 ]
     [-0.8267716  -0.54330707 -0.07086617]]
  
    [[-1.1259842  -2.433071    0.511811  ]
     [-2.070866   -2.7165356  -0.7637795 ]
     [ 0.984252   -1.3307086  -2.7165356 ]
     ...
     [-0.984252   -1.488189   -0.96850395]
     [ 0.08661413 -2.527559   -2.6850395 ]
     [-2.480315   -0.71653545 -2.3700786 ]]
  
    [[-1.519685   -0.24409449 -2.6850395 ]
     [-2.4173229   0.5748031  -2.2598424 ]
     [ 0.88976383 -0.35433072 -1.        ]
     ...
     [-2.3385825  -1.8661418  -0.71653545]
     [-1.4566929  -1.1417322   0.8740157 ]
     [-1.2677165  -0.9527559  -1.2204725 ]]
  
    ...
  
    [[-2.496063   -1.503937   -2.4015749 ]
     [-0.984252    0.08661413  0.7322835 ]
     [ 0.6220472   0.1338582  -0.9527559 ]
     ...
     [-0.27559054 -1.3149606  -2.3700786 ]
     [ 0.6692914  -1.2362205  -2.4015749 ]
     [ 0.7480315  -1.976378   -0.8110236 ]]
  
    [[-2.543307   -1.7086614  -0.21259844]
     [-1.0472441  -1.3307086  -1.992126  ]
     [ 0.54330707 -1.1732284   0.27559054]
     ...
     [ 0.3070866  -2.6692915   0.9370079 ]
     [-1.1889764  -2.0866141  -2.4015749 ]
     [-0.4330709   0.77952754 -2.968504  ]]
  
    [[-0.8267716   0.7637795  -0.13385826]
     [-1.2834646  -1.2519685  -0.13385826]
     [-0.7322835  -0.5905512   0.9212599 ]
     ...
     [-0.96850395 -2.3385825  -0.6692914 ]
     [-0.6692914  -0.29133856 -0.35433072]
     [-2.7165356  -2.7165356   0.88976383]]]], but actual [[[[ 0.33858266 -0.78740156 -0.71653545]
     [ 0.92913383  0.68503934 -0.13385826]
     [-0.22047244 -0.33858266  0.88188976]
     ...
     [-0.22834645 -0.6062992   0.11023622]
     [-0.23622048 -0.12598425  0.96062994]
     [ 0.08661418  0.22834645  0.46456692]]
  
    [[-0.06299213 -0.71653545  0.7559055 ]
     [-0.53543305 -0.8582677   0.11811024]
     [ 0.992126   -0.16535433 -0.8582677 ]
     ...
     [ 0.00787402 -0.24409449  0.01574803]
     [ 0.54330707 -0.7637795  -0.8425197 ]
     [-0.7401575   0.14173228 -0.68503934]]
  
    [[-0.25984251  0.37795275 -0.8425197 ]
     [-0.70866144  0.78740156 -0.62992126]
     [ 0.9448819   0.32283464  0.        ]
     ...
     [-0.6692913  -0.43307087  0.14173228]
     [-0.22834645 -0.07086614  0.93700784]
     [-0.13385826  0.02362205 -0.11023622]]
  
    ...
  
    [[-0.7480315  -0.2519685  -0.7007874 ]
     [ 0.00787402  0.54330707  0.86614174]
     [ 0.8110236   0.5669291   0.02362205]
     ...
     [ 0.36220473 -0.15748031 -0.68503934]
     [ 0.8346457  -0.11811024 -0.7007874 ]
     [ 0.87401575 -0.48818898  0.09448819]]
  
    [[-0.77165353 -0.35433072  0.39370078]
     [-0.02362205 -0.16535433 -0.496063  ]
     [ 0.77165353 -0.08661418  0.63779527]
     ...
     [ 0.6535433  -0.8346457   0.96850395]
     [-0.09448819 -0.54330707 -0.7007874 ]
     [ 0.28346455  0.8897638  -0.984252  ]]
  
    [[ 0.08661418  0.88188976  0.43307087]
     [-0.14173228 -0.12598425  0.43307087]
     [ 0.13385826  0.2047244   0.96062994]
     ...
     [ 0.01574803 -0.6692913   0.16535433]
     [ 0.16535433  0.35433072  0.32283464]
     [-0.8582677  -0.8582677   0.9448819 ]]]]. conversion from
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
   imports: import skimage as ski
  conversion function: 
   def convert(var):
   return ski.util.img_as_float32(var)
  from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
assert False
 +  where False = is_image_equal(array([[[[-0.32283467, -2.574803  , -2.433071  ],\n         [ 0.85826766,  0.37007868, -1.2677165 ],\n         [-1.44094...,\n         [-0.6692914 , -0.29133856, -0.35433072],\n         [-2.7165356 , -2.7165356 ,  0.88976383]]]], dtype=float32), array([[[[ 0.33858266, -0.78740156, -0.71653545],\n         [ 0.92913383,  0.68503934, -0.13385826],\n         [-0.22047...,\n         [ 0.16535433,  0.35433072,  0.32283464],\n         [-0.8582677 , -0.8582677 ,  0.9448819 ]]]], dtype=float32))
FAILED tests/test_knowledge_graph.py::test_get_shortest_path - KeyError: 'normalized_time_cost'
FAILED tests/test_knowledge_graph.py::test_get_shortest_path_no_path - KeyError: 'normalized_time_cost'
FAILED tests/test_py_interface.py::test_get_convert_path - KeyError: 'normalized_time_cost'
FAILED tests/test_py_interface.py::test_get_conversion_code - KeyError: 'normalized_time_cost'
============= 8 failed, 41 passed, 3 skipped in 440.64s (0:07:20) ==============
