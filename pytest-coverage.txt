============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-8.1.1, pluggy-1.4.0
rootdir: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen
configfile: pyproject.toml
plugins: cov-5.0.0
collected 52 items

tests/test_code_generation.py .......                                    [ 13%]
tests/test_conversion_code_execution.py .                                [ 15%]
tests/test_conversion_code_in_kg.py Fsss                                 [ 23%]
tests/test_io.py ....                                                    [ 30%]
tests/test_knowledge_graph.py ...........                                [ 51%]
tests/test_metadata.py ........                                          [ 67%]
tests/test_metadata_differ.py .......                                    [ 80%]
tests/test_py_interface.py ......                                        [ 92%]
tests/test_util.py ....                                                  [100%]WARNING: Failed to generate report: No data to report.



=================================== FAILURES ===================================
_____________________ test_all_conversion_code_exec_on_cpu _____________________

code_generator = <imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7fb0e85cf3a0>

    def test_all_conversion_code_exec_on_cpu(code_generator):
        kg = code_generator.knowledge_graph
        for edge in kg.edges:
            if is_code_exec_on_cpu(edge):
>               assert_exec_of_conversion_code_in_edge(*edge, kg)

tests/test_conversion_code_in_kg.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
target_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
kg = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7fb15e0cf040>

    def assert_exec_of_conversion_code_in_edge(source_metadata, target_metadata, kg):
        edge_data = kg.get_edge_data(source_metadata, target_metadata)
        conversion = edge_data.get('conversion')
        assert conversion is not None, f"No conversion from {source_metadata} to {target_metadata}"
        assert len(conversion) == 2, (f"Expected two elements in the conversions, but got: {conversion} from"
                                      f" {source_metadata} to {target_metadata}")
        assert isinstance(conversion[0], str), (f"Expected the first element of the conversion to be a string, but got:"
                                                f" {conversion[0]} from {source_metadata} to {target_metadata}")
        assert isinstance(conversion[1], str), (f"Expected the second element of the conversion to be a string, but got:"
                                                f" {conversion[1]} from {source_metadata} to {target_metadata}")
        error_message = (f"conversion from\n {source_metadata} to\n {target_metadata} failed\n "
                         f"imports: {conversion[0]}\nconversion function: \n {conversion[1]}\nfrom {edge_data.get('factory')}")
    
        try:
            source_image, target_image = get_input_image_and_expected_output(source_metadata, target_metadata)
            func_name = re.search(r'(?<=def )\w+', conversion[1]).group(0)
    
            scope = {}
            scope.update({'source_image': source_image})
            exec(f"""{conversion[0]}
    {conversion[1]}
    actual_image = {func_name}(source_image)""", scope)
            actual_image = scope.get('actual_image')
        except Exception as e:
            raise AssertionError(f"Failed to execute conversion code from {error_message}") from e
    
>       assert is_image_equal(target_image,
                              actual_image), f'expected {target_image}, but actual {actual_image}. {error_message}'
E       AssertionError: expected [[[[-1.2519685  -1.0787401  -2.7795277 ]
E            [-0.8582677  -1.7244095  -1.7874016 ]
E            [-2.527559   -2.480315   -2.3070865 ]
E            ...
E            [ 0.96850395 -1.0944881   0.984252  ]
E            [-0.4173228  -2.968504    0.496063  ]
E            [-2.464567   -1.992126   -0.9527559 ]]
E         
E           [[-2.3070865  -0.5748031   0.90551186]
E            [-2.543307   -0.5590551  -2.433071  ]
E            [-1.6614172  -1.6456692   0.6220472 ]
E            ...
E            [ 0.5590551  -1.6614172   0.22834647]
E            [-1.992126    0.85826766  0.6692914 ]
E            [-2.7795277  -0.05511808 -0.44881892]]
E         
E           [[ 0.8267716  -1.3779528  -0.7480315 ]
E            [-2.574803   -1.2834646  -1.031496  ]
E            [-2.6535435   0.00787401 -3.        ]
E            ...
E            [-0.511811   -1.         -0.79527557]
E            [-1.472441   -1.8188976   0.8110236 ]
E            [-0.5590551   0.5748031  -0.4330709 ]]
E         
E           ...
E         
E           [[-2.8110237  -0.13385826 -2.4015749 ]
E            [ 0.48031497 -1.2992126  -1.992126  ]
E            [-1.4409449  -3.         -2.1023622 ]
E            ...
E            [-0.44881892 -0.07086617 -1.2047244 ]
E            [-1.3779528  -2.6220472  -0.13385826]
E            [-2.984252   -1.4409449  -0.4015748 ]]
E         
E           [[ 0.21259844 -2.496063   -2.8425198 ]
E            [-1.0944881   0.6692914  -1.6929134 ]
E            [-2.7322836  -1.015748   -1.519685  ]
E            ...
E            [-2.023622   -0.1811024  -2.2598424 ]
E            [-2.3070865  -0.29133856  0.96850395]
E            [ 0.3228346  -0.79527557  0.7322835 ]]
E         
E           [[-1.6771653  -1.2047244   0.03937006]
E            [-0.02362204 -0.496063    0.8740157 ]
E            [-2.984252   -2.6220472  -0.3385827 ]
E            ...
E            [-0.48031497 -1.6614172  -2.511811  ]
E            [-2.7007875   0.8740157   0.79527557]
E            [-1.5511811  -0.77952754 -2.2598424 ]]]], but actual [[[[-0.12598425 -0.03937008 -0.8897638 ]
E            [ 0.07086614 -0.36220473 -0.39370078]
E            [-0.7637795  -0.7401575  -0.6535433 ]
E            ...
E            [ 0.984252   -0.04724409  0.992126  ]
E            [ 0.2913386  -0.984252    0.7480315 ]
E            [-0.7322835  -0.496063    0.02362205]]
E         
E           [[-0.6535433   0.21259843  0.9527559 ]
E            [-0.77165353  0.22047244 -0.71653545]
E            [-0.33070865 -0.32283464  0.8110236 ]
E            ...
E            [ 0.77952754 -0.33070865  0.61417323]
E            [-0.496063    0.92913383  0.8346457 ]
E            [-0.8897638   0.47244096  0.27559054]]
E         
E           [[ 0.9133858  -0.18897638  0.12598425]
E            [-0.78740156 -0.14173228 -0.01574803]
E            [-0.8267717   0.503937   -1.        ]
E            ...
E            [ 0.24409449  0.          0.1023622 ]
E            [-0.23622048 -0.4094488   0.9055118 ]
E            [ 0.22047244  0.78740156  0.28346455]]
E         
E           ...
E         
E           [[-0.9055118   0.43307087 -0.7007874 ]
E            [ 0.7401575  -0.1496063  -0.496063  ]
E            [-0.22047244 -1.         -0.5511811 ]
E            ...
E            [ 0.27559054  0.46456692 -0.1023622 ]
E            [-0.18897638 -0.8110236   0.43307087]
E            [-0.992126   -0.22047244  0.2992126 ]]
E         
E           [[ 0.6062992  -0.7480315  -0.9212598 ]
E            [-0.04724409  0.8346457  -0.3464567 ]
E            [-0.86614174 -0.00787402 -0.25984251]
E            ...
E            [-0.511811    0.4094488  -0.62992126]
E            [-0.6535433   0.35433072  0.984252  ]
E            [ 0.6614173   0.1023622   0.86614174]]
E         
E           [[-0.33858266 -0.1023622   0.51968503]
E            [ 0.48818898  0.2519685   0.93700784]
E            [-0.992126   -0.8110236   0.33070865]
E            ...
E            [ 0.25984251 -0.33070865 -0.7559055 ]
E            [-0.8503937   0.93700784  0.8976378 ]
E            [-0.27559054  0.11023622 -0.62992126]]]]. conversion from
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
E          imports: import skimage as ski
E         conversion function: 
E          def convert(var):
E          return ski.util.img_as_float32(var)
E         from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
E       assert False
E        +  where False = is_image_equal(array([[[[-1.2519685 , -1.0787401 , -2.7795277 ],\n         [-0.8582677 , -1.7244095 , -1.7874016 ],\n         [-2.52755...,\n         [-2.7007875 ,  0.8740157 ,  0.79527557],\n         [-1.5511811 , -0.77952754, -2.2598424 ]]]], dtype=float32), array([[[[-0.12598425, -0.03937008, -0.8897638 ],\n         [ 0.07086614, -0.36220473, -0.39370078],\n         [-0.76377...,\n         [-0.8503937 ,  0.93700784,  0.8976378 ],\n         [-0.27559054,  0.11023622, -0.62992126]]]], dtype=float32))

tests/test_conversion_code_in_kg.py:46: AssertionError
- generated xml file: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/pytest.xml -

---------- coverage: platform linux, python 3.10.14-final-0 ----------

=========================== short test summary info ============================
FAILED tests/test_conversion_code_in_kg.py::test_all_conversion_code_exec_on_cpu - AssertionError: expected [[[[-1.2519685  -1.0787401  -2.7795277 ]
     [-0.8582677  -1.7244095  -1.7874016 ]
     [-2.527559   -2.480315   -2.3070865 ]
     ...
     [ 0.96850395 -1.0944881   0.984252  ]
     [-0.4173228  -2.968504    0.496063  ]
     [-2.464567   -1.992126   -0.9527559 ]]
  
    [[-2.3070865  -0.5748031   0.90551186]
     [-2.543307   -0.5590551  -2.433071  ]
     [-1.6614172  -1.6456692   0.6220472 ]
     ...
     [ 0.5590551  -1.6614172   0.22834647]
     [-1.992126    0.85826766  0.6692914 ]
     [-2.7795277  -0.05511808 -0.44881892]]
  
    [[ 0.8267716  -1.3779528  -0.7480315 ]
     [-2.574803   -1.2834646  -1.031496  ]
     [-2.6535435   0.00787401 -3.        ]
     ...
     [-0.511811   -1.         -0.79527557]
     [-1.472441   -1.8188976   0.8110236 ]
     [-0.5590551   0.5748031  -0.4330709 ]]
  
    ...
  
    [[-2.8110237  -0.13385826 -2.4015749 ]
     [ 0.48031497 -1.2992126  -1.992126  ]
     [-1.4409449  -3.         -2.1023622 ]
     ...
     [-0.44881892 -0.07086617 -1.2047244 ]
     [-1.3779528  -2.6220472  -0.13385826]
     [-2.984252   -1.4409449  -0.4015748 ]]
  
    [[ 0.21259844 -2.496063   -2.8425198 ]
     [-1.0944881   0.6692914  -1.6929134 ]
     [-2.7322836  -1.015748   -1.519685  ]
     ...
     [-2.023622   -0.1811024  -2.2598424 ]
     [-2.3070865  -0.29133856  0.96850395]
     [ 0.3228346  -0.79527557  0.7322835 ]]
  
    [[-1.6771653  -1.2047244   0.03937006]
     [-0.02362204 -0.496063    0.8740157 ]
     [-2.984252   -2.6220472  -0.3385827 ]
     ...
     [-0.48031497 -1.6614172  -2.511811  ]
     [-2.7007875   0.8740157   0.79527557]
     [-1.5511811  -0.77952754 -2.2598424 ]]]], but actual [[[[-0.12598425 -0.03937008 -0.8897638 ]
     [ 0.07086614 -0.36220473 -0.39370078]
     [-0.7637795  -0.7401575  -0.6535433 ]
     ...
     [ 0.984252   -0.04724409  0.992126  ]
     [ 0.2913386  -0.984252    0.7480315 ]
     [-0.7322835  -0.496063    0.02362205]]
  
    [[-0.6535433   0.21259843  0.9527559 ]
     [-0.77165353  0.22047244 -0.71653545]
     [-0.33070865 -0.32283464  0.8110236 ]
     ...
     [ 0.77952754 -0.33070865  0.61417323]
     [-0.496063    0.92913383  0.8346457 ]
     [-0.8897638   0.47244096  0.27559054]]
  
    [[ 0.9133858  -0.18897638  0.12598425]
     [-0.78740156 -0.14173228 -0.01574803]
     [-0.8267717   0.503937   -1.        ]
     ...
     [ 0.24409449  0.          0.1023622 ]
     [-0.23622048 -0.4094488   0.9055118 ]
     [ 0.22047244  0.78740156  0.28346455]]
  
    ...
  
    [[-0.9055118   0.43307087 -0.7007874 ]
     [ 0.7401575  -0.1496063  -0.496063  ]
     [-0.22047244 -1.         -0.5511811 ]
     ...
     [ 0.27559054  0.46456692 -0.1023622 ]
     [-0.18897638 -0.8110236   0.43307087]
     [-0.992126   -0.22047244  0.2992126 ]]
  
    [[ 0.6062992  -0.7480315  -0.9212598 ]
     [-0.04724409  0.8346457  -0.3464567 ]
     [-0.86614174 -0.00787402 -0.25984251]
     ...
     [-0.511811    0.4094488  -0.62992126]
     [-0.6535433   0.35433072  0.984252  ]
     [ 0.6614173   0.1023622   0.86614174]]
  
    [[-0.33858266 -0.1023622   0.51968503]
     [ 0.48818898  0.2519685   0.93700784]
     [-0.992126   -0.8110236   0.33070865]
     ...
     [ 0.25984251 -0.33070865 -0.7559055 ]
     [-0.8503937   0.93700784  0.8976378 ]
     [-0.27559054  0.11023622 -0.62992126]]]]. conversion from
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
   imports: import skimage as ski
  conversion function: 
   def convert(var):
   return ski.util.img_as_float32(var)
  from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
assert False
 +  where False = is_image_equal(array([[[[-1.2519685 , -1.0787401 , -2.7795277 ],\n         [-0.8582677 , -1.7244095 , -1.7874016 ],\n         [-2.52755...,\n         [-2.7007875 ,  0.8740157 ,  0.79527557],\n         [-1.5511811 , -0.77952754, -2.2598424 ]]]], dtype=float32), array([[[[-0.12598425, -0.03937008, -0.8897638 ],\n         [ 0.07086614, -0.36220473, -0.39370078],\n         [-0.76377...,\n         [-0.8503937 ,  0.93700784,  0.8976378 ],\n         [-0.27559054,  0.11023622, -0.62992126]]]], dtype=float32))
=================== 1 failed, 48 passed, 3 skipped in 28.41s ===================
