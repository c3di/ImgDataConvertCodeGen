============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-8.1.1, pluggy-1.4.0
rootdir: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen
configfile: pyproject.toml
plugins: cov-5.0.0
collected 52 items

tests/test_code_generation.py .......                                    [ 13%]
tests/test_conversion_code_execution.py .                                [ 15%]
tests/test_conversion_code_in_kg.py Fsss                                 [ 23%]
tests/test_io.py ....                                                    [ 30%]
tests/test_knowledge_graph.py ...........                                [ 51%]
tests/test_metadata.py ........                                          [ 67%]
tests/test_metadata_differ.py .......                                    [ 80%]
tests/test_py_interface.py ......                                        [ 92%]
tests/test_util.py ....                                                  [100%]

=================================== FAILURES ===================================
_____________________ test_all_conversion_code_exec_on_cpu _____________________

code_generator = <imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7fc3b5f60df0>

    def test_all_conversion_code_exec_on_cpu(code_generator):
        kg = code_generator.knowledge_graph
        for edge in kg.edges:
            if is_code_exec_on_cpu(edge):
>               assert_exec_of_conversion_code_in_edge(*edge, kg)

tests/test_conversion_code_in_kg.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
target_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
kg = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7fc42bab30a0>

    def assert_exec_of_conversion_code_in_edge(source_metadata, target_metadata, kg):
        edge_data = kg.get_edge_data(source_metadata, target_metadata)
        conversion = edge_data.get('conversion')
        assert conversion is not None, f"No conversion from {source_metadata} to {target_metadata}"
        assert len(conversion) == 2, (f"Expected two elements in the conversions, but got: {conversion} from"
                                      f" {source_metadata} to {target_metadata}")
        assert isinstance(conversion[0], str), (f"Expected the first element of the conversion to be a string, but got:"
                                                f" {conversion[0]} from {source_metadata} to {target_metadata}")
        assert isinstance(conversion[1], str), (f"Expected the second element of the conversion to be a string, but got:"
                                                f" {conversion[1]} from {source_metadata} to {target_metadata}")
        error_message = (f"conversion from\n {source_metadata} to\n {target_metadata} failed\n "
                         f"imports: {conversion[0]}\nconversion function: \n {conversion[1]}\nfrom {edge_data.get('factory')}")
    
        try:
            source_image, target_image = get_input_image_and_expected_output(source_metadata, target_metadata)
            func_name = re.search(r'(?<=def )\w+', conversion[1]).group(0)
    
            scope = {}
            scope.update({'source_image': source_image})
            exec(f"""{conversion[0]}
    {conversion[1]}
    actual_image = {func_name}(source_image)""", scope)
            actual_image = scope.get('actual_image')
        except Exception as e:
            raise AssertionError(f"Failed to execute conversion code from {error_message}") from e
    
>       assert is_image_equal(target_image,
                              actual_image), f'expected {target_image}, but actual {actual_image}. {error_message}'
E       AssertionError: expected [[[[ 0.6692914  -1.1102362  -0.984252  ]
E            [-0.9055118   0.96850395 -0.35433072]
E            [ 0.29133856  0.14960635 -2.8267717 ]
E            ...
E            [-0.10236222  0.77952754 -0.6850394 ]
E            [-0.07086617 -0.8582677  -1.3307086 ]
E            [ 0.19685042 -2.480315   -1.3622048 ]]
E         
E           [[ 0.496063   -2.2913384  -2.496063  ]
E            [-0.5590551  -2.6692915  -1.1889764 ]
E            [-1.7086614  -2.6220472  -0.9527559 ]
E            ...
E            [-1.535433   -0.19685042 -2.7637796 ]
E            [-1.7874016   0.48031497 -0.4015748 ]
E            [-1.7401575  -1.6771653  -1.2677165 ]]
E         
E           [[-2.8582678   0.79527557 -1.        ]
E            [-1.7244095   0.3070866  -1.2992126 ]
E            [-1.6141732  -1.503937   -1.503937  ]
E            ...
E            [ 0.35433066 -2.8740158  -1.        ]
E            [-1.6456692  -1.3622048  -2.952756  ]
E            [-1.7401575  -1.976378   -1.3307086 ]]
E         
E           ...
E         
E           [[-1.6771653   0.7322835   0.511811  ]
E            [-2.464567   -2.3543305   0.22834647]
E            [-0.6850394   0.984252   -1.0787401 ]
E            ...
E            [ 0.03937006 -0.19685042 -0.52755904]
E            [-2.8897638  -0.3070866  -2.8897638 ]
E            [-1.1417322  -2.7637796  -1.9606299 ]]
E         
E           [[-0.7007874  -0.00787401 -1.        ]
E            [ 0.00787401 -0.3070866   0.25984251]
E            [-1.8661418  -2.5905511  -1.9606299 ]
E            ...
E            [-2.1653543  -0.32283467  0.496063  ]
E            [-2.4173229  -1.5669291   0.00787401]
E            [-2.480315    0.46456695 -2.7952757 ]]
E         
E           [[-0.7322835   0.03937006  0.05511808]
E            [-0.79527557 -0.08661419 -2.574803  ]
E            [-2.6377952  -0.48031497 -0.02362204]
E            ...
E            [-1.2047244  -0.07086617 -1.6929134 ]
E            [-1.9291339   0.5748031   0.16535437]
E            [ 0.10236216 -2.2598424  -1.8661418 ]]]], but actual [[[[ 0.8346457  -0.05511811  0.00787402]
E            [ 0.04724409  0.984252    0.32283464]
E            [ 0.6456693   0.5748032  -0.9133858 ]
E            ...
E            [ 0.4488189   0.8897638   0.15748031]
E            [ 0.46456692  0.07086614 -0.16535433]
E            [ 0.5984252  -0.7401575  -0.18110237]]
E         
E           [[ 0.7480315  -0.6456693  -0.7480315 ]
E            [ 0.22047244 -0.8346457  -0.09448819]
E            [-0.35433072 -0.8110236   0.02362205]
E            ...
E            [-0.26771653  0.4015748  -0.88188976]
E            [-0.39370078  0.7401575   0.2992126 ]
E            [-0.37007874 -0.33858266 -0.13385826]]
E         
E           [[-0.92913383  0.8976378   0.        ]
E            [-0.36220473  0.6535433  -0.1496063 ]
E            [-0.30708662 -0.2519685  -0.2519685 ]
E            ...
E            [ 0.6771653  -0.93700784  0.        ]
E            [-0.32283464 -0.18110237 -0.97637796]
E            [-0.37007874 -0.48818898 -0.16535433]]
E         
E           ...
E         
E           [[-0.33858266  0.86614174  0.7559055 ]
E            [-0.7322835  -0.6771653   0.61417323]
E            [ 0.15748031  0.992126   -0.03937008]
E            ...
E            [ 0.51968503  0.4015748   0.23622048]
E            [-0.9448819   0.3464567  -0.9448819 ]
E            [-0.07086614 -0.88188976 -0.48031497]]
E         
E           [[ 0.1496063   0.496063    0.        ]
E            [ 0.503937    0.3464567   0.62992126]
E            [-0.43307087 -0.79527557 -0.48031497]
E            ...
E            [-0.5826772   0.33858266  0.7480315 ]
E            [-0.70866144 -0.28346455  0.503937  ]
E            [-0.7401575   0.7322835  -0.8976378 ]]
E         
E           [[ 0.13385826  0.51968503  0.52755904]
E            [ 0.1023622   0.4566929  -0.78740156]
E            [-0.8188976   0.25984251  0.48818898]
E            ...
E            [-0.1023622   0.46456692 -0.3464567 ]
E            [-0.46456692  0.78740156  0.5826772 ]
E            [ 0.5511811  -0.62992126 -0.43307087]]]]. conversion from
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
E          imports: import skimage as ski
E         conversion function: 
E          def convert(var):
E          return ski.util.img_as_float32(var)
E         from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
E       assert False
E        +  where False = is_image_equal(array([[[[ 0.6692914 , -1.1102362 , -0.984252  ],\n         [-0.9055118 ,  0.96850395, -0.35433072],\n         [ 0.29133...,\n         [-1.9291339 ,  0.5748031 ,  0.16535437],\n         [ 0.10236216, -2.2598424 , -1.8661418 ]]]], dtype=float32), array([[[[ 0.8346457 , -0.05511811,  0.00787402],\n         [ 0.04724409,  0.984252  ,  0.32283464],\n         [ 0.64566...,\n         [-0.46456692,  0.78740156,  0.5826772 ],\n         [ 0.5511811 , -0.62992126, -0.43307087]]]], dtype=float32))

tests/test_conversion_code_in_kg.py:46: AssertionError
- generated xml file: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/pytest.xml -

---------- coverage: platform linux, python 3.10.14-final-0 ----------
Name                                                                        Stmts   Miss Branch BrPart  Cover   Missing
-----------------------------------------------------------------------------------------------------------------------
src/imgdataconvertcodegen/end_metadata_mapper.py                              131     90     52      7    26%   39, 41, 55, 67, 82-100, 112-125, 137-151, 163-177, 190-221, 238, 253, 259, 273-292, 304-336
src/imgdataconvertcodegen/image_data.py                                       226     13    142      9    93%   61, 69, 91, 118->120, 130, 302, 328-329, 338, 345-349
src/imgdataconvertcodegen/interface_cmd.py                                     11     11      0      0     0%   12-38
src/imgdataconvertcodegen/interface_py_api.py                                  25      4      0      0    84%   61-62, 66-67
src/imgdataconvertcodegen/knowledge_graph_construction/constructor.py         100      9     28      2    91%   37-38, 42, 81, 119-121, 124-125
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py      52      6     10      1    89%   50-57
src/imgdataconvertcodegen/knowledge_graph_construction/metedata/util.py        26      0     22      2    96%   24->27, 25->24
-----------------------------------------------------------------------------------------------------------------------
TOTAL                                                                        1051    133    488     21    87%

15 files skipped due to complete coverage.

=========================== short test summary info ============================
FAILED tests/test_conversion_code_in_kg.py::test_all_conversion_code_exec_on_cpu - AssertionError: expected [[[[ 0.6692914  -1.1102362  -0.984252  ]
     [-0.9055118   0.96850395 -0.35433072]
     [ 0.29133856  0.14960635 -2.8267717 ]
     ...
     [-0.10236222  0.77952754 -0.6850394 ]
     [-0.07086617 -0.8582677  -1.3307086 ]
     [ 0.19685042 -2.480315   -1.3622048 ]]
  
    [[ 0.496063   -2.2913384  -2.496063  ]
     [-0.5590551  -2.6692915  -1.1889764 ]
     [-1.7086614  -2.6220472  -0.9527559 ]
     ...
     [-1.535433   -0.19685042 -2.7637796 ]
     [-1.7874016   0.48031497 -0.4015748 ]
     [-1.7401575  -1.6771653  -1.2677165 ]]
  
    [[-2.8582678   0.79527557 -1.        ]
     [-1.7244095   0.3070866  -1.2992126 ]
     [-1.6141732  -1.503937   -1.503937  ]
     ...
     [ 0.35433066 -2.8740158  -1.        ]
     [-1.6456692  -1.3622048  -2.952756  ]
     [-1.7401575  -1.976378   -1.3307086 ]]
  
    ...
  
    [[-1.6771653   0.7322835   0.511811  ]
     [-2.464567   -2.3543305   0.22834647]
     [-0.6850394   0.984252   -1.0787401 ]
     ...
     [ 0.03937006 -0.19685042 -0.52755904]
     [-2.8897638  -0.3070866  -2.8897638 ]
     [-1.1417322  -2.7637796  -1.9606299 ]]
  
    [[-0.7007874  -0.00787401 -1.        ]
     [ 0.00787401 -0.3070866   0.25984251]
     [-1.8661418  -2.5905511  -1.9606299 ]
     ...
     [-2.1653543  -0.32283467  0.496063  ]
     [-2.4173229  -1.5669291   0.00787401]
     [-2.480315    0.46456695 -2.7952757 ]]
  
    [[-0.7322835   0.03937006  0.05511808]
     [-0.79527557 -0.08661419 -2.574803  ]
     [-2.6377952  -0.48031497 -0.02362204]
     ...
     [-1.2047244  -0.07086617 -1.6929134 ]
     [-1.9291339   0.5748031   0.16535437]
     [ 0.10236216 -2.2598424  -1.8661418 ]]]], but actual [[[[ 0.8346457  -0.05511811  0.00787402]
     [ 0.04724409  0.984252    0.32283464]
     [ 0.6456693   0.5748032  -0.9133858 ]
     ...
     [ 0.4488189   0.8897638   0.15748031]
     [ 0.46456692  0.07086614 -0.16535433]
     [ 0.5984252  -0.7401575  -0.18110237]]
  
    [[ 0.7480315  -0.6456693  -0.7480315 ]
     [ 0.22047244 -0.8346457  -0.09448819]
     [-0.35433072 -0.8110236   0.02362205]
     ...
     [-0.26771653  0.4015748  -0.88188976]
     [-0.39370078  0.7401575   0.2992126 ]
     [-0.37007874 -0.33858266 -0.13385826]]
  
    [[-0.92913383  0.8976378   0.        ]
     [-0.36220473  0.6535433  -0.1496063 ]
     [-0.30708662 -0.2519685  -0.2519685 ]
     ...
     [ 0.6771653  -0.93700784  0.        ]
     [-0.32283464 -0.18110237 -0.97637796]
     [-0.37007874 -0.48818898 -0.16535433]]
  
    ...
  
    [[-0.33858266  0.86614174  0.7559055 ]
     [-0.7322835  -0.6771653   0.61417323]
     [ 0.15748031  0.992126   -0.03937008]
     ...
     [ 0.51968503  0.4015748   0.23622048]
     [-0.9448819   0.3464567  -0.9448819 ]
     [-0.07086614 -0.88188976 -0.48031497]]
  
    [[ 0.1496063   0.496063    0.        ]
     [ 0.503937    0.3464567   0.62992126]
     [-0.43307087 -0.79527557 -0.48031497]
     ...
     [-0.5826772   0.33858266  0.7480315 ]
     [-0.70866144 -0.28346455  0.503937  ]
     [-0.7401575   0.7322835  -0.8976378 ]]
  
    [[ 0.13385826  0.51968503  0.52755904]
     [ 0.1023622   0.4566929  -0.78740156]
     [-0.8188976   0.25984251  0.48818898]
     ...
     [-0.1023622   0.46456692 -0.3464567 ]
     [-0.46456692  0.78740156  0.5826772 ]
     [ 0.5511811  -0.62992126 -0.43307087]]]]. conversion from
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
   imports: import skimage as ski
  conversion function: 
   def convert(var):
   return ski.util.img_as_float32(var)
  from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
assert False
 +  where False = is_image_equal(array([[[[ 0.6692914 , -1.1102362 , -0.984252  ],\n         [-0.9055118 ,  0.96850395, -0.35433072],\n         [ 0.29133...,\n         [-1.9291339 ,  0.5748031 ,  0.16535437],\n         [ 0.10236216, -2.2598424 , -1.8661418 ]]]], dtype=float32), array([[[[ 0.8346457 , -0.05511811,  0.00787402],\n         [ 0.04724409,  0.984252  ,  0.32283464],\n         [ 0.64566...,\n         [-0.46456692,  0.78740156,  0.5826772 ],\n         [ 0.5511811 , -0.62992126, -0.43307087]]]], dtype=float32))
=================== 1 failed, 48 passed, 3 skipped in 31.27s ===================
