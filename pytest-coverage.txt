============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-8.1.1, pluggy-1.4.0
rootdir: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen
configfile: pyproject.toml
plugins: cov-5.0.0
collected 52 items

tests/test_code_generation.py .......                                    [ 13%]
tests/test_conversion_code_execution.py .                                [ 15%]
tests/test_conversion_code_in_kg.py Fsss                                 [ 23%]
tests/test_io.py ....                                                    [ 30%]
tests/test_knowledge_graph.py ...........                                [ 51%]
tests/test_metadata.py ........                                          [ 67%]
tests/test_metadata_differ.py .......                                    [ 80%]
tests/test_py_interface.py ......                                        [ 92%]
tests/test_util.py ....                                                  [100%]

=================================== FAILURES ===================================
_____________________ test_all_conversion_code_exec_on_cpu _____________________

code_generator = <imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f03225a13c0>

    def test_all_conversion_code_exec_on_cpu(code_generator):
        kg = code_generator.knowledge_graph
        for edge in kg.edges:
            if is_code_exec_on_cpu(edge):
>               assert_exec_of_conversion_code_in_edge(*edge, kg)

tests/test_conversion_code_in_kg.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
target_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
kg = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f03a074b070>

    def assert_exec_of_conversion_code_in_edge(source_metadata, target_metadata, kg):
        edge_data = kg.get_edge_data(source_metadata, target_metadata)
        conversion = edge_data.get('conversion')
        assert conversion is not None, f"No conversion from {source_metadata} to {target_metadata}"
        assert len(conversion) == 2, (f"Expected two elements in the conversions, but got: {conversion} from"
                                      f" {source_metadata} to {target_metadata}")
        assert isinstance(conversion[0], str), (f"Expected the first element of the conversion to be a string, but got:"
                                                f" {conversion[0]} from {source_metadata} to {target_metadata}")
        assert isinstance(conversion[1], str), (f"Expected the second element of the conversion to be a string, but got:"
                                                f" {conversion[1]} from {source_metadata} to {target_metadata}")
        error_message = (f"conversion from\n {source_metadata} to\n {target_metadata} failed\n "
                         f"imports: {conversion[0]}\nconversion function: \n {conversion[1]}\nfrom {edge_data.get('factory')}")
    
        try:
            source_image, target_image = get_input_image_and_expected_output(source_metadata, target_metadata)
            func_name = re.search(r'(?<=def )\w+', conversion[1]).group(0)
    
            scope = {}
            scope.update({'source_image': source_image})
            exec(f"""{conversion[0]}
    {conversion[1]}
    actual_image = {func_name}(source_image)""", scope)
            actual_image = scope.get('actual_image')
        except Exception as e:
            raise AssertionError(f"Failed to execute conversion code from {error_message}") from e
    
>       assert is_image_equal(target_image,
                              actual_image), f'expected {target_image}, but actual {actual_image}. {error_message}'
E       AssertionError: expected [[[[-2.7165356  -2.448819   -0.5748031 ]
E            [-0.96850395 -0.3385827  -1.1889764 ]
E            [-0.08661419 -2.8582678  -1.6771653 ]
E            ...
E            [ 0.90551186  0.4330709   0.14960635]
E            [-1.3307086   0.7007874   0.16535437]
E            [-0.7480315   0.29133856 -1.3307086 ]]
E         
E           [[-1.031496   -1.7874016   0.7007874 ]
E            [-2.7322836  -2.511811   -1.8661418 ]
E            [-2.7322836  -0.7637795   0.6692914 ]
E            ...
E            [-1.4409449   0.5748031  -2.559055  ]
E            [-0.00787401 -1.7086614  -1.031496  ]
E            [ 0.9370079  -0.02362204 -3.        ]]
E         
E           [[-1.0472441  -0.96850395 -2.9212599 ]
E            [-0.496063   -1.2834646  -1.3307086 ]
E            [-0.05511808 -0.37007874  0.3228346 ]
E            ...
E            [-0.96850395  0.7637795  -1.5669291 ]
E            [-0.96850395 -0.24409449 -0.77952754]
E            [-0.511811    0.21259844 -1.015748  ]]
E         
E           ...
E         
E           [[-1.3937008   0.27559054 -2.7637796 ]
E            [ 0.8110236   0.6850394   0.984252  ]
E            [-0.5748031  -0.02362204 -1.8976378 ]
E            ...
E            [-1.5826771   0.85826766 -1.535433  ]
E            [ 0.52755904  0.8110236   0.984252  ]
E            [-2.6062992  -2.1653543   0.00787401]]
E         
E           [[-1.0944881   0.7007874  -0.7322835 ]
E            [ 0.79527557 -1.4409449  -0.25984251]
E            [-2.3543305  -1.015748    0.9370079 ]
E            ...
E            [-1.7716535  -0.29133856  0.19685042]
E            [-1.535433   -2.1338582  -2.3070865 ]
E            [ 0.5748031  -1.1417322  -0.11811024]]
E         
E           [[-0.05511808 -1.8346457  -2.2913384 ]
E            [ 0.85826766  0.10236216 -2.055118  ]
E            [-1.3622048  -1.031496   -0.8110236 ]
E            ...
E            [ 0.07086611 -0.77952754 -2.3858268 ]
E            [-0.46456695 -1.4409449  -2.448819  ]
E            [-2.8110237  -2.7007875   0.60629916]]]], but actual [[[[-0.8582677  -0.72440946  0.21259843]
E            [ 0.01574803  0.33070865 -0.09448819]
E            [ 0.4566929  -0.92913383 -0.33858266]
E            ...
E            [ 0.9527559   0.71653545  0.5748032 ]
E            [-0.16535433  0.8503937   0.5826772 ]
E            [ 0.12598425  0.6456693  -0.16535433]]
E         
E           [[-0.01574803 -0.39370078  0.8503937 ]
E            [-0.86614174 -0.7559055  -0.43307087]
E            [-0.86614174  0.11811024  0.8346457 ]
E            ...
E            [-0.22047244  0.78740156 -0.77952754]
E            [ 0.496063   -0.35433072 -0.01574803]
E            [ 0.96850395  0.48818898 -1.        ]]
E         
E           [[-0.02362205  0.01574803 -0.96062994]
E            [ 0.2519685  -0.14173228 -0.16535433]
E            [ 0.47244096  0.31496063  0.6614173 ]
E            ...
E            [ 0.01574803  0.88188976 -0.28346455]
E            [ 0.01574803  0.37795275  0.11023622]
E            [ 0.24409449  0.6062992  -0.00787402]]
E         
E           ...
E         
E           [[-0.19685039  0.63779527 -0.88188976]
E            [ 0.9055118   0.8425197   0.992126  ]
E            [ 0.21259843  0.48818898 -0.4488189 ]
E            ...
E            [-0.2913386   0.92913383 -0.26771653]
E            [ 0.7637795   0.9055118   0.992126  ]
E            [-0.8031496  -0.5826772   0.503937  ]]
E         
E           [[-0.04724409  0.8503937   0.13385826]
E            [ 0.8976378  -0.22047244  0.37007874]
E            [-0.6771653  -0.00787402  0.96850395]
E            ...
E            [-0.38582677  0.35433072  0.5984252 ]
E            [-0.26771653 -0.5669291  -0.6535433 ]
E            [ 0.78740156 -0.07086614  0.44094488]]
E         
E           [[ 0.47244096 -0.41732284 -0.6456693 ]
E            [ 0.92913383  0.5511811  -0.52755904]
E            [-0.18110237 -0.01574803  0.09448819]
E            ...
E            [ 0.53543305  0.11023622 -0.6929134 ]
E            [ 0.26771653 -0.22047244 -0.72440946]
E            [-0.9055118  -0.8503937   0.8031496 ]]]]. conversion from
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
E          imports: import skimage as ski
E         conversion function: 
E          def convert(var):
E          return ski.util.img_as_float32(var)
E         from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
E       assert False
E        +  where False = is_image_equal(array([[[[-2.7165356 , -2.448819  , -0.5748031 ],\n         [-0.96850395, -0.3385827 , -1.1889764 ],\n         [-0.08661...,\n         [-0.46456695, -1.4409449 , -2.448819  ],\n         [-2.8110237 , -2.7007875 ,  0.60629916]]]], dtype=float32), array([[[[-0.8582677 , -0.72440946,  0.21259843],\n         [ 0.01574803,  0.33070865, -0.09448819],\n         [ 0.45669...,\n         [ 0.26771653, -0.22047244, -0.72440946],\n         [-0.9055118 , -0.8503937 ,  0.8031496 ]]]], dtype=float32))

tests/test_conversion_code_in_kg.py:46: AssertionError
- generated xml file: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/pytest.xml -

---------- coverage: platform linux, python 3.10.14-final-0 ----------
Name                                                                        Stmts   Miss Branch BrPart  Cover   Missing
-----------------------------------------------------------------------------------------------------------------------
src/imgdataconvertcodegen/end_metadata_mapper.py                              131     90     52      7    26%   39, 41, 55, 67, 82-100, 112-125, 137-151, 163-177, 190-221, 238, 253, 259, 273-292, 304-336
src/imgdataconvertcodegen/image_data.py                                       226     13    142      9    93%   61, 69, 91, 118->120, 130, 302, 328-329, 338, 345-349
src/imgdataconvertcodegen/interface_cmd.py                                     11     11      0      0     0%   12-38
src/imgdataconvertcodegen/interface_py_api.py                                  25      4      0      0    84%   61-62, 66-67
src/imgdataconvertcodegen/knowledge_graph_construction/constructor.py         100      9     28      2    91%   37-38, 42, 81, 119-121, 124-125
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py      52      6     10      1    89%   50-57
src/imgdataconvertcodegen/knowledge_graph_construction/metedata/util.py        26      0     22      2    96%   24->27, 25->24
-----------------------------------------------------------------------------------------------------------------------
TOTAL                                                                        1051    133    488     21    87%

15 files skipped due to complete coverage.

=========================== short test summary info ============================
FAILED tests/test_conversion_code_in_kg.py::test_all_conversion_code_exec_on_cpu - AssertionError: expected [[[[-2.7165356  -2.448819   -0.5748031 ]
     [-0.96850395 -0.3385827  -1.1889764 ]
     [-0.08661419 -2.8582678  -1.6771653 ]
     ...
     [ 0.90551186  0.4330709   0.14960635]
     [-1.3307086   0.7007874   0.16535437]
     [-0.7480315   0.29133856 -1.3307086 ]]
  
    [[-1.031496   -1.7874016   0.7007874 ]
     [-2.7322836  -2.511811   -1.8661418 ]
     [-2.7322836  -0.7637795   0.6692914 ]
     ...
     [-1.4409449   0.5748031  -2.559055  ]
     [-0.00787401 -1.7086614  -1.031496  ]
     [ 0.9370079  -0.02362204 -3.        ]]
  
    [[-1.0472441  -0.96850395 -2.9212599 ]
     [-0.496063   -1.2834646  -1.3307086 ]
     [-0.05511808 -0.37007874  0.3228346 ]
     ...
     [-0.96850395  0.7637795  -1.5669291 ]
     [-0.96850395 -0.24409449 -0.77952754]
     [-0.511811    0.21259844 -1.015748  ]]
  
    ...
  
    [[-1.3937008   0.27559054 -2.7637796 ]
     [ 0.8110236   0.6850394   0.984252  ]
     [-0.5748031  -0.02362204 -1.8976378 ]
     ...
     [-1.5826771   0.85826766 -1.535433  ]
     [ 0.52755904  0.8110236   0.984252  ]
     [-2.6062992  -2.1653543   0.00787401]]
  
    [[-1.0944881   0.7007874  -0.7322835 ]
     [ 0.79527557 -1.4409449  -0.25984251]
     [-2.3543305  -1.015748    0.9370079 ]
     ...
     [-1.7716535  -0.29133856  0.19685042]
     [-1.535433   -2.1338582  -2.3070865 ]
     [ 0.5748031  -1.1417322  -0.11811024]]
  
    [[-0.05511808 -1.8346457  -2.2913384 ]
     [ 0.85826766  0.10236216 -2.055118  ]
     [-1.3622048  -1.031496   -0.8110236 ]
     ...
     [ 0.07086611 -0.77952754 -2.3858268 ]
     [-0.46456695 -1.4409449  -2.448819  ]
     [-2.8110237  -2.7007875   0.60629916]]]], but actual [[[[-0.8582677  -0.72440946  0.21259843]
     [ 0.01574803  0.33070865 -0.09448819]
     [ 0.4566929  -0.92913383 -0.33858266]
     ...
     [ 0.9527559   0.71653545  0.5748032 ]
     [-0.16535433  0.8503937   0.5826772 ]
     [ 0.12598425  0.6456693  -0.16535433]]
  
    [[-0.01574803 -0.39370078  0.8503937 ]
     [-0.86614174 -0.7559055  -0.43307087]
     [-0.86614174  0.11811024  0.8346457 ]
     ...
     [-0.22047244  0.78740156 -0.77952754]
     [ 0.496063   -0.35433072 -0.01574803]
     [ 0.96850395  0.48818898 -1.        ]]
  
    [[-0.02362205  0.01574803 -0.96062994]
     [ 0.2519685  -0.14173228 -0.16535433]
     [ 0.47244096  0.31496063  0.6614173 ]
     ...
     [ 0.01574803  0.88188976 -0.28346455]
     [ 0.01574803  0.37795275  0.11023622]
     [ 0.24409449  0.6062992  -0.00787402]]
  
    ...
  
    [[-0.19685039  0.63779527 -0.88188976]
     [ 0.9055118   0.8425197   0.992126  ]
     [ 0.21259843  0.48818898 -0.4488189 ]
     ...
     [-0.2913386   0.92913383 -0.26771653]
     [ 0.7637795   0.9055118   0.992126  ]
     [-0.8031496  -0.5826772   0.503937  ]]
  
    [[-0.04724409  0.8503937   0.13385826]
     [ 0.8976378  -0.22047244  0.37007874]
     [-0.6771653  -0.00787402  0.96850395]
     ...
     [-0.38582677  0.35433072  0.5984252 ]
     [-0.26771653 -0.5669291  -0.6535433 ]
     [ 0.78740156 -0.07086614  0.44094488]]
  
    [[ 0.47244096 -0.41732284 -0.6456693 ]
     [ 0.92913383  0.5511811  -0.52755904]
     [-0.18110237 -0.01574803  0.09448819]
     ...
     [ 0.53543305  0.11023622 -0.6929134 ]
     [ 0.26771653 -0.22047244 -0.72440946]
     [-0.9055118  -0.8503937   0.8031496 ]]]]. conversion from
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
   imports: import skimage as ski
  conversion function: 
   def convert(var):
   return ski.util.img_as_float32(var)
  from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
assert False
 +  where False = is_image_equal(array([[[[-2.7165356 , -2.448819  , -0.5748031 ],\n         [-0.96850395, -0.3385827 , -1.1889764 ],\n         [-0.08661...,\n         [-0.46456695, -1.4409449 , -2.448819  ],\n         [-2.8110237 , -2.7007875 ,  0.60629916]]]], dtype=float32), array([[[[-0.8582677 , -0.72440946,  0.21259843],\n         [ 0.01574803,  0.33070865, -0.09448819],\n         [ 0.45669...,\n         [ 0.26771653, -0.22047244, -0.72440946],\n         [-0.9055118 , -0.8503937 ,  0.8031496 ]]]], dtype=float32))
=================== 1 failed, 48 passed, 3 skipped in 28.67s ===================
