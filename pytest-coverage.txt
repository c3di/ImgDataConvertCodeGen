============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-8.1.1, pluggy-1.4.0
rootdir: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen
configfile: pyproject.toml
plugins: cov-5.0.0
collected 52 items

tests/test_code_generation.py .......                                    [ 13%]
tests/test_conversion_code_execution.py .                                [ 15%]
tests/test_conversion_code_in_kg.py Fsss                                 [ 23%]
tests/test_io.py ....                                                    [ 30%]
tests/test_knowledge_graph.py ...........                                [ 51%]
tests/test_metadata.py ........                                          [ 67%]
tests/test_metadata_differ.py .......                                    [ 80%]
tests/test_py_interface.py ......                                        [ 92%]
tests/test_util.py ....                                                  [100%]WARNING: Failed to generate report: No data to report.



=================================== FAILURES ===================================
_____________________ test_all_conversion_code_exec_on_cpu _____________________

code_generator = <imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f68bf962590>

    def test_all_conversion_code_exec_on_cpu(code_generator):
        kg = code_generator.knowledge_graph
        for edge in kg.edges:
            if is_code_exec_on_cpu(edge):
>               assert_exec_of_conversion_code_in_edge(*edge, kg)

tests/test_conversion_code_in_kg.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
target_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
kg = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f6945d63070>

    def assert_exec_of_conversion_code_in_edge(source_metadata, target_metadata, kg):
        edge_data = kg.get_edge_data(source_metadata, target_metadata)
        conversion = edge_data.get('conversion')
        assert conversion is not None, f"No conversion from {source_metadata} to {target_metadata}"
        assert len(conversion) == 2, (f"Expected two elements in the conversions, but got: {conversion} from"
                                      f" {source_metadata} to {target_metadata}")
        assert isinstance(conversion[0], str), (f"Expected the first element of the conversion to be a string, but got:"
                                                f" {conversion[0]} from {source_metadata} to {target_metadata}")
        assert isinstance(conversion[1], str), (f"Expected the second element of the conversion to be a string, but got:"
                                                f" {conversion[1]} from {source_metadata} to {target_metadata}")
        error_message = (f"conversion from\n {source_metadata} to\n {target_metadata} failed\n "
                         f"imports: {conversion[0]}\nconversion function: \n {conversion[1]}\nfrom {edge_data.get('factory')}")
    
        try:
            source_image, target_image = get_input_image_and_expected_output(source_metadata, target_metadata)
            func_name = re.search(r'(?<=def )\w+', conversion[1]).group(0)
    
            scope = {}
            scope.update({'source_image': source_image})
            exec(f"""{conversion[0]}
    {conversion[1]}
    actual_image = {func_name}(source_image)""", scope)
            actual_image = scope.get('actual_image')
        except Exception as e:
            raise AssertionError(f"Failed to execute conversion code from {error_message}") from e
    
>       assert is_image_equal(target_image,
                              actual_image), f'expected {target_image}, but actual {actual_image}. {error_message}'
E       AssertionError: expected [[[[-2.8267717  -3.          0.38582683]
E            [-0.3070866  -0.9370079  -2.3385825 ]
E            [-2.6692915  -2.1811023  -2.8425198 ]
E            ...
E            [-2.6220472   0.02362204 -1.9133859 ]
E            [-0.8267716   1.         -0.03937006]
E            [ 0.07086611 -0.25984251  0.6377952 ]]
E         
E           [[-2.6850395  -2.5905511   0.59055114]
E            [-1.2519685  -1.2992126  -2.952756  ]
E            [ 0.77952754 -1.8976378  -2.511811  ]
E            ...
E            [-1.9448819   0.8110236  -2.2440944 ]
E            [-1.992126   -0.29133856 -0.48031497]
E            [-0.9212598  -0.10236222 -1.4094489 ]]
E         
E           [[-2.3070865   0.37007868 -2.6850395 ]
E            [-1.1574804  -0.22834647 -1.2834646 ]
E            [-0.496063    0.8740157  -1.6929134 ]
E            ...
E            [-0.77952754  0.11811018  0.27559054]
E            [ 0.33858263  0.79527557 -0.79527557]
E            [-0.24409449 -0.10236222 -0.54330707]]
E         
E           ...
E         
E           [[-1.9291339  -2.3858268  -3.        ]
E            [-2.2755904  -1.0787401  -0.29133856]
E            [ 0.24409449 -1.8188976  -0.79527557]
E            ...
E            [-1.2677165   0.96850395 -0.3385827 ]
E            [-2.7322836  -1.0787401  -1.1259842 ]
E            [ 0.10236216 -1.1574804  -1.8661418 ]]
E         
E           [[-2.574803   -2.1496062  -2.968504  ]
E            [-0.10236222 -1.976378   -0.8267716 ]
E            [-2.527559    0.8267716   0.03937006]
E            ...
E            [ 0.46456695 -2.8110237  -1.4409449 ]
E            [ 0.511811   -0.13385826 -1.5984251 ]
E            [-1.7559055   0.65354335 -2.4173229 ]]
E         
E           [[-1.1732284   0.52755904  0.77952754]
E            [-2.559055   -0.96850395 -0.54330707]
E            [-2.9212599  -1.519685   -2.4173229 ]
E            ...
E            [-0.00787401  0.9370079  -2.4173229 ]
E            [-0.9527559  -1.9291339  -0.8267716 ]
E            [-1.519685   -2.3385825   0.10236216]]]], but actual [[[[-0.9133858  -1.          0.6929134 ]
E            [ 0.3464567   0.03149606 -0.6692913 ]
E            [-0.8346457  -0.5905512  -0.9212598 ]
E            ...
E            [-0.8110236   0.511811   -0.4566929 ]
E            [ 0.08661418  1.          0.48031497]
E            [ 0.53543305  0.37007874  0.8188976 ]]
E         
E           [[-0.8425197  -0.79527557  0.79527557]
E            [-0.12598425 -0.1496063  -0.97637796]
E            [ 0.8897638  -0.4488189  -0.7559055 ]
E            ...
E            [-0.47244096  0.9055118  -0.62204725]
E            [-0.496063    0.35433072  0.25984251]
E            [ 0.03937008  0.4488189  -0.2047244 ]]
E         
E           [[-0.6535433   0.68503934 -0.8425197 ]
E            [-0.07874016  0.38582677 -0.14173228]
E            [ 0.2519685   0.93700784 -0.3464567 ]
E            ...
E            [ 0.11023622  0.5590551   0.63779527]
E            [ 0.6692913   0.8976378   0.1023622 ]
E            [ 0.37795275  0.4488189   0.22834645]]
E         
E           ...
E         
E           [[-0.46456692 -0.6929134  -1.        ]
E            [-0.63779527 -0.03937008  0.35433072]
E            [ 0.62204725 -0.4094488   0.1023622 ]
E            ...
E            [-0.13385826  0.984252    0.33070865]
E            [-0.86614174 -0.03937008 -0.06299213]
E            [ 0.5511811  -0.07874016 -0.43307087]]
E         
E           [[-0.78740156 -0.5748032  -0.984252  ]
E            [ 0.4488189  -0.48818898  0.08661418]
E            [-0.7637795   0.9133858   0.51968503]
E            ...
E            [ 0.7322835  -0.9055118  -0.22047244]
E            [ 0.7559055   0.43307087 -0.2992126 ]
E            [-0.37795275  0.8267717  -0.70866144]]
E         
E           [[-0.08661418  0.7637795   0.8897638 ]
E            [-0.77952754  0.01574803  0.22834645]
E            [-0.96062994 -0.25984251 -0.70866144]
E            ...
E            [ 0.496063    0.96850395 -0.70866144]
E            [ 0.02362205 -0.46456692  0.08661418]
E            [-0.25984251 -0.6692913   0.5511811 ]]]]. conversion from
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
E          imports: import skimage as ski
E         conversion function: 
E          def convert(var):
E          return ski.util.img_as_float32(var)
E         from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
E       assert False
E        +  where False = is_image_equal(array([[[[-2.8267717 , -3.        ,  0.38582683],\n         [-0.3070866 , -0.9370079 , -2.3385825 ],\n         [-2.66929...,\n         [-0.9527559 , -1.9291339 , -0.8267716 ],\n         [-1.519685  , -2.3385825 ,  0.10236216]]]], dtype=float32), array([[[[-0.9133858 , -1.        ,  0.6929134 ],\n         [ 0.3464567 ,  0.03149606, -0.6692913 ],\n         [-0.83464...,\n         [ 0.02362205, -0.46456692,  0.08661418],\n         [-0.25984251, -0.6692913 ,  0.5511811 ]]]], dtype=float32))

tests/test_conversion_code_in_kg.py:46: AssertionError
- generated xml file: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/pytest.xml -

---------- coverage: platform linux, python 3.10.14-final-0 ----------

=========================== short test summary info ============================
FAILED tests/test_conversion_code_in_kg.py::test_all_conversion_code_exec_on_cpu - AssertionError: expected [[[[-2.8267717  -3.          0.38582683]
     [-0.3070866  -0.9370079  -2.3385825 ]
     [-2.6692915  -2.1811023  -2.8425198 ]
     ...
     [-2.6220472   0.02362204 -1.9133859 ]
     [-0.8267716   1.         -0.03937006]
     [ 0.07086611 -0.25984251  0.6377952 ]]
  
    [[-2.6850395  -2.5905511   0.59055114]
     [-1.2519685  -1.2992126  -2.952756  ]
     [ 0.77952754 -1.8976378  -2.511811  ]
     ...
     [-1.9448819   0.8110236  -2.2440944 ]
     [-1.992126   -0.29133856 -0.48031497]
     [-0.9212598  -0.10236222 -1.4094489 ]]
  
    [[-2.3070865   0.37007868 -2.6850395 ]
     [-1.1574804  -0.22834647 -1.2834646 ]
     [-0.496063    0.8740157  -1.6929134 ]
     ...
     [-0.77952754  0.11811018  0.27559054]
     [ 0.33858263  0.79527557 -0.79527557]
     [-0.24409449 -0.10236222 -0.54330707]]
  
    ...
  
    [[-1.9291339  -2.3858268  -3.        ]
     [-2.2755904  -1.0787401  -0.29133856]
     [ 0.24409449 -1.8188976  -0.79527557]
     ...
     [-1.2677165   0.96850395 -0.3385827 ]
     [-2.7322836  -1.0787401  -1.1259842 ]
     [ 0.10236216 -1.1574804  -1.8661418 ]]
  
    [[-2.574803   -2.1496062  -2.968504  ]
     [-0.10236222 -1.976378   -0.8267716 ]
     [-2.527559    0.8267716   0.03937006]
     ...
     [ 0.46456695 -2.8110237  -1.4409449 ]
     [ 0.511811   -0.13385826 -1.5984251 ]
     [-1.7559055   0.65354335 -2.4173229 ]]
  
    [[-1.1732284   0.52755904  0.77952754]
     [-2.559055   -0.96850395 -0.54330707]
     [-2.9212599  -1.519685   -2.4173229 ]
     ...
     [-0.00787401  0.9370079  -2.4173229 ]
     [-0.9527559  -1.9291339  -0.8267716 ]
     [-1.519685   -2.3385825   0.10236216]]]], but actual [[[[-0.9133858  -1.          0.6929134 ]
     [ 0.3464567   0.03149606 -0.6692913 ]
     [-0.8346457  -0.5905512  -0.9212598 ]
     ...
     [-0.8110236   0.511811   -0.4566929 ]
     [ 0.08661418  1.          0.48031497]
     [ 0.53543305  0.37007874  0.8188976 ]]
  
    [[-0.8425197  -0.79527557  0.79527557]
     [-0.12598425 -0.1496063  -0.97637796]
     [ 0.8897638  -0.4488189  -0.7559055 ]
     ...
     [-0.47244096  0.9055118  -0.62204725]
     [-0.496063    0.35433072  0.25984251]
     [ 0.03937008  0.4488189  -0.2047244 ]]
  
    [[-0.6535433   0.68503934 -0.8425197 ]
     [-0.07874016  0.38582677 -0.14173228]
     [ 0.2519685   0.93700784 -0.3464567 ]
     ...
     [ 0.11023622  0.5590551   0.63779527]
     [ 0.6692913   0.8976378   0.1023622 ]
     [ 0.37795275  0.4488189   0.22834645]]
  
    ...
  
    [[-0.46456692 -0.6929134  -1.        ]
     [-0.63779527 -0.03937008  0.35433072]
     [ 0.62204725 -0.4094488   0.1023622 ]
     ...
     [-0.13385826  0.984252    0.33070865]
     [-0.86614174 -0.03937008 -0.06299213]
     [ 0.5511811  -0.07874016 -0.43307087]]
  
    [[-0.78740156 -0.5748032  -0.984252  ]
     [ 0.4488189  -0.48818898  0.08661418]
     [-0.7637795   0.9133858   0.51968503]
     ...
     [ 0.7322835  -0.9055118  -0.22047244]
     [ 0.7559055   0.43307087 -0.2992126 ]
     [-0.37795275  0.8267717  -0.70866144]]
  
    [[-0.08661418  0.7637795   0.8897638 ]
     [-0.77952754  0.01574803  0.22834645]
     [-0.96062994 -0.25984251 -0.70866144]
     ...
     [ 0.496063    0.96850395 -0.70866144]
     [ 0.02362205 -0.46456692  0.08661418]
     [-0.25984251 -0.6692913   0.5511811 ]]]]. conversion from
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
   imports: import skimage as ski
  conversion function: 
   def convert(var):
   return ski.util.img_as_float32(var)
  from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
assert False
 +  where False = is_image_equal(array([[[[-2.8267717 , -3.        ,  0.38582683],\n         [-0.3070866 , -0.9370079 , -2.3385825 ],\n         [-2.66929...,\n         [-0.9527559 , -1.9291339 , -0.8267716 ],\n         [-1.519685  , -2.3385825 ,  0.10236216]]]], dtype=float32), array([[[[-0.9133858 , -1.        ,  0.6929134 ],\n         [ 0.3464567 ,  0.03149606, -0.6692913 ],\n         [-0.83464...,\n         [ 0.02362205, -0.46456692,  0.08661418],\n         [-0.25984251, -0.6692913 ,  0.5511811 ]]]], dtype=float32))
=================== 1 failed, 48 passed, 3 skipped in 26.23s ===================
