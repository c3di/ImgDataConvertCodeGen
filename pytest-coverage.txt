============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-8.1.1, pluggy-1.4.0
rootdir: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen
configfile: pyproject.toml
plugins: cov-5.0.0
collected 52 items

tests/test_code_generation.py .......                                    [ 13%]
tests/test_conversion_code_execution.py .                                [ 15%]
tests/test_conversion_code_in_kg.py Fsss                                 [ 23%]
tests/test_io.py ....                                                    [ 30%]
tests/test_knowledge_graph.py ...........                                [ 51%]
tests/test_metadata.py ........                                          [ 67%]
tests/test_metadata_differ.py .......                                    [ 80%]
tests/test_py_interface.py ......                                        [ 92%]
tests/test_util.py ....                                                  [100%]

=================================== FAILURES ===================================
_____________________ test_all_conversion_code_exec_on_cpu _____________________

code_generator = <imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7fa85b2a61d0>

    def test_all_conversion_code_exec_on_cpu(code_generator):
        kg = code_generator.knowledge_graph
        for edge in kg.edges:
            if is_code_exec_on_cpu(edge):
>               assert_exec_of_conversion_code_in_edge(*edge, kg)

tests/test_conversion_code_in_kg.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
target_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
kg = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7fa8e14c2e90>

    def assert_exec_of_conversion_code_in_edge(source_metadata, target_metadata, kg):
        edge_data = kg.get_edge_data(source_metadata, target_metadata)
        conversion = edge_data.get('conversion')
        assert conversion is not None, f"No conversion from {source_metadata} to {target_metadata}"
        assert len(conversion) == 2, (f"Expected two elements in the conversions, but got: {conversion} from"
                                      f" {source_metadata} to {target_metadata}")
        assert isinstance(conversion[0], str), (f"Expected the first element of the conversion to be a string, but got:"
                                                f" {conversion[0]} from {source_metadata} to {target_metadata}")
        assert isinstance(conversion[1], str), (f"Expected the second element of the conversion to be a string, but got:"
                                                f" {conversion[1]} from {source_metadata} to {target_metadata}")
        error_message = (f"conversion from\n {source_metadata} to\n {target_metadata} failed\n "
                         f"imports: {conversion[0]}\nconversion function: \n {conversion[1]}\nfrom {edge_data.get('factory')}")
    
        try:
            source_image, target_image = get_input_image_and_expected_output(source_metadata, target_metadata)
            func_name = re.search(r'(?<=def )\w+', conversion[1]).group(0)
    
            scope = {}
            scope.update({'source_image': source_image})
            exec(f"""{conversion[0]}
    {conversion[1]}
    actual_image = {func_name}(source_image)""", scope)
            actual_image = scope.get('actual_image')
        except Exception as e:
            raise AssertionError(f"Failed to execute conversion code from {error_message}") from e
    
>       assert is_image_equal(target_image,
                              actual_image), f'expected {target_image}, but actual {actual_image}. {error_message}'
E       AssertionError: expected [[[[-1.7244095  -0.11811024  0.8740157 ]
E            [-2.1653543  -1.7874016   0.7480315 ]
E            [-2.8425198  -2.3858268   0.7637795 ]
E            ...
E            [-0.13385826 -1.3937008  -1.2362205 ]
E            [-1.6929134   0.48031497 -2.3543305 ]
E            [-1.8661418  -1.7244095   0.05511808]]
E         
E           [[ 0.71653545 -0.7480315  -0.6850394 ]
E            [-2.559055   -1.7559055   0.16535437]
E            [ 0.7637795  -2.0866141   0.8740157 ]
E            ...
E            [-1.5511811  -0.3385827  -1.8188976 ]
E            [-2.7952757   0.1338582   0.4330709 ]
E            [-0.16535431 -0.6062992  -2.543307  ]]
E         
E           [[-0.37007874 -0.19685042 -0.3070866 ]
E            [-1.2677165  -2.7952757   0.71653545]
E            [-1.3149606  -0.29133856 -0.79527557]
E            ...
E            [ 0.90551186 -2.0866141   0.9370079 ]
E            [-1.8661418   0.38582683  0.03937006]
E            [ 0.511811   -2.511811   -0.10236222]]
E         
E           ...
E         
E           [[-0.87401575 -0.77952754  0.03937006]
E            [ 0.21259844 -2.7165356  -2.1338582 ]
E            [-2.464567    0.21259844  0.90551186]
E            ...
E            [-0.6535433  -3.          0.25984251]
E            [-0.4330709  -2.511811    0.8740157 ]
E            [-2.7322836   0.16535437 -1.8661418 ]]
E         
E           [[-0.4015748  -1.7716535   0.71653545]
E            [-0.25984251  0.6692914  -2.7007875 ]
E            [-1.2677165   1.          0.14960635]
E            ...
E            [-0.984252   -2.3543305   0.60629916]
E            [ 0.8267716   0.6220472  -2.543307  ]
E            [ 0.71653545 -3.         -1.6141732 ]]
E         
E           [[-2.3700786  -2.952756    0.984252  ]
E            [-2.4015749  -1.031496   -1.9448819 ]
E            [-0.5748031  -1.8503938   0.40157485]
E            ...
E            [-0.8582677   0.88976383 -0.96850395]
E            [-2.6377952  -1.2362205  -0.8267716 ]
E            [ 0.37007868 -2.9055119  -1.8031496 ]]]], but actual [[[[-0.36220473  0.44094488  0.93700784]
E            [-0.5826772  -0.39370078  0.87401575]
E            [-0.9212598  -0.6929134   0.88188976]
E            ...
E            [ 0.43307087 -0.19685039 -0.11811024]
E            [-0.3464567   0.7401575  -0.6771653 ]
E            [-0.43307087 -0.36220473  0.52755904]]
E         
E           [[ 0.8582677   0.12598425  0.15748031]
E            [-0.77952754 -0.37795275  0.5826772 ]
E            [ 0.88188976 -0.54330707  0.93700784]
E            ...
E            [-0.27559054  0.33070865 -0.4094488 ]
E            [-0.8976378   0.5669291   0.71653545]
E            [ 0.41732284  0.19685039 -0.77165353]]
E         
E           [[ 0.31496063  0.4015748   0.3464567 ]
E            [-0.13385826 -0.8976378   0.8582677 ]
E            [-0.15748031  0.35433072  0.1023622 ]
E            ...
E            [ 0.9527559  -0.54330707  0.96850395]
E            [-0.43307087  0.6929134   0.51968503]
E            [ 0.7559055  -0.7559055   0.4488189 ]]
E         
E           ...
E         
E           [[ 0.06299213  0.11023622  0.51968503]
E            [ 0.6062992  -0.8582677  -0.5669291 ]
E            [-0.7322835   0.6062992   0.9527559 ]
E            ...
E            [ 0.17322835 -1.          0.62992126]
E            [ 0.28346455 -0.7559055   0.93700784]
E            [-0.86614174  0.5826772  -0.43307087]]
E         
E           [[ 0.2992126  -0.38582677  0.8582677 ]
E            [ 0.37007874  0.8346457  -0.8503937 ]
E            [-0.13385826  1.          0.5748032 ]
E            ...
E            [ 0.00787402 -0.6771653   0.8031496 ]
E            [ 0.9133858   0.8110236  -0.77165353]
E            [ 0.8582677  -1.         -0.30708662]]
E         
E           [[-0.68503934 -0.97637796  0.992126  ]
E            [-0.7007874  -0.01574803 -0.47244096]
E            [ 0.21259843 -0.42519686  0.7007874 ]
E            ...
E            [ 0.07086614  0.9448819   0.01574803]
E            [-0.8188976  -0.11811024  0.08661418]
E            [ 0.68503934 -0.9527559  -0.4015748 ]]]]. conversion from
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
E          imports: import skimage as ski
E         conversion function: 
E          def convert(var):
E          return ski.util.img_as_float32(var)
E         from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
E       assert False
E        +  where False = is_image_equal(array([[[[-1.7244095 , -0.11811024,  0.8740157 ],\n         [-2.1653543 , -1.7874016 ,  0.7480315 ],\n         [-2.84251...,\n         [-2.6377952 , -1.2362205 , -0.8267716 ],\n         [ 0.37007868, -2.9055119 , -1.8031496 ]]]], dtype=float32), array([[[[-0.36220473,  0.44094488,  0.93700784],\n         [-0.5826772 , -0.39370078,  0.87401575],\n         [-0.92125...,\n         [-0.8188976 , -0.11811024,  0.08661418],\n         [ 0.68503934, -0.9527559 , -0.4015748 ]]]], dtype=float32))

tests/test_conversion_code_in_kg.py:46: AssertionError
- generated xml file: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/pytest.xml -

---------- coverage: platform linux, python 3.10.14-final-0 ----------
Name                                                                        Stmts   Miss Branch BrPart  Cover   Missing
-----------------------------------------------------------------------------------------------------------------------
src/imgdataconvertcodegen/end_metadata_mapper.py                              131     90     52      7    26%   39, 41, 55, 67, 82-100, 112-125, 137-151, 163-177, 190-221, 238, 253, 259, 273-292, 304-336
src/imgdataconvertcodegen/image_data.py                                       226     13    142      9    93%   61, 69, 91, 118->120, 130, 302, 328-329, 338, 345-349
src/imgdataconvertcodegen/interface_cmd.py                                     11     11      0      0     0%   12-38
src/imgdataconvertcodegen/interface_py_api.py                                  25      4      0      0    84%   61-62, 66-67
src/imgdataconvertcodegen/knowledge_graph_construction/constructor.py         100      9     28      2    91%   37-38, 42, 81, 119-121, 124-125
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py      52      6     10      1    89%   50-57
src/imgdataconvertcodegen/knowledge_graph_construction/metedata/util.py        26      0     22      2    96%   24->27, 25->24
-----------------------------------------------------------------------------------------------------------------------
TOTAL                                                                        1051    133    488     21    87%

15 files skipped due to complete coverage.

=========================== short test summary info ============================
FAILED tests/test_conversion_code_in_kg.py::test_all_conversion_code_exec_on_cpu - AssertionError: expected [[[[-1.7244095  -0.11811024  0.8740157 ]
     [-2.1653543  -1.7874016   0.7480315 ]
     [-2.8425198  -2.3858268   0.7637795 ]
     ...
     [-0.13385826 -1.3937008  -1.2362205 ]
     [-1.6929134   0.48031497 -2.3543305 ]
     [-1.8661418  -1.7244095   0.05511808]]
  
    [[ 0.71653545 -0.7480315  -0.6850394 ]
     [-2.559055   -1.7559055   0.16535437]
     [ 0.7637795  -2.0866141   0.8740157 ]
     ...
     [-1.5511811  -0.3385827  -1.8188976 ]
     [-2.7952757   0.1338582   0.4330709 ]
     [-0.16535431 -0.6062992  -2.543307  ]]
  
    [[-0.37007874 -0.19685042 -0.3070866 ]
     [-1.2677165  -2.7952757   0.71653545]
     [-1.3149606  -0.29133856 -0.79527557]
     ...
     [ 0.90551186 -2.0866141   0.9370079 ]
     [-1.8661418   0.38582683  0.03937006]
     [ 0.511811   -2.511811   -0.10236222]]
  
    ...
  
    [[-0.87401575 -0.77952754  0.03937006]
     [ 0.21259844 -2.7165356  -2.1338582 ]
     [-2.464567    0.21259844  0.90551186]
     ...
     [-0.6535433  -3.          0.25984251]
     [-0.4330709  -2.511811    0.8740157 ]
     [-2.7322836   0.16535437 -1.8661418 ]]
  
    [[-0.4015748  -1.7716535   0.71653545]
     [-0.25984251  0.6692914  -2.7007875 ]
     [-1.2677165   1.          0.14960635]
     ...
     [-0.984252   -2.3543305   0.60629916]
     [ 0.8267716   0.6220472  -2.543307  ]
     [ 0.71653545 -3.         -1.6141732 ]]
  
    [[-2.3700786  -2.952756    0.984252  ]
     [-2.4015749  -1.031496   -1.9448819 ]
     [-0.5748031  -1.8503938   0.40157485]
     ...
     [-0.8582677   0.88976383 -0.96850395]
     [-2.6377952  -1.2362205  -0.8267716 ]
     [ 0.37007868 -2.9055119  -1.8031496 ]]]], but actual [[[[-0.36220473  0.44094488  0.93700784]
     [-0.5826772  -0.39370078  0.87401575]
     [-0.9212598  -0.6929134   0.88188976]
     ...
     [ 0.43307087 -0.19685039 -0.11811024]
     [-0.3464567   0.7401575  -0.6771653 ]
     [-0.43307087 -0.36220473  0.52755904]]
  
    [[ 0.8582677   0.12598425  0.15748031]
     [-0.77952754 -0.37795275  0.5826772 ]
     [ 0.88188976 -0.54330707  0.93700784]
     ...
     [-0.27559054  0.33070865 -0.4094488 ]
     [-0.8976378   0.5669291   0.71653545]
     [ 0.41732284  0.19685039 -0.77165353]]
  
    [[ 0.31496063  0.4015748   0.3464567 ]
     [-0.13385826 -0.8976378   0.8582677 ]
     [-0.15748031  0.35433072  0.1023622 ]
     ...
     [ 0.9527559  -0.54330707  0.96850395]
     [-0.43307087  0.6929134   0.51968503]
     [ 0.7559055  -0.7559055   0.4488189 ]]
  
    ...
  
    [[ 0.06299213  0.11023622  0.51968503]
     [ 0.6062992  -0.8582677  -0.5669291 ]
     [-0.7322835   0.6062992   0.9527559 ]
     ...
     [ 0.17322835 -1.          0.62992126]
     [ 0.28346455 -0.7559055   0.93700784]
     [-0.86614174  0.5826772  -0.43307087]]
  
    [[ 0.2992126  -0.38582677  0.8582677 ]
     [ 0.37007874  0.8346457  -0.8503937 ]
     [-0.13385826  1.          0.5748032 ]
     ...
     [ 0.00787402 -0.6771653   0.8031496 ]
     [ 0.9133858   0.8110236  -0.77165353]
     [ 0.8582677  -1.         -0.30708662]]
  
    [[-0.68503934 -0.97637796  0.992126  ]
     [-0.7007874  -0.01574803 -0.47244096]
     [ 0.21259843 -0.42519686  0.7007874 ]
     ...
     [ 0.07086614  0.9448819   0.01574803]
     [-0.8188976  -0.11811024  0.08661418]
     [ 0.68503934 -0.9527559  -0.4015748 ]]]]. conversion from
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
   imports: import skimage as ski
  conversion function: 
   def convert(var):
   return ski.util.img_as_float32(var)
  from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
assert False
 +  where False = is_image_equal(array([[[[-1.7244095 , -0.11811024,  0.8740157 ],\n         [-2.1653543 , -1.7874016 ,  0.7480315 ],\n         [-2.84251...,\n         [-2.6377952 , -1.2362205 , -0.8267716 ],\n         [ 0.37007868, -2.9055119 , -1.8031496 ]]]], dtype=float32), array([[[[-0.36220473,  0.44094488,  0.93700784],\n         [-0.5826772 , -0.39370078,  0.87401575],\n         [-0.92125...,\n         [-0.8188976 , -0.11811024,  0.08661418],\n         [ 0.68503934, -0.9527559 , -0.4015748 ]]]], dtype=float32))
=================== 1 failed, 48 passed, 3 skipped in 29.02s ===================
