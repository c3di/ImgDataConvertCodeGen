============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-8.1.1, pluggy-1.4.0
rootdir: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen
configfile: pyproject.toml
plugins: cov-5.0.0
collected 52 items

tests/test_code_generation.py .......                                    [ 13%]
tests/test_conversion_code_execution.py .                                [ 15%]
tests/test_conversion_code_in_kg.py Fsss                                 [ 23%]
tests/test_io.py ....                                                    [ 30%]
tests/test_knowledge_graph.py ...........                                [ 51%]
tests/test_metadata.py ........                                          [ 67%]
tests/test_metadata_differ.py .......                                    [ 80%]
tests/test_py_interface.py ......                                        [ 92%]
tests/test_util.py ....                                                  [100%]WARNING: Failed to generate report: No data to report.



=================================== FAILURES ===================================
_____________________ test_all_conversion_code_exec_on_cpu _____________________

code_generator = <imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f687eccca30>

    def test_all_conversion_code_exec_on_cpu(code_generator):
        kg = code_generator.knowledge_graph
        for edge in kg.edges:
            if is_code_exec_on_cpu(edge):
>               assert_exec_of_conversion_code_in_edge(*edge, kg)

tests/test_conversion_code_in_kg.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
target_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
kg = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f68fce4ae60>

    def assert_exec_of_conversion_code_in_edge(source_metadata, target_metadata, kg):
        edge_data = kg.get_edge_data(source_metadata, target_metadata)
        conversion = edge_data.get('conversion')
        assert conversion is not None, f"No conversion from {source_metadata} to {target_metadata}"
        assert len(conversion) == 2, (f"Expected two elements in the conversions, but got: {conversion} from"
                                      f" {source_metadata} to {target_metadata}")
        assert isinstance(conversion[0], str), (f"Expected the first element of the conversion to be a string, but got:"
                                                f" {conversion[0]} from {source_metadata} to {target_metadata}")
        assert isinstance(conversion[1], str), (f"Expected the second element of the conversion to be a string, but got:"
                                                f" {conversion[1]} from {source_metadata} to {target_metadata}")
        error_message = (f"conversion from\n {source_metadata} to\n {target_metadata} failed\n "
                         f"imports: {conversion[0]}\nconversion function: \n {conversion[1]}\nfrom {edge_data.get('factory')}")
    
        try:
            source_image, target_image = get_input_image_and_expected_output(source_metadata, target_metadata)
            func_name = re.search(r'(?<=def )\w+', conversion[1]).group(0)
    
            scope = {}
            scope.update({'source_image': source_image})
            exec(f"""{conversion[0]}
    {conversion[1]}
    actual_image = {func_name}(source_image)""", scope)
            actual_image = scope.get('actual_image')
        except Exception as e:
            raise AssertionError(f"Failed to execute conversion code from {error_message}") from e
    
>       assert is_image_equal(target_image,
                              actual_image), f'expected {target_image}, but actual {actual_image}. {error_message}'
E       AssertionError: expected [[[[-2.1181102  -0.35433072  0.96850395]
E            [ 0.90551186 -0.8897638  -1.9448819 ]
E            [ 0.07086611 -1.3779528  -1.0944881 ]
E            ...
E            [-2.8110237  -0.6692914  -0.7007874 ]
E            [-1.9133859   0.7007874  -0.52755904]
E            [-2.6377952  -2.527559   -2.2440944 ]]
E         
E           [[-0.62204725 -1.8031496  -2.1968503 ]
E            [-1.8346457  -1.9448819  -1.2204725 ]
E            [-1.2992126  -0.511811   -2.7795277 ]
E            ...
E            [-1.7244095  -2.8897638   0.33858263]
E            [ 0.60629916  0.52755904 -1.031496  ]
E            [-1.0944881  -0.4173228  -1.0472441 ]]
E         
E           [[-2.2755904  -0.5748031   0.16535437]
E            [-1.1259842  -0.02362204 -2.937008  ]
E            [-2.2598424  -0.6062992  -1.1889764 ]
E            ...
E            [ 0.14960635 -2.6692915  -0.22834647]
E            [-1.9133859   0.71653545 -2.464567  ]
E            [-2.1496062  -0.38582677 -1.992126  ]]
E         
E           ...
E         
E           [[-0.07086617 -1.8188976   0.37007868]
E            [-1.3937008   0.85826766 -2.7165356 ]
E            [-0.79527557 -2.4015749  -2.7007875 ]
E            ...
E            [-2.8425198  -2.4015749  -0.29133856]
E            [-2.2598424  -1.0629921  -1.        ]
E            [-2.1496062  -2.7637796  -2.9212599 ]]
E         
E           [[ 0.6850394   0.496063    0.37007868]
E            [-1.7874016  -3.         -1.535433  ]
E            [-2.6062992  -2.3228345  -0.13385826]
E            ...
E            [-0.37007874  0.19685042 -1.015748  ]
E            [-1.2204725  -1.7244095  -2.070866  ]
E            [-1.9291339  -2.7952757   0.9370079 ]]
E         
E           [[-2.7165356  -2.9212599  -0.32283467]
E            [-1.3149606   0.984252    0.60629916]
E            [-1.9133859  -1.1259842  -2.3543305 ]
E            ...
E            [-0.496063   -2.6220472  -0.44881892]
E            [-2.2125983  -2.8740158  -1.0472441 ]
E            [-2.2755904   0.984252    0.07086611]]]], but actual [[[[-0.5590551   0.32283464  0.984252  ]
E            [ 0.9527559   0.05511811 -0.47244096]
E            [ 0.53543305 -0.18897638 -0.04724409]
E            ...
E            [-0.9055118   0.16535433  0.1496063 ]
E            [-0.4566929   0.8503937   0.23622048]
E            [-0.8188976  -0.7637795  -0.62204725]]
E         
E           [[ 0.18897638 -0.4015748  -0.5984252 ]
E            [-0.41732284 -0.47244096 -0.11023622]
E            [-0.1496063   0.24409449 -0.8897638 ]
E            ...
E            [-0.36220473 -0.9448819   0.6692913 ]
E            [ 0.8031496   0.7637795  -0.01574803]
E            [-0.04724409  0.2913386  -0.02362205]]
E         
E           [[-0.63779527  0.21259843  0.5826772 ]
E            [-0.06299213  0.48818898 -0.96850395]
E            [-0.62992126  0.19685039 -0.09448819]
E            ...
E            [ 0.5748032  -0.8346457   0.38582677]
E            [-0.4566929   0.8582677  -0.7322835 ]
E            [-0.5748032   0.30708662 -0.496063  ]]
E         
E           ...
E         
E           [[ 0.46456692 -0.4094488   0.68503934]
E            [-0.19685039  0.92913383 -0.8582677 ]
E            [ 0.1023622  -0.7007874  -0.8503937 ]
E            ...
E            [-0.9212598  -0.7007874   0.35433072]
E            [-0.62992126 -0.03149606  0.        ]
E            [-0.5748032  -0.88188976 -0.96062994]]
E         
E           [[ 0.8425197   0.7480315   0.68503934]
E            [-0.39370078 -1.         -0.26771653]
E            [-0.8031496  -0.6614173   0.43307087]
E            ...
E            [ 0.31496063  0.5984252  -0.00787402]
E            [-0.11023622 -0.36220473 -0.53543305]
E            [-0.46456692 -0.8976378   0.96850395]]
E         
E           [[-0.8582677  -0.96062994  0.33858266]
E            [-0.15748031  0.992126    0.8031496 ]
E            [-0.4566929  -0.06299213 -0.6771653 ]
E            ...
E            [ 0.2519685  -0.8110236   0.27559054]
E            [-0.6062992  -0.93700784 -0.02362205]
E            [-0.63779527  0.992126    0.53543305]]]]. conversion from
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
E          imports: import skimage as ski
E         conversion function: 
E          def convert(var):
E          return ski.util.img_as_float32(var)
E         from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
E       assert False
E        +  where False = is_image_equal(array([[[[-2.1181102 , -0.35433072,  0.96850395],\n         [ 0.90551186, -0.8897638 , -1.9448819 ],\n         [ 0.07086...,\n         [-2.2125983 , -2.8740158 , -1.0472441 ],\n         [-2.2755904 ,  0.984252  ,  0.07086611]]]], dtype=float32), array([[[[-0.5590551 ,  0.32283464,  0.984252  ],\n         [ 0.9527559 ,  0.05511811, -0.47244096],\n         [ 0.53543...,\n         [-0.6062992 , -0.93700784, -0.02362205],\n         [-0.63779527,  0.992126  ,  0.53543305]]]], dtype=float32))

tests/test_conversion_code_in_kg.py:46: AssertionError
- generated xml file: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/pytest.xml -

---------- coverage: platform linux, python 3.10.14-final-0 ----------

=========================== short test summary info ============================
FAILED tests/test_conversion_code_in_kg.py::test_all_conversion_code_exec_on_cpu - AssertionError: expected [[[[-2.1181102  -0.35433072  0.96850395]
     [ 0.90551186 -0.8897638  -1.9448819 ]
     [ 0.07086611 -1.3779528  -1.0944881 ]
     ...
     [-2.8110237  -0.6692914  -0.7007874 ]
     [-1.9133859   0.7007874  -0.52755904]
     [-2.6377952  -2.527559   -2.2440944 ]]
  
    [[-0.62204725 -1.8031496  -2.1968503 ]
     [-1.8346457  -1.9448819  -1.2204725 ]
     [-1.2992126  -0.511811   -2.7795277 ]
     ...
     [-1.7244095  -2.8897638   0.33858263]
     [ 0.60629916  0.52755904 -1.031496  ]
     [-1.0944881  -0.4173228  -1.0472441 ]]
  
    [[-2.2755904  -0.5748031   0.16535437]
     [-1.1259842  -0.02362204 -2.937008  ]
     [-2.2598424  -0.6062992  -1.1889764 ]
     ...
     [ 0.14960635 -2.6692915  -0.22834647]
     [-1.9133859   0.71653545 -2.464567  ]
     [-2.1496062  -0.38582677 -1.992126  ]]
  
    ...
  
    [[-0.07086617 -1.8188976   0.37007868]
     [-1.3937008   0.85826766 -2.7165356 ]
     [-0.79527557 -2.4015749  -2.7007875 ]
     ...
     [-2.8425198  -2.4015749  -0.29133856]
     [-2.2598424  -1.0629921  -1.        ]
     [-2.1496062  -2.7637796  -2.9212599 ]]
  
    [[ 0.6850394   0.496063    0.37007868]
     [-1.7874016  -3.         -1.535433  ]
     [-2.6062992  -2.3228345  -0.13385826]
     ...
     [-0.37007874  0.19685042 -1.015748  ]
     [-1.2204725  -1.7244095  -2.070866  ]
     [-1.9291339  -2.7952757   0.9370079 ]]
  
    [[-2.7165356  -2.9212599  -0.32283467]
     [-1.3149606   0.984252    0.60629916]
     [-1.9133859  -1.1259842  -2.3543305 ]
     ...
     [-0.496063   -2.6220472  -0.44881892]
     [-2.2125983  -2.8740158  -1.0472441 ]
     [-2.2755904   0.984252    0.07086611]]]], but actual [[[[-0.5590551   0.32283464  0.984252  ]
     [ 0.9527559   0.05511811 -0.47244096]
     [ 0.53543305 -0.18897638 -0.04724409]
     ...
     [-0.9055118   0.16535433  0.1496063 ]
     [-0.4566929   0.8503937   0.23622048]
     [-0.8188976  -0.7637795  -0.62204725]]
  
    [[ 0.18897638 -0.4015748  -0.5984252 ]
     [-0.41732284 -0.47244096 -0.11023622]
     [-0.1496063   0.24409449 -0.8897638 ]
     ...
     [-0.36220473 -0.9448819   0.6692913 ]
     [ 0.8031496   0.7637795  -0.01574803]
     [-0.04724409  0.2913386  -0.02362205]]
  
    [[-0.63779527  0.21259843  0.5826772 ]
     [-0.06299213  0.48818898 -0.96850395]
     [-0.62992126  0.19685039 -0.09448819]
     ...
     [ 0.5748032  -0.8346457   0.38582677]
     [-0.4566929   0.8582677  -0.7322835 ]
     [-0.5748032   0.30708662 -0.496063  ]]
  
    ...
  
    [[ 0.46456692 -0.4094488   0.68503934]
     [-0.19685039  0.92913383 -0.8582677 ]
     [ 0.1023622  -0.7007874  -0.8503937 ]
     ...
     [-0.9212598  -0.7007874   0.35433072]
     [-0.62992126 -0.03149606  0.        ]
     [-0.5748032  -0.88188976 -0.96062994]]
  
    [[ 0.8425197   0.7480315   0.68503934]
     [-0.39370078 -1.         -0.26771653]
     [-0.8031496  -0.6614173   0.43307087]
     ...
     [ 0.31496063  0.5984252  -0.00787402]
     [-0.11023622 -0.36220473 -0.53543305]
     [-0.46456692 -0.8976378   0.96850395]]
  
    [[-0.8582677  -0.96062994  0.33858266]
     [-0.15748031  0.992126    0.8031496 ]
     [-0.4566929  -0.06299213 -0.6771653 ]
     ...
     [ 0.2519685  -0.8110236   0.27559054]
     [-0.6062992  -0.93700784 -0.02362205]
     [-0.63779527  0.992126    0.53543305]]]]. conversion from
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
   imports: import skimage as ski
  conversion function: 
   def convert(var):
   return ski.util.img_as_float32(var)
  from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
assert False
 +  where False = is_image_equal(array([[[[-2.1181102 , -0.35433072,  0.96850395],\n         [ 0.90551186, -0.8897638 , -1.9448819 ],\n         [ 0.07086...,\n         [-2.2125983 , -2.8740158 , -1.0472441 ],\n         [-2.2755904 ,  0.984252  ,  0.07086611]]]], dtype=float32), array([[[[-0.5590551 ,  0.32283464,  0.984252  ],\n         [ 0.9527559 ,  0.05511811, -0.47244096],\n         [ 0.53543...,\n         [-0.6062992 , -0.93700784, -0.02362205],\n         [-0.63779527,  0.992126  ,  0.53543305]]]], dtype=float32))
=================== 1 failed, 48 passed, 3 skipped in 25.30s ===================
