============================= test session starts ==============================
platform linux -- Python 3.10.14, pytest-8.1.1, pluggy-1.4.0
rootdir: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen
configfile: pyproject.toml
plugins: cov-5.0.0
collected 52 items

tests/test_code_generation.py .......                                    [ 13%]
tests/test_conversion_code_execution.py .                                [ 15%]
tests/test_conversion_code_in_kg.py Fsss                                 [ 23%]
tests/test_io.py ....                                                    [ 30%]
tests/test_knowledge_graph.py ...........                                [ 51%]
tests/test_metadata.py ........                                          [ 67%]
tests/test_metadata_differ.py .......                                    [ 80%]
tests/test_py_interface.py ......                                        [ 92%]
tests/test_util.py ....                                                  [100%]

=================================== FAILURES ===================================
_____________________ test_all_conversion_code_exec_on_cpu _____________________

code_generator = <imgdataconvertcodegen.code_generator.ConvertCodeGenerator object at 0x7f4474b31630>

    def test_all_conversion_code_exec_on_cpu(code_generator):
        kg = code_generator.knowledge_graph
        for edge in kg.edges:
            if is_code_exec_on_cpu(edge):
>               assert_exec_of_conversion_code_in_edge(*edge, kg)

tests/test_conversion_code_in_kg.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
target_metadata = {'channel_order': 'channel last', 'color_channel': 'rgb', 'data_representation': 'numpy.ndarray', 'device': 'cpu', ...}
kg = <imgdataconvertcodegen.knowledge_graph_construction.knowledge_graph.KnowledgeGraph object at 0x7f44ea70afe0>

    def assert_exec_of_conversion_code_in_edge(source_metadata, target_metadata, kg):
        edge_data = kg.get_edge_data(source_metadata, target_metadata)
        conversion = edge_data.get('conversion')
        assert conversion is not None, f"No conversion from {source_metadata} to {target_metadata}"
        assert len(conversion) == 2, (f"Expected two elements in the conversions, but got: {conversion} from"
                                      f" {source_metadata} to {target_metadata}")
        assert isinstance(conversion[0], str), (f"Expected the first element of the conversion to be a string, but got:"
                                                f" {conversion[0]} from {source_metadata} to {target_metadata}")
        assert isinstance(conversion[1], str), (f"Expected the second element of the conversion to be a string, but got:"
                                                f" {conversion[1]} from {source_metadata} to {target_metadata}")
        error_message = (f"conversion from\n {source_metadata} to\n {target_metadata} failed\n "
                         f"imports: {conversion[0]}\nconversion function: \n {conversion[1]}\nfrom {edge_data.get('factory')}")
    
        try:
            source_image, target_image = get_input_image_and_expected_output(source_metadata, target_metadata)
            func_name = re.search(r'(?<=def )\w+', conversion[1]).group(0)
    
            scope = {}
            scope.update({'source_image': source_image})
            exec(f"""{conversion[0]}
    {conversion[1]}
    actual_image = {func_name}(source_image)""", scope)
            actual_image = scope.get('actual_image')
        except Exception as e:
            raise AssertionError(f"Failed to execute conversion code from {error_message}") from e
    
>       assert is_image_equal(target_image,
                              actual_image), f'expected {target_image}, but actual {actual_image}. {error_message}'
E       AssertionError: expected [[[[ 0.07086611 -1.5984251  -0.71653545]
E            [ 0.10236216 -1.6456692  -3.        ]
E            [-1.1574804  -1.6771653  -1.3464568 ]
E            ...
E            [-0.87401575  0.6377952  -1.976378  ]
E            [-0.14960629 -0.48031497 -2.7795277 ]
E            [ 0.4330709  -0.8267716  -2.1023622 ]]
E         
E           [[-2.7952757   0.3070866   0.9527559 ]
E            [-1.7874016   0.54330707  0.984252  ]
E            [-1.2204725  -2.03937     0.1338582 ]
E            ...
E            [-1.5826771  -0.6850394   0.46456695]
E            [ 0.7480315  -2.937008   -2.8110237 ]
E            [-1.472441   -2.464567   -1.7401575 ]]
E         
E           [[-0.22834647  0.511811    0.9212599 ]
E            [-1.9291339  -2.8110237  -0.9527559 ]
E            [-0.44881892 -0.984252   -2.8582678 ]
E            ...
E            [-1.6614172   0.16535437 -0.9527559 ]
E            [-0.10236222  0.10236216  0.44881892]
E            [-1.1259842   0.29133856 -1.9448819 ]]
E         
E           ...
E         
E           [[-1.5511811  -0.02362204  0.60629916]
E            [-2.6692915  -1.7086614   0.35433066]
E            [-1.1732284  -2.8897638  -1.472441  ]
E            ...
E            [-2.1968503  -0.7322835  -1.2834646 ]
E            [-1.1889764  -0.7007874  -2.6377952 ]
E            [-1.8188976  -0.54330707 -2.559055  ]]
E         
E           [[-1.0944881  -0.54330707 -2.984252  ]
E            [-2.480315    0.16535437 -0.9527559 ]
E            [ 0.60629916 -1.0787401  -0.10236222]
E            ...
E            [-2.1811023  -1.2992126   0.9527559 ]
E            [-0.38582677 -1.7874016  -2.3228345 ]
E            [-1.2834646  -2.8110237  -0.511811  ]]
E         
E           [[-2.9055119  -2.6377952  -1.3149606 ]
E            [ 0.88976383 -2.6535435   0.25984251]
E            [-0.5590551   0.8740157  -1.7559055 ]
E            ...
E            [ 0.984252   -1.7874016  -2.3543305 ]
E            [-1.535433   -2.2913384  -2.7952757 ]
E            [ 0.1811024  -1.6456692   0.90551186]]]], but actual [[[[ 0.53543305 -0.2992126   0.14173228]
E            [ 0.5511811  -0.32283464 -1.        ]
E            [-0.07874016 -0.33858266 -0.17322835]
E            ...
E            [ 0.06299213  0.8188976  -0.48818898]
E            [ 0.42519686  0.25984251 -0.8897638 ]
E            [ 0.71653545  0.08661418 -0.5511811 ]]
E         
E           [[-0.8976378   0.6535433   0.97637796]
E            [-0.39370078  0.77165353  0.992126  ]
E            [-0.11023622 -0.51968503  0.5669291 ]
E            ...
E            [-0.2913386   0.15748031  0.7322835 ]
E            [ 0.87401575 -0.96850395 -0.9055118 ]
E            [-0.23622048 -0.7322835  -0.37007874]]
E         
E           [[ 0.38582677  0.7559055   0.96062994]
E            [-0.46456692 -0.9055118   0.02362205]
E            [ 0.27559054  0.00787402 -0.92913383]
E            ...
E            [-0.33070865  0.5826772   0.02362205]
E            [ 0.4488189   0.5511811   0.72440946]
E            [-0.06299213  0.6456693  -0.47244096]]
E         
E           ...
E         
E           [[-0.27559054  0.48818898  0.8031496 ]
E            [-0.8346457  -0.35433072  0.6771653 ]
E            [-0.08661418 -0.9448819  -0.23622048]
E            ...
E            [-0.5984252   0.13385826 -0.14173228]
E            [-0.09448819  0.1496063  -0.8188976 ]
E            [-0.4094488   0.22834645 -0.77952754]]
E         
E           [[-0.04724409  0.22834645 -0.992126  ]
E            [-0.7401575   0.5826772   0.02362205]
E            [ 0.8031496  -0.03937008  0.4488189 ]
E            ...
E            [-0.5905512  -0.1496063   0.97637796]
E            [ 0.30708662 -0.39370078 -0.6614173 ]
E            [-0.14173228 -0.9055118   0.24409449]]
E         
E           [[-0.9527559  -0.8188976  -0.15748031]
E            [ 0.9448819  -0.8267717   0.62992126]
E            [ 0.22047244  0.93700784 -0.37795275]
E            ...
E            [ 0.992126   -0.39370078 -0.6771653 ]
E            [-0.26771653 -0.6456693  -0.8976378 ]
E            [ 0.5905512  -0.32283464  0.9527559 ]]]]. conversion from
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
E          {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
E          imports: import skimage as ski
E         conversion function: 
E          def convert(var):
E          return ski.util.img_as_float32(var)
E         from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
E       assert False
E        +  where False = is_image_equal(array([[[[ 0.07086611, -1.5984251 , -0.71653545],\n         [ 0.10236216, -1.6456692 , -3.        ],\n         [-1.15748...,\n         [-1.535433  , -2.2913384 , -2.7952757 ],\n         [ 0.1811024 , -1.6456692 ,  0.90551186]]]], dtype=float32), array([[[[ 0.53543305, -0.2992126 ,  0.14173228],\n         [ 0.5511811 , -0.32283464, -1.        ],\n         [-0.07874...,\n         [-0.26771653, -0.6456693 , -0.8976378 ],\n         [ 0.5905512 , -0.32283464,  0.9527559 ]]]], dtype=float32))

tests/test_conversion_code_in_kg.py:46: AssertionError
- generated xml file: /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/pytest.xml -

---------- coverage: platform linux, python 3.10.14-final-0 ----------
Name                                                                        Stmts   Miss Branch BrPart  Cover   Missing
-----------------------------------------------------------------------------------------------------------------------
src/imgdataconvertcodegen/end_metadata_mapper.py                              131     90     52      7    26%   39, 41, 55, 67, 82-100, 112-125, 137-151, 163-177, 190-221, 238, 253, 259, 273-292, 304-336
src/imgdataconvertcodegen/image_data.py                                       226     13    142      9    93%   61, 69, 91, 118->120, 130, 302, 328-329, 338, 345-349
src/imgdataconvertcodegen/interface_cmd.py                                     11     11      0      0     0%   12-38
src/imgdataconvertcodegen/interface_py_api.py                                  25      4      0      0    84%   61-62, 66-67
src/imgdataconvertcodegen/knowledge_graph_construction/constructor.py         100      9     28      2    91%   37-38, 42, 81, 119-121, 124-125
src/imgdataconvertcodegen/knowledge_graph_construction/knowledge_graph.py      52      6     10      1    89%   50-57
src/imgdataconvertcodegen/knowledge_graph_construction/metedata/util.py        26      0     22      2    96%   24->27, 25->24
-----------------------------------------------------------------------------------------------------------------------
TOTAL                                                                        1051    133    488     21    87%

15 files skipped due to complete coverage.

=========================== short test summary info ============================
FAILED tests/test_conversion_code_in_kg.py::test_all_conversion_code_exec_on_cpu - AssertionError: expected [[[[ 0.07086611 -1.5984251  -0.71653545]
     [ 0.10236216 -1.6456692  -3.        ]
     [-1.1574804  -1.6771653  -1.3464568 ]
     ...
     [-0.87401575  0.6377952  -1.976378  ]
     [-0.14960629 -0.48031497 -2.7795277 ]
     [ 0.4330709  -0.8267716  -2.1023622 ]]
  
    [[-2.7952757   0.3070866   0.9527559 ]
     [-1.7874016   0.54330707  0.984252  ]
     [-1.2204725  -2.03937     0.1338582 ]
     ...
     [-1.5826771  -0.6850394   0.46456695]
     [ 0.7480315  -2.937008   -2.8110237 ]
     [-1.472441   -2.464567   -1.7401575 ]]
  
    [[-0.22834647  0.511811    0.9212599 ]
     [-1.9291339  -2.8110237  -0.9527559 ]
     [-0.44881892 -0.984252   -2.8582678 ]
     ...
     [-1.6614172   0.16535437 -0.9527559 ]
     [-0.10236222  0.10236216  0.44881892]
     [-1.1259842   0.29133856 -1.9448819 ]]
  
    ...
  
    [[-1.5511811  -0.02362204  0.60629916]
     [-2.6692915  -1.7086614   0.35433066]
     [-1.1732284  -2.8897638  -1.472441  ]
     ...
     [-2.1968503  -0.7322835  -1.2834646 ]
     [-1.1889764  -0.7007874  -2.6377952 ]
     [-1.8188976  -0.54330707 -2.559055  ]]
  
    [[-1.0944881  -0.54330707 -2.984252  ]
     [-2.480315    0.16535437 -0.9527559 ]
     [ 0.60629916 -1.0787401  -0.10236222]
     ...
     [-2.1811023  -1.2992126   0.9527559 ]
     [-0.38582677 -1.7874016  -2.3228345 ]
     [-1.2834646  -2.8110237  -0.511811  ]]
  
    [[-2.9055119  -2.6377952  -1.3149606 ]
     [ 0.88976383 -2.6535435   0.25984251]
     [-0.5590551   0.8740157  -1.7559055 ]
     ...
     [ 0.984252   -1.7874016  -2.3543305 ]
     [-1.535433   -2.2913384  -2.7952757 ]
     [ 0.1811024  -1.6456692   0.90551186]]]], but actual [[[[ 0.53543305 -0.2992126   0.14173228]
     [ 0.5511811  -0.32283464 -1.        ]
     [-0.07874016 -0.33858266 -0.17322835]
     ...
     [ 0.06299213  0.8188976  -0.48818898]
     [ 0.42519686  0.25984251 -0.8897638 ]
     [ 0.71653545  0.08661418 -0.5511811 ]]
  
    [[-0.8976378   0.6535433   0.97637796]
     [-0.39370078  0.77165353  0.992126  ]
     [-0.11023622 -0.51968503  0.5669291 ]
     ...
     [-0.2913386   0.15748031  0.7322835 ]
     [ 0.87401575 -0.96850395 -0.9055118 ]
     [-0.23622048 -0.7322835  -0.37007874]]
  
    [[ 0.38582677  0.7559055   0.96062994]
     [-0.46456692 -0.9055118   0.02362205]
     [ 0.27559054  0.00787402 -0.92913383]
     ...
     [-0.33070865  0.5826772   0.02362205]
     [ 0.4488189   0.5511811   0.72440946]
     [-0.06299213  0.6456693  -0.47244096]]
  
    ...
  
    [[-0.27559054  0.48818898  0.8031496 ]
     [-0.8346457  -0.35433072  0.6771653 ]
     [-0.08661418 -0.9448819  -0.23622048]
     ...
     [-0.5984252   0.13385826 -0.14173228]
     [-0.09448819  0.1496063  -0.8188976 ]
     [-0.4094488   0.22834645 -0.77952754]]
  
    [[-0.04724409  0.22834645 -0.992126  ]
     [-0.7401575   0.5826772   0.02362205]
     [ 0.8031496  -0.03937008  0.4488189 ]
     ...
     [-0.5905512  -0.1496063   0.97637796]
     [ 0.30708662 -0.39370078 -0.6614173 ]
     [-0.14173228 -0.9055118   0.24409449]]
  
    [[-0.9527559  -0.8188976  -0.15748031]
     [ 0.9448819  -0.8267717   0.62992126]
     [ 0.22047244  0.93700784 -0.37795275]
     ...
     [ 0.992126   -0.39370078 -0.6771653 ]
     [-0.26771653 -0.6456693  -0.8976378 ]
     [ 0.5905512  -0.32283464  0.9527559 ]]]]. conversion from
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'int8', 'device': 'cpu'} to
   {'data_representation': 'numpy.ndarray', 'color_channel': 'rgb', 'channel_order': 'channel last', 'minibatch_input': True, 'image_data_type': 'float32(-1to1)', 'device': 'cpu'} failed
   imports: import skimage as ski
  conversion function: 
   def convert(var):
   return ski.util.img_as_float32(var)
  from image_data_integer_to_float32_minus1_to_1 in /home/runner/work/ImgDataConvertCodeGen/ImgDataConvertCodeGen/src/imgdataconvertcodegen/knowledge_graph_construction/edge_factories/numpy.py
assert False
 +  where False = is_image_equal(array([[[[ 0.07086611, -1.5984251 , -0.71653545],\n         [ 0.10236216, -1.6456692 , -3.        ],\n         [-1.15748...,\n         [-1.535433  , -2.2913384 , -2.7952757 ],\n         [ 0.1811024 , -1.6456692 ,  0.90551186]]]], dtype=float32), array([[[[ 0.53543305, -0.2992126 ,  0.14173228],\n         [ 0.5511811 , -0.32283464, -1.        ],\n         [-0.07874...,\n         [-0.26771653, -0.6456693 , -0.8976378 ],\n         [ 0.5905512 , -0.32283464,  0.9527559 ]]]], dtype=float32))
=================== 1 failed, 48 passed, 3 skipped in 27.63s ===================
